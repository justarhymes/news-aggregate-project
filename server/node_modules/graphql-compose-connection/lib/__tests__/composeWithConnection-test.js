"use strict";

var _graphqlCompose = require("graphql-compose");

var _graphql = require("graphql-compose/lib/graphql");

var _composeWithConnection = require("../composeWithConnection");

var _userTC = require("../__mocks__/userTC");

var _rootQueryTC = require("../__mocks__/rootQueryTC");

/* eslint-disable no-param-reassign */
describe('composeWithRelay', () => {
  const userComposer = (0, _composeWithConnection.composeWithConnection)(_userTC.userTC, {
    countResolverName: 'count',
    findResolverName: 'findMany',
    sort: _userTC.sortOptions
  });
  describe('basic checks', () => {
    it('should return ObjectTypeComposer', () => {
      expect(userComposer).toBeInstanceOf(_graphqlCompose.ObjectTypeComposer);
    });
    it('should throw error if first arg is not ObjectTypeComposer', () => {
      expect(() => {
        const wrongArgs = [123];
        (0, _composeWithConnection.composeWithConnection)(...wrongArgs);
      }).toThrowError('should provide ObjectTypeComposer instance');
    });
    it('should throw error if options are empty', () => {
      expect(() => {
        const wrongArgs = [_userTC.userTC];
        (0, _composeWithConnection.composeWithConnection)(...wrongArgs);
      }).toThrowError('should provide non-empty options');
    });
    it('should not change `connection` resolver if exists', () => {
      let myTC = _graphqlCompose.schemaComposer.createObjectTC('type Complex { a: String, b: Int }');

      myTC.addResolver({
        name: 'connection',
        resolve: () => 'mockData'
      }); // try ovewrite `connection` resolver

      myTC = (0, _composeWithConnection.composeWithConnection)(myTC, {
        countResolverName: 'count',
        findResolverName: 'findMany',
        sort: _userTC.sortOptions
      });
      expect(myTC.getResolver('connection')).toBeTruthy();
      expect(myTC.getResolver('connection').resolve({})).toBe('mockData');
    });
    it('should add resolver with user-specified name', () => {
      let myTC = _graphqlCompose.schemaComposer.createObjectTC('type CustomComplex { a: String, b: Int }');

      myTC.addResolver({
        name: 'count',
        resolve: () => 1
      });
      myTC.addResolver({
        name: 'findMany',
        resolve: () => ['mockData']
      });
      myTC = (0, _composeWithConnection.composeWithConnection)(myTC, {
        connectionResolverName: 'customConnection',
        countResolverName: 'count',
        findResolverName: 'findMany',
        sort: _userTC.sortOptions
      });
      expect(myTC.getResolver('customConnection')).toBeTruthy();
      expect(myTC.hasResolver('connection')).toBeFalsy();
    });
    it('should add two connection resolvers', () => {
      let myTC = _graphqlCompose.schemaComposer.createObjectTC('type CustomComplex { a: String, b: Int }');

      myTC.addResolver({
        name: 'count',
        resolve: () => 1
      });
      myTC.addResolver({
        name: 'findMany',
        resolve: () => ['mockData']
      });
      myTC = (0, _composeWithConnection.composeWithConnection)(myTC, {
        countResolverName: 'count',
        findResolverName: 'findMany',
        sort: _userTC.sortOptions
      });
      myTC = (0, _composeWithConnection.composeWithConnection)(myTC, {
        connectionResolverName: 'customConnection',
        countResolverName: 'count',
        findResolverName: 'findMany',
        sort: _userTC.sortOptions
      });
      expect(myTC.hasResolver('connection')).toBeTruthy();
      expect(myTC.getResolver('customConnection')).toBeTruthy();
    });
  });
  describe('check `connection` resolver props', () => {
    const rsv = userComposer.getResolver('connection');
    const type = rsv.getType();

    const tc = _graphqlCompose.schemaComposer.createObjectTC(type);

    it('should exists', () => {
      expect(rsv).toBeTruthy();
    });
    it('should has ConnectionType as type', () => {
      expect(type).toBeTruthy();
      expect(tc.getFieldNames()).toEqual(expect.arrayContaining(['count', 'pageInfo', 'edges']));
      const edgesType = tc.getFieldType('edges');
      expect(edgesType).toBeInstanceOf(_graphql.GraphQLNonNull);
      expect(edgesType.ofType).toBeInstanceOf(_graphql.GraphQLList);
    });
  });
  it('should apply first sort ID_ASC by default', async () => {
    _rootQueryTC.rootQueryTC.setField('userConnection', _userTC.userTC.getResolver('connection'));

    const schema = new _graphql.GraphQLSchema({
      query: _rootQueryTC.rootQueryTC.getType()
    });
    const query = `{
      userConnection(last: 3) {
        count,
        pageInfo {
          startCursor
          endCursor
          hasPreviousPage
          hasNextPage
        }
        edges {
          cursor
          node {
            id
            name
          }
        }
      }
    }`;
    const result = await (0, _graphql.graphql)(schema, query);
    expect(result.data.userConnection).toEqual({
      count: 15,
      pageInfo: {
        startCursor: 'eyJpZCI6MTN9',
        endCursor: 'eyJpZCI6MTV9',
        hasPreviousPage: true,
        hasNextPage: false
      },
      edges: [{
        cursor: 'eyJpZCI6MTN9',
        node: {
          id: 13,
          name: 'user13'
        }
      }, {
        cursor: 'eyJpZCI6MTR9',
        node: {
          id: 14,
          name: 'user14'
        }
      }, {
        cursor: 'eyJpZCI6MTV9',
        node: {
          id: 15,
          name: 'user15'
        }
      }]
    });
  });
  it('should able to change `sort` on AGE_ID_DESC', async () => {
    _rootQueryTC.rootQueryTC.setField('userConnection', _userTC.userTC.getResolver('connection'));

    const schema = new _graphql.GraphQLSchema({
      query: _rootQueryTC.rootQueryTC.getType()
    });
    const query = `{
      userConnection(first: 3, sort: AGE_ID_DESC) {
        count,
        pageInfo {
          startCursor
          endCursor
          hasPreviousPage
          hasNextPage
        }
        edges {
          cursor
          node {
            id
            name
            age
          }
        }
      }
    }`;
    const result = await (0, _graphql.graphql)(schema, query);
    expect(result.data.userConnection).toEqual({
      count: 15,
      pageInfo: {
        startCursor: 'eyJhZ2UiOjQ5LCJpZCI6MTF9',
        endCursor: 'eyJhZ2UiOjQ3LCJpZCI6MTJ9',
        hasPreviousPage: false,
        hasNextPage: true
      },
      edges: [{
        cursor: 'eyJhZ2UiOjQ5LCJpZCI6MTF9',
        node: {
          id: 11,
          name: 'user11',
          age: 49
        }
      }, {
        cursor: 'eyJhZ2UiOjQ5LCJpZCI6MTB9',
        node: {
          id: 10,
          name: 'user10',
          age: 49
        }
      }, {
        cursor: 'eyJhZ2UiOjQ3LCJpZCI6MTJ9',
        node: {
          id: 12,
          name: 'user12',
          age: 47
        }
      }]
    });
  });
  describe('fragments fields projection of graphql-compose', () => {
    it('should return object', async () => {
      _rootQueryTC.rootQueryTC.setField('userConnection', _userTC.userTC.getResolver('connection'));

      const schema = new _graphql.GraphQLSchema({
        query: _rootQueryTC.rootQueryTC.getType()
      });
      const query = `{
        userConnection(first: 1) {
          count,
          pageInfo {
            startCursor
            endCursor
            ...on PageInfo {
              hasPreviousPage
              hasNextPage
            }
          }
          edges {
            cursor
            node {
              id
              name
              ...idNameAge
              ...on User {
                age
              }
            }
          }
        }
      }
      fragment idNameAge on User {
        gender
      }
      `;
      const result = await (0, _graphql.graphql)(schema, query);
      expect(result).toEqual({
        data: {
          userConnection: {
            count: 15,
            edges: [{
              cursor: 'eyJpZCI6MX0=',
              node: {
                age: 11,
                gender: 'm',
                id: 1,
                name: 'user01'
              }
            }],
            pageInfo: {
              endCursor: 'eyJpZCI6MX0=',
              hasPreviousPage: false,
              hasNextPage: true,
              startCursor: 'eyJpZCI6MX0='
            }
          }
        }
      });
    });
  });
  it('should pass `countResolveParams` to top resolverParams', async () => {
    let topResolveParams = {};

    _rootQueryTC.rootQueryTC.setField('userConnection', _userTC.userTC.getResolver('connection').wrapResolve(next => rp => {
      const result = next(rp);
      topResolveParams = rp;
      return result;
    }));

    const schema = new _graphql.GraphQLSchema({
      query: _rootQueryTC.rootQueryTC.getType()
    });
    const query = `{
      userConnection(first: 1, filter: { age: 45 }) {
        count
      }
    }`;
    await (0, _graphql.graphql)(schema, query);
    expect(Object.keys(topResolveParams.countResolveParams)).toEqual(expect.arrayContaining(['source', 'args', 'context', 'info', 'projection']));
    expect(topResolveParams.countResolveParams.args).toEqual({
      filter: {
        age: 45
      }
    });
  });
  it('should pass `findManyResolveParams` to top resolverParams', async () => {
    let topResolveParams = {};

    _rootQueryTC.rootQueryTC.setField('userConnection', _userTC.userTC.getResolver('connection').wrapResolve(next => rp => {
      const result = next(rp);
      topResolveParams = rp;
      return result;
    }));

    const schema = new _graphql.GraphQLSchema({
      query: _rootQueryTC.rootQueryTC.getType()
    });
    const query = `{
      userConnection(first: 1, filter: { age: 45 }) {
        count
      }
    }`;
    await (0, _graphql.graphql)(schema, query);
    expect(Object.keys(topResolveParams.findManyResolveParams)).toEqual(expect.arrayContaining(['source', 'args', 'context', 'info', 'projection']));
    expect(topResolveParams.findManyResolveParams.args).toEqual({
      filter: {
        age: 45
      },
      limit: 2,
      sort: {
        id: 1
      },
      first: 1
    });
  });
});