"use strict";

var _graphqlCompose = require("graphql-compose");

var _graphql = require("graphql-compose/lib/graphql");

var _userTC = require("../../__mocks__/userTC");

var _connectionType = require("../connectionType");

describe('types/connectionType.js', () => {
  describe('prepareEdgeType()', () => {
    it('should return ComposeObjectType', () => {
      expect((0, _connectionType.prepareEdgeType)(_userTC.userTC)).toBeInstanceOf(_graphqlCompose.ObjectTypeComposer);
    });
    it('should have name ending with `Edge`', () => {
      expect((0, _connectionType.prepareEdgeType)(_userTC.userTC).getTypeName()).toBe('UserEdge');
    });
    it('should have field `node` with provided Type', () => {
      const tc = _graphqlCompose.schemaComposer.createObjectTC((0, _connectionType.prepareEdgeType)(_userTC.userTC));

      const nodeType = tc.getFieldType('node');
      expect(nodeType).toBeInstanceOf(_graphql.GraphQLNonNull);
      expect(nodeType.ofType).toBe(_userTC.userTC.getType());
    });
    it('should have field `cursor` with GraphQLNonNull(GraphQLString)', () => {
      const tc = _graphqlCompose.schemaComposer.createObjectTC((0, _connectionType.prepareEdgeType)(_userTC.userTC));

      expect(tc.getFieldType('cursor')).toBeInstanceOf(_graphql.GraphQLNonNull);
      const cursor = (0, _graphql.getNamedType)(tc.getFieldType('cursor'));
      expect(cursor).toBe(_graphql.GraphQLString);
    });
    it('should return same type for same Type in ObjectTypeComposer', () => {
      const t1 = (0, _connectionType.prepareEdgeType)(_userTC.userTC);
      const t2 = (0, _connectionType.prepareEdgeType)(_userTC.userTC);
      expect(t1).toEqual(t2);
    });
    it('should return different type for same Type in ObjectTypeComposer if passed with different edgeType param', () => {
      const t1 = (0, _connectionType.prepareEdgeType)(_userTC.userTC);
      const t2 = (0, _connectionType.prepareEdgeType)(_userTC.userTC, 'UserEdge2');
      expect(t1).not.toEqual(t2);
    });
  });
  describe('prepareConnectionType()', () => {
    it('should return ComposeObjectType', () => {
      expect((0, _connectionType.prepareConnectionType)(_userTC.userTC)).toBeInstanceOf(_graphqlCompose.ObjectTypeComposer);
    });
    it('should return the same ComposeObjectType object when called again', () => {
      const firstConnectionType = (0, _connectionType.prepareConnectionType)(_userTC.userTC);
      const secondConnectionType = (0, _connectionType.prepareConnectionType)(_userTC.userTC);
      expect(firstConnectionType).toBeInstanceOf(_graphqlCompose.ObjectTypeComposer);
      expect(firstConnectionType).toBe(secondConnectionType);
    });
    it('should return a separate ComposeObjectType with a different name', () => {
      const connectionType = (0, _connectionType.prepareConnectionType)(_userTC.userTC);
      const otherConnectionType = (0, _connectionType.prepareConnectionType)(_userTC.userTC, 'otherConnection');
      expect(connectionType).toBeInstanceOf(_graphqlCompose.ObjectTypeComposer);
      expect(otherConnectionType).toBeInstanceOf(_graphqlCompose.ObjectTypeComposer);
      expect(connectionType).not.toBe(otherConnectionType);
    });
    it('should have name ending with `Connection`', () => {
      expect((0, _connectionType.prepareConnectionType)(_userTC.userTC).getTypeName()).toBe('UserConnection');
    });
    it('should have name ending with `OtherConnection` when passed lowercase otherConnection', () => {
      expect((0, _connectionType.prepareConnectionType)(_userTC.userTC, 'otherConnection').getTypeName()).toBe('UserOtherConnection');
    });
    it('should have field `count` with provided Type', () => {
      const tc = _graphqlCompose.schemaComposer.createObjectTC((0, _connectionType.prepareConnectionType)(_userTC.userTC));

      const countType = tc.getFieldType('count');
      expect(countType).toBeInstanceOf(_graphql.GraphQLNonNull);
      expect(countType.ofType).toBe(_graphql.GraphQLInt);
    });
    it('should have field `pageInfo` with GraphQLNonNull(PageInfoType)', () => {
      const tc = _graphqlCompose.schemaComposer.createObjectTC((0, _connectionType.prepareConnectionType)(_userTC.userTC));

      expect(tc.getFieldType('pageInfo')).toBeInstanceOf(_graphql.GraphQLNonNull);
      expect(tc.getField('pageInfo').type.getTypeName()).toBe('PageInfo!');
    });
    it('should have field `edges` with GraphQLList(EdgeType)', () => {
      const tc = _graphqlCompose.schemaComposer.createObjectTC((0, _connectionType.prepareConnectionType)(_userTC.userTC));

      const edgesType = tc.getFieldType('edges');
      expect(edgesType).toBeInstanceOf(_graphql.GraphQLNonNull);
      expect(edgesType.ofType).toBeInstanceOf(_graphql.GraphQLList);
      const edges = (0, _graphql.getNamedType)(tc.getFieldType('edges'));
      expect(edges.name).toEqual('UserEdge');
    });
    it('should return same type for same Type in ObjectTypeComposer', () => {
      const t1 = (0, _connectionType.prepareConnectionType)(_userTC.userTC);
      const t2 = (0, _connectionType.prepareConnectionType)(_userTC.userTC);
      expect(t1).toEqual(t2);
    });
  });
});