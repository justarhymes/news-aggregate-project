"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.preparePageInfoType = preparePageInfoType;
exports.prepareEdgeType = prepareEdgeType;
exports.prepareConnectionType = prepareConnectionType;

var _graphqlCompose = require("graphql-compose");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// This is required due compatibility with old client code bases
const globalPageInfoTypes = {};

function createGlobalPageInfoType(name) {
  if (!globalPageInfoTypes[name]) {
    globalPageInfoTypes[name] = _graphqlCompose.ObjectTypeComposer.createTemp(`
      """Information about pagination in a connection."""
      type ${name} {
        """When paginating forwards, are there more items?"""
        hasNextPage: Boolean!
        
        """When paginating backwards, are there more items?"""
        hasPreviousPage: Boolean!

        """When paginating backwards, the cursor to continue."""
        startCursor: String

        """When paginating forwards, the cursor to continue."""
        endCursor: String
      }
    `);
  }

  return globalPageInfoTypes[name];
}

function preparePageInfoType(schemaComposer, name = 'PageInfo') {
  if (schemaComposer.has(name)) {
    return schemaComposer.getOTC(name);
  }

  const tc = createGlobalPageInfoType(name);
  schemaComposer.set(name, tc);
  return tc;
}

function prepareEdgeType(nodeTypeComposer, edgeTypeName, edgeFields) {
  const name = edgeTypeName || `${nodeTypeComposer.getTypeName()}Edge`;

  if (nodeTypeComposer.schemaComposer.has(name)) {
    return nodeTypeComposer.schemaComposer.getOTC(name);
  }

  const edgeType = nodeTypeComposer.schemaComposer.createObjectTC({
    name,
    description: 'An edge in a connection.',
    fields: _objectSpread({}, edgeFields, {
      node: {
        type: new _graphqlCompose.NonNullComposer(nodeTypeComposer),
        description: 'The item at the end of the edge'
      },
      cursor: {
        type: 'String!',
        description: 'A cursor for use in pagination'
      }
    })
  });
  return edgeType;
}

function prepareConnectionType(typeComposer, resolverName, edgeTypeName, edgeFields) {
  const name = `${typeComposer.getTypeName()}${(0, _graphqlCompose.upperFirst)(resolverName || 'connection')}`;

  if (typeComposer.schemaComposer.has(name)) {
    return typeComposer.schemaComposer.getOTC(name);
  }

  const connectionType = typeComposer.schemaComposer.createObjectTC({
    name,
    description: 'A connection to a list of items.',
    fields: {
      count: {
        type: 'Int!',
        description: 'Total object count.'
      },
      pageInfo: {
        type: new _graphqlCompose.NonNullComposer(preparePageInfoType(typeComposer.schemaComposer)),
        description: 'Information to aid in pagination.'
      },
      edges: {
        type: new _graphqlCompose.NonNullComposer(new _graphqlCompose.ListComposer(new _graphqlCompose.NonNullComposer(prepareEdgeType(typeComposer, edgeTypeName, edgeFields)))),
        description: 'Information to aid in pagination.'
      }
    }
  });
  return connectionType;
}