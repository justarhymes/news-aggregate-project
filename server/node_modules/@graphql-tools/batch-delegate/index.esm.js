import { GraphQLList, getNamedType } from 'graphql';
import DataLoader from 'dataloader';
import { delegateToSchema } from '@graphql-tools/delegate';

function createBatchDelegateFn(argFn, batchDelegateOptionsFn, dataLoaderOptions) {
    let cache;
    function createBatchFn(options) {
        return async (keys) => {
            const results = await delegateToSchema({
                returnType: new GraphQLList(getNamedType(options.info.returnType)),
                args: argFn(keys),
                ...batchDelegateOptionsFn(options),
            });
            return Array.isArray(results) ? results : keys.map(() => results);
        };
    }
    function getLoader(options) {
        if (!cache) {
            cache = new WeakMap();
            const batchFn = createBatchFn(options);
            const newValue = new DataLoader(keys => batchFn(keys), dataLoaderOptions);
            cache.set(options.info.fieldNodes, newValue);
            return newValue;
        }
        const cachedValue = cache.get(options.info.fieldNodes);
        if (cachedValue === undefined) {
            const batchFn = createBatchFn(options);
            const newValue = new DataLoader(keys => batchFn(keys), dataLoaderOptions);
            cache.set(options.info.fieldNodes, newValue);
            return newValue;
        }
        return cachedValue;
    }
    return options => {
        const loader = getLoader(options);
        return loader.load(options.key);
    };
}

export { createBatchDelegateFn };
//# sourceMappingURL=index.esm.js.map
