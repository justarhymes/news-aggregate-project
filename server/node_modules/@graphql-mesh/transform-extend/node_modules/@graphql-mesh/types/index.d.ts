import { IResolvers } from '@graphql-tools/utils';
import { IEventEmitter } from 'tsee';
import { GraphQLSchema, GraphQLResolveInfo } from 'graphql';
import * as YamlConfig from './config';
import { KeyValueCache, KeyValueCacheSetOptions } from 'fetchache';
export { YamlConfig };
export declare function getJsonSchema(): any;
export declare type MeshSource<ContextType = any, InitialContext = any> = {
    schema: GraphQLSchema;
    contextVariables?: (keyof InitialContext)[];
    contextBuilder?: (initialContextValue: InitialContext) => Promise<ContextType>;
};
export declare type GetMeshSourceOptions<THandlerConfig> = {
    name: string;
    hooks: Hooks;
    config: THandlerConfig;
    cache: KeyValueCache;
};
export declare type MeshHandlerLibrary<THandlerConfig = any, TContext = any> = {
    getMeshSource: (options: GetMeshSourceOptions<THandlerConfig>) => Promise<MeshSource<TContext>>;
};
export declare type ResolverData<TParent = any, TArgs = any, TContext = any> = {
    root?: TParent;
    args?: TArgs;
    context?: TContext;
    info?: GraphQLResolveInfo;
};
export declare type AllHooks = {
    schemaReady: (options: {
        schema: GraphQLSchema;
        applyResolvers: (modifiedResolvers: IResolvers) => void;
    }) => void;
    destroy: () => void;
    resolverCalled: (resolverData: ResolverData) => void;
    resolverDone: (resolverData: ResolverData, result: any) => void;
    resolverError: (resolverData: ResolverData, error: Error) => void;
};
export declare type Hooks = IEventEmitter<AllHooks>;
export declare type HooksKeys = keyof AllHooks;
export declare type TransformFn<Config = any> = (options: {
    schema: GraphQLSchema;
    config: Config;
    cache: KeyValueCache;
    hooks: Hooks;
    apiName?: string;
}) => Promise<GraphQLSchema> | GraphQLSchema;
export declare type Maybe<T> = null | undefined | T;
export { KeyValueCache, KeyValueCacheSetOptions };
export declare type MergerFn = (options: {
    rawSources: RawSourceOutput[];
    cache: KeyValueCache;
    hooks: Hooks;
}) => Promise<GraphQLSchema> | GraphQLSchema;
export declare type RawSourceOutput = {
    name: string;
    globalContextBuilder: null | ((initialContextValue?: any) => Promise<any>);
    schema: GraphQLSchema;
    context: Record<string, any>;
    contextVariables: (keyof any)[];
    handler: MeshHandlerLibrary;
};
