{"version":3,"file":"index.esm.js","sources":["../../../dist/handlers/openapi/src/openapi-to-graphql/utils.js","../../../dist/handlers/openapi/src/openapi-to-graphql/oas_3_tools.js","../../../dist/handlers/openapi/src/openapi-to-graphql/resolver_builder.js","../../../dist/handlers/openapi/src/openapi-to-graphql/types/graphql.js","../../../dist/handlers/openapi/src/openapi-to-graphql/preprocessor.js","../../../dist/handlers/openapi/src/openapi-to-graphql/schema_builder.js","../../../dist/handlers/openapi/src/openapi-to-graphql/graphql_tools.js","../../../dist/handlers/openapi/src/openapi-to-graphql/auth_builder.js","../../../dist/handlers/openapi/src/openapi-to-graphql/index.js","../../../dist/handlers/openapi/src/index.js","../../../node_modules/cross-fetch/dist/node-ponyfill.js"],"sourcesContent":["// Copyright IBM Corp. 2018. All Rights Reserved.\n// Node module: openapi-to-graphql\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\nexport const mitigations = {\n    /**\n     * Problems with the OAS\n     *\n     * Should be caught by the module oas-validator\n     */\n    INVALID_OAS: `Ignore issue and continue.`,\n    UNNAMED_PARAMETER: `Ignore parameter.`,\n    // General problems\n    AMBIGUOUS_UNION_MEMBERS: `Ignore issue and continue.`,\n    CANNOT_GET_FIELD_TYPE: `Ignore field and continue.`,\n    COMBINE_SCHEMAS: `Ignore combine schema keyword and continue.`,\n    DUPLICATE_FIELD_NAME: `Ignore field and maintain preexisting field.`,\n    DUPLICATE_LINK_KEY: `Ignore link and maintain preexisting link.`,\n    MISSING_RESPONSE_SCHEMA: `Ignore operation.`,\n    MISSING_SCHEMA: `Use arbitrary JSON type.`,\n    MULTIPLE_RESPONSES: `Select first response object with successful status code (200-299).`,\n    NON_APPLICATION_JSON_SCHEMA: `Ignore schema`,\n    OBJECT_MISSING_PROPERTIES: `The (sub-)object will be stored in an arbitray JSON type.`,\n    UNKNOWN_TARGET_TYPE: `The response will be stored in an arbitrary JSON type.`,\n    UNRESOLVABLE_SCHEMA: `Ignore and continue. May lead to unexpected behavior.`,\n    UNSUPPORTED_HTTP_SECURITY_SCHEME: `Ignore security scheme.`,\n    UNSUPPORTED_JSON_SCHEMA_KEYWORD: `Ignore keyword and continue.`,\n    // Links\n    AMBIGUOUS_LINK: `Use first occurance of '#/'.`,\n    LINK_NAME_COLLISION: `Ignore link and maintain preexisting field.`,\n    UNRESOLVABLE_LINK: `Ignore link.`,\n    // Multiple OAS\n    DUPLICATE_OPERATIONID: `Ignore operation and maintain preexisting operation.`,\n    DUPLICATE_SECURITY_SCHEME: `Ignore security scheme and maintain preexisting scheme.`,\n    MULTIPLE_OAS_SAME_TITLE: `Ignore issue and continue.`,\n    // Options\n    CUSTOM_RESOLVER_UNKNOWN_OAS: `Ignore this set of custom resolvers.`,\n    CUSTOM_RESOLVER_UNKNOWN_PATH_METHOD: `Ignore this set of custom resolvers.`,\n    LIMIT_ARGUMENT_NAME_COLLISION: `Do not override existing 'limit' argument.`,\n    // Miscellaneous\n    OAUTH_SECURITY_SCHEME: `Ignore security scheme`,\n};\n/**\n * Utilities that are specific to OpenAPI-to-GraphQL\n */\nexport function handleWarning({ typeKey, message, mitigationAddendum, path, data, log, }) {\n    const mitigation = mitigations[typeKey];\n    const warning = {\n        type: typeKey,\n        message,\n        mitigation: mitigationAddendum ? `${mitigation} ${mitigationAddendum}` : mitigation,\n    };\n    if (typeof path !== 'undefined') {\n        warning.path = path;\n    }\n    if (data.options.strict) {\n        throw new Error(`${warning.type} - ${warning.message}`);\n    }\n    else {\n        const output = `Warning: ${warning.message} - ${warning.mitigation}`;\n        if (typeof log === 'function') {\n            log(output);\n        }\n        else {\n            console.warn(output);\n        }\n        data.options.report.warnings.push(warning);\n    }\n}\n// Code provided by codename- from StackOverflow\n// Link: https://stackoverflow.com/a/29622653\nexport function sortObject(o) {\n    return (Object.keys(o)\n        .sort()\n        // eslint-disable-next-line no-sequences\n        .reduce((r, k) => ((r[k] = o[k]), r), {}));\n}\n/**\n * Finds the common property names between two objects\n */\nexport function getCommonPropertyNames(object1, object2) {\n    return Object.keys(object1).filter(propertyName => {\n        return propertyName in object2;\n    });\n}\n//# sourceMappingURL=utils.js.map","/* eslint-disable no-use-before-define */\n// Copyright IBM Corp. 2018. All Rights Reserved.\n// Node module: openapi-to-graphql\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n// Imports:\nimport { convertObj as convertSwaggerObjToOpenAPI } from 'swagger2openapi';\nimport { validate as oasValidate } from 'oas-validator';\nimport debug from 'debug';\nimport { handleWarning } from './utils';\nimport * as pluralize from 'pluralize';\nconst httpLog = debug('http');\nconst preprocessingLog = debug('preprocessing');\nconst translationLog = debug('translation');\n// OAS constants\nexport const OAS_OPERATIONS = ['get', 'put', 'post', 'patch', 'delete', 'options', 'head'];\nexport const SUCCESS_STATUS_RX = /2[0-9]{2}|2XX/;\n/**\n * Resolves on a validated OAS 3 for the given spec (OAS 2 or OAS 3), or rejects\n * if errors occur.\n */\nexport async function getValidOAS3(spec, options) {\n    // CASE: translate\n    if (typeof spec.swagger === 'string' && spec.swagger === '2.0') {\n        preprocessingLog(`Received OpenAPI Specification 2.0 - going to translate...`);\n        const result = await convertSwaggerObjToOpenAPI(spec, {});\n        return result.openapi;\n        // CASE: validate\n    }\n    else if (typeof spec.openapi === 'string' && /^3/.test(spec.openapi)) {\n        if (!options.skipSchemaValidation) {\n            preprocessingLog(`Received OpenAPI Specification 3.0.x - going to validate...`);\n            const valid = await oasValidate(spec, {});\n            if (!valid) {\n                throw new Error(`Validation of OpenAPI Specification failed.`);\n            }\n            preprocessingLog(`OpenAPI Specification is validated`);\n        }\n        return spec;\n    }\n    else {\n        throw new Error(`Invalid specification provided`);\n    }\n}\n/**\n * Counts the number of operations in an OAS.\n */\nexport function countOperations(oas) {\n    let numOps = 0;\n    for (const path in oas.paths) {\n        for (const method in oas.paths[path]) {\n            if (isOperation(method)) {\n                numOps++;\n            }\n        }\n    }\n    return numOps;\n}\n/**\n * Counts the number of operations that translate to queries in an OAS.\n */\nexport function countOperationsQuery(oas) {\n    let numOps = 0;\n    for (const path in oas.paths) {\n        for (const method in oas.paths[path]) {\n            if (isOperation(method) && method.toLowerCase() === 'get') {\n                numOps++;\n            }\n        }\n    }\n    return numOps;\n}\n/**\n * Counts the number of operations that translate to mutations in an OAS.\n */\nexport function countOperationsMutation(oas) {\n    let numOps = 0;\n    for (const path in oas.paths) {\n        for (const method in oas.paths[path]) {\n            if (isOperation(method) && method.toLowerCase() !== 'get') {\n                numOps++;\n            }\n        }\n    }\n    return numOps;\n}\n/**\n * Counts the number of operations with a payload definition in an OAS.\n */\nexport function countOperationsWithPayload(oas) {\n    let numOps = 0;\n    for (const path in oas.paths) {\n        for (const method in oas.paths[path]) {\n            if (isOperation(method) && typeof oas.paths[path][method].requestBody === 'object') {\n                numOps++;\n            }\n        }\n    }\n    return numOps;\n}\n/**\n * Resolves the given reference in the given object.\n */\nexport function resolveRef(ref, oas) {\n    // Break path into individual tokens\n    const parts = ref.split('/');\n    const resolvedObject = resolveRefHelper(oas, parts);\n    if (resolvedObject !== null) {\n        return resolvedObject;\n    }\n    else {\n        throw new Error(`Could not resolve reference '${ref}'`);\n    }\n}\n/**\n * Helper for resolveRef\n *\n * @param parts The path to be resolved, but broken into tokens\n */\nfunction resolveRefHelper(obj, parts) {\n    if (parts.length === 0) {\n        return obj;\n    }\n    const firstElement = parts.splice(0, 1)[0];\n    if (firstElement in obj) {\n        return resolveRefHelper(obj[firstElement], parts);\n    }\n    else if (firstElement === '#') {\n        return resolveRefHelper(obj, parts);\n    }\n    else {\n        return null;\n    }\n}\n/**\n * Returns the base URL to use for the given operation.\n */\nexport function getBaseUrl(operation) {\n    // Check for servers:\n    if (!Array.isArray(operation.servers) || operation.servers.length === 0) {\n        throw new Error(`No servers defined for operation '${operation.operationString}'`);\n    }\n    // Check for local servers\n    if (Array.isArray(operation.servers) && operation.servers.length > 0) {\n        const url = buildUrl(operation.servers[0]);\n        if (Array.isArray(operation.servers) && operation.servers.length > 1) {\n            httpLog(`Warning: Randomly selected first server '${url}'`);\n        }\n        return url.replace(/\\/$/, '');\n    }\n    const oas = operation.oas;\n    if (Array.isArray(oas.servers) && oas.servers.length > 0) {\n        const url = buildUrl(oas.servers[0]);\n        if (Array.isArray(oas.servers) && oas.servers.length > 1) {\n            httpLog(`Warning: Randomly selected first server '${url}'`);\n        }\n        return url.replace(/\\/$/, '');\n    }\n    throw new Error('Cannot find a server to call');\n}\n/**\n * Returns the default URL for a given OAS server object.\n */\nfunction buildUrl(server) {\n    let url = server.url;\n    // Replace with variable defaults, if applicable\n    if (typeof server.variables === 'object' && Object.keys(server.variables).length > 0) {\n        for (const variableKey in server.variables) {\n            // TODO: check for default? Would be invalid OAS\n            url = url.replace(`{${variableKey}}`, server.variables[variableKey].default.toString());\n        }\n    }\n    return url;\n}\n/**\n * Returns object/array/scalar where all object keys (if applicable) are\n * sanitized.\n */\nexport function sanitizeObjectKeys(obj, // obj does not necessarily need to be an object\ncaseStyle = CaseStyle.camelCase) {\n    const cleanKeys = (obj) => {\n        // Case: no (response) data\n        if (obj === null || typeof obj === 'undefined') {\n            return null;\n            // Case: array\n        }\n        else if (Array.isArray(obj)) {\n            return obj.map(cleanKeys);\n            // Case: object\n        }\n        else if (typeof obj === 'object') {\n            const res = {};\n            for (const key in obj) {\n                const saneKey = sanitize(key, caseStyle);\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    res[saneKey] = cleanKeys(obj[key]);\n                }\n            }\n            return res;\n            // Case: scalar\n        }\n        else {\n            return obj;\n        }\n    };\n    return cleanKeys(obj);\n}\n/**\n * Desanitizes keys in given object by replacing them with the keys stored in\n * the given mapping.\n */\nexport function desanitizeObjectKeys(obj, mapping = {}) {\n    const replaceKeys = (obj) => {\n        if (obj === null) {\n            return null;\n        }\n        else if (Array.isArray(obj)) {\n            return obj.map(replaceKeys);\n        }\n        else if (typeof obj === 'object') {\n            const res = {};\n            for (const key in obj) {\n                if (key in mapping) {\n                    const rawKey = mapping[key];\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        res[rawKey] = replaceKeys(obj[key]);\n                    }\n                }\n                else {\n                    res[key] = replaceKeys(obj[key]);\n                }\n            }\n            return res;\n        }\n        else {\n            return obj;\n        }\n    };\n    return replaceKeys(obj);\n}\n/**\n * Replaces the path parameter in the given path with values in the given args.\n * Furthermore adds the query parameters for a request.\n */\nexport function instantiatePathAndGetQuery(path, parameters, args, // NOTE: argument keys are sanitized!\ndata) {\n    const query = {};\n    const headers = {};\n    // Case: nothing to do\n    if (Array.isArray(parameters)) {\n        // Iterate parameters:\n        for (const param of parameters) {\n            const sanitizedParamName = sanitize(param.name, !data.options.simpleNames ? CaseStyle.camelCase : CaseStyle.simple);\n            if (sanitizedParamName && sanitizedParamName in args) {\n                switch (param.in) {\n                    // Path parameters\n                    case 'path':\n                        path = path.replace(`{${param.name}}`, args[sanitizedParamName]);\n                        break;\n                    // Query parameters\n                    case 'query':\n                        query[param.name] = args[sanitizedParamName];\n                        break;\n                    // Header parameters\n                    case 'header':\n                        headers[param.name] = args[sanitizedParamName];\n                        break;\n                    // Cookie parameters\n                    case 'cookie':\n                        if (!('cookie' in headers)) {\n                            headers.cookie = '';\n                        }\n                        headers.cookie += `${param.name}=${args[sanitizedParamName]}; `;\n                        break;\n                    default:\n                        httpLog(`Warning: The parameter location '${param.in}' in the ` +\n                            `parameter '${param.name}' of operation '${path}' is not ` +\n                            `supported`);\n                }\n            }\n            else {\n                httpLog(`Warning: The parameter '${param.name}' of operation '${path}' ` + `could not be found`);\n            }\n        }\n    }\n    return { path, query, headers };\n}\n/**\n * Returns the GraphQL type that the provided schema should be made into\n *\n * Does not consider allOf, anyOf, oneOf, or not (handled separately)\n */\nexport function getSchemaTargetGraphQLType(schema, data) {\n    // CASE: object\n    if (schema.type === 'object' || typeof schema.properties === 'object') {\n        // TODO: additionalProperties is more like a flag than a type itself\n        // CASE: arbitrary JSON\n        if (typeof schema.additionalProperties === 'object') {\n            return 'json';\n        }\n        else {\n            return 'object';\n        }\n    }\n    // CASE: array\n    if (schema.type === 'array' || 'items' in schema) {\n        return 'list';\n    }\n    // CASE: enum\n    if (Array.isArray(schema.enum)) {\n        return 'enum';\n    }\n    // CASE: a type is present\n    if (typeof schema.type === 'string') {\n        // Special edge cases involving the schema format\n        if (typeof schema.format === 'string') {\n            /**\n             * CASE: 64 bit int - return number instead of integer, leading to use of\n             * GraphQLFloat, which can support 64 bits:\n             */\n            if (schema.type === 'integer' && schema.format === 'int64') {\n                return 'number';\n                // CASE: id\n            }\n            else if (schema.type === 'string' &&\n                (schema.format === 'uuid' ||\n                    // Custom ID format\n                    (Array.isArray(data.options.idFormats) && data.options.idFormats.includes(schema.format)))) {\n                return 'id';\n            }\n        }\n        return schema.type;\n    }\n    return null;\n}\n/**\n * Identifies common path components in the given list of paths. Returns these\n * components as well as an updated list of paths where the common prefix was\n * removed.\n */\nexport function extractBasePath(paths) {\n    if (paths.length <= 1) {\n        return {\n            basePath: '/',\n            updatedPaths: paths,\n        };\n    }\n    let basePathComponents = paths[0].split('/');\n    for (const path of paths) {\n        if (basePathComponents.length === 0) {\n            break;\n        }\n        const pathComponents = path.split('/');\n        for (let i = 0; i < pathComponents.length; i++) {\n            if (i < basePathComponents.length) {\n                if (pathComponents[i] !== basePathComponents[i]) {\n                    basePathComponents = basePathComponents.slice(0, i);\n                }\n            }\n            else {\n                break;\n            }\n        }\n    }\n    const updatedPaths = paths.map(path => path.split('/').slice(basePathComponents.length).join('/'));\n    const basePath = basePathComponents.length === 0 || (basePathComponents.length === 1 && basePathComponents[0] === '')\n        ? '/'\n        : basePathComponents.join('/');\n    return {\n        basePath,\n        updatedPaths,\n    };\n}\nfunction isIdParam(part) {\n    return /^{.*(id|name|key).*}$/gi.test(part);\n}\nfunction isSingularParam(part, nextPart) {\n    // eslint-disable-next-line no-useless-escape\n    return `\\{${pluralize.singular(part)}\\}` === nextPart;\n}\n/**\n * Infers a resource name from the given URL path.\n *\n * For example, turns \"/users/{userId}/car\" into \"userCar\".\n */\nexport function inferResourceNameFromPath(path) {\n    const parts = path.split('/');\n    const pathNoPathParams = parts.reduce((path, part, i) => {\n        if (!/{/g.test(part)) {\n            if (parts[i + 1] && (isIdParam(parts[i + 1]) || isSingularParam(part, parts[i + 1]))) {\n                return path + capitalize(pluralize.singular(part));\n            }\n            else {\n                return path + capitalize(part);\n            }\n        }\n        else {\n            return path;\n        }\n    }, '');\n    return pathNoPathParams;\n}\n/**\n * Returns JSON-compatible schema required by the given endpoint - or null if it\n * does not exist.\n */\nexport function getRequestBodyObject(endpoint, oas) {\n    if (typeof endpoint.requestBody === 'object') {\n        let requestBodyObject = endpoint.requestBody;\n        // Make sure we have a RequestBodyObject:\n        if (typeof requestBodyObject.$ref === 'string') {\n            requestBodyObject = resolveRef(requestBodyObject.$ref, oas);\n        }\n        else {\n            requestBodyObject = requestBodyObject;\n        }\n        if (typeof requestBodyObject.content === 'object') {\n            const content = requestBodyObject.content;\n            // Prioritize content-type JSON\n            if (Object.keys(content).includes('application/json')) {\n                return {\n                    payloadContentType: 'application/json',\n                    requestBodyObject,\n                };\n            }\n            else if (Object.keys(content).includes('application/x-www-form-urlencoded')) {\n                return {\n                    payloadContentType: 'application/x-www-form-urlencoded',\n                    requestBodyObject,\n                };\n            }\n            else {\n                // Pick first (random) content type\n                const randomContentType = Object.keys(content)[0].toString();\n                return {\n                    payloadContentType: randomContentType,\n                    requestBodyObject,\n                };\n            }\n        }\n    }\n    return { payloadContentType: null, requestBodyObject: null };\n}\n/**\n * Returns the request schema (if any) for an endpoint at given path and method,\n * a dictionary of names from different sources (if available), and whether the\n * request schema is required for the endpoint.\n */\nexport function getRequestSchemaAndNames(path, method, oas) {\n    const endpoint = oas.paths[path][method];\n    const { payloadContentType, requestBodyObject } = getRequestBodyObject(endpoint, oas);\n    if (payloadContentType) {\n        let payloadSchema = requestBodyObject.content[payloadContentType].schema;\n        // Get resource name from different sources\n        let fromRef;\n        if ('$ref' in payloadSchema) {\n            fromRef = payloadSchema.$ref.split('/').pop();\n            payloadSchema = resolveRef(payloadSchema.$ref, oas);\n        }\n        let payloadSchemaNames = {\n            fromRef,\n            fromSchema: payloadSchema.title,\n            fromPath: inferResourceNameFromPath(path),\n        };\n        // Determine if request body is required:\n        const payloadRequired = typeof requestBodyObject.required === 'boolean' ? requestBodyObject.required : false;\n        /**\n         * Edge case: if request body content-type is not application/json or\n         * application/x-www-form-urlencoded, do not parse it.\n         *\n         * Instead, treat the request body as a black box and send it as a string\n         * with the proper content-type header\n         */\n        if (payloadContentType !== 'application/json' && payloadContentType !== 'application/x-www-form-urlencoded') {\n            const saneContentTypeName = uncapitalize(payloadContentType.split('/').reduce((name, term) => {\n                return name + capitalize(term);\n            }));\n            payloadSchemaNames = {\n                fromPath: saneContentTypeName,\n            };\n            let description = `String represents payload of content type '${payloadContentType}'`;\n            if ('description' in payloadSchema && typeof payloadSchema.description === 'string') {\n                description += `\\n\\nOriginal top level description: '${payloadSchema.description}'`;\n            }\n            payloadSchema = {\n                description: description,\n                type: 'string',\n            };\n        }\n        return {\n            payloadContentType,\n            payloadSchema,\n            payloadSchemaNames,\n            payloadRequired,\n        };\n    }\n    return {\n        payloadRequired: false,\n    };\n}\n/**\n * Returns JSON-compatible schema produced by the given endpoint - or null if it\n * does not exist.\n */\nexport function getResponseObject(endpoint, statusCode, oas) {\n    if (typeof endpoint.responses === 'object') {\n        const responses = endpoint.responses;\n        if (typeof responses[statusCode] === 'object') {\n            let responseObject = responses[statusCode];\n            // Make sure we have a ResponseObject:\n            if (typeof responseObject.$ref === 'string') {\n                responseObject = resolveRef(responseObject.$ref, oas);\n            }\n            else {\n                responseObject = responseObject;\n            }\n            if (responseObject.content && typeof responseObject.content !== 'undefined') {\n                const content = responseObject.content;\n                // Prioritize content-type JSON\n                if (Object.keys(content).includes('application/json')) {\n                    return {\n                        responseContentType: 'application/json',\n                        responseObject,\n                    };\n                }\n                else {\n                    // Pick first (random) content type\n                    const randomContentType = Object.keys(content)[0].toString();\n                    return {\n                        responseContentType: randomContentType,\n                        responseObject,\n                    };\n                }\n            }\n        }\n    }\n    return { responseContentType: null, responseObject: null };\n}\n/**\n * Returns the response schema for endpoint at given path and method and with\n * the given status code, and a dictionary of names from different sources (if\n * available).\n */\nexport function getResponseSchemaAndNames(path, method, oas, data, options) {\n    const endpoint = oas.paths[path][method];\n    const statusCode = getResponseStatusCode(path, method, oas, data);\n    if (!statusCode) {\n        return {};\n    }\n    const { responseContentType, responseObject } = getResponseObject(endpoint, statusCode, oas);\n    if (responseContentType) {\n        let responseSchema = responseObject.content[responseContentType].schema;\n        let fromRef;\n        if ('$ref' in responseSchema) {\n            fromRef = responseSchema.$ref.split('/').pop();\n            responseSchema = resolveRef(responseSchema.$ref, oas);\n        }\n        const responseSchemaNames = {\n            fromRef,\n            fromSchema: responseSchema.title,\n            fromPath: inferResourceNameFromPath(path),\n        };\n        /**\n         * Edge case: if response body content-type is not application/json, do not\n         * parse.\n         */\n        if (responseContentType !== 'application/json') {\n            let description = 'Placeholder to access non-application/json response bodies';\n            if ('description' in responseSchema && typeof responseSchema.description === 'string') {\n                description += `\\n\\nOriginal top level description: '${responseSchema.description}'`;\n            }\n            responseSchema = {\n                description: description,\n                type: 'string',\n            };\n        }\n        return {\n            responseContentType,\n            responseSchema,\n            responseSchemaNames,\n            statusCode,\n        };\n    }\n    else {\n        /**\n         * GraphQL requires that objects must have some properties.\n         *\n         * To allow some operations (such as those with a 204 HTTP code) to be\n         * included in the GraphQL interface, we added the fillEmptyResponses\n         * option, which will simply create a placeholder to allow access.\n         */\n        if (options.fillEmptyResponses) {\n            return {\n                responseSchemaNames: {\n                    fromPath: inferResourceNameFromPath(path),\n                },\n                responseContentType: 'application/json',\n                responseSchema: {\n                    description: 'Placeholder to support operations with no response schema',\n                    type: 'string',\n                },\n            };\n        }\n        return {};\n    }\n}\n/**\n * Returns the success status code for the operation at the given path and\n * method (or null).\n */\nexport function getResponseStatusCode(path, method, oas, data) {\n    const endpoint = oas.paths[path][method];\n    if (typeof endpoint.responses === 'object') {\n        const codes = Object.keys(endpoint.responses);\n        const successCodes = codes.filter(code => {\n            return SUCCESS_STATUS_RX.test(code) || code === 'default';\n        });\n        if (successCodes.length === 1) {\n            return successCodes[0];\n        }\n        else if (successCodes.length > 1) {\n            handleWarning({\n                typeKey: 'MULTIPLE_RESPONSES',\n                message: `Operation '${formatOperationString(method, path, oas.info.title)}' ` +\n                    `contains multiple possible successful response object ` +\n                    `(HTTP code 200-299 or 2XX). Only one can be chosen.`,\n                mitigationAddendum: `The response object with the HTTP code ` + `${successCodes[0]} will be selected`,\n                data,\n                log: translationLog,\n            });\n            return successCodes[0];\n        }\n    }\n    return null;\n}\n/**\n * Returns an hash containing the links defined in the given endpoint.\n */\nexport function getEndpointLinks(path, method, oas, data) {\n    const links = {};\n    const endpoint = oas.paths[path][method];\n    const statusCode = getResponseStatusCode(path, method, oas, data);\n    if (!statusCode) {\n        return links;\n    }\n    if (typeof endpoint.responses === 'object') {\n        const responses = endpoint.responses;\n        if (typeof responses[statusCode] === 'object') {\n            let response = responses[statusCode];\n            if (typeof response.$ref === 'string') {\n                response = resolveRef(response.$ref, oas);\n            }\n            // Here, we can be certain we have a ResponseObject:\n            response = response;\n            if (typeof response.links === 'object') {\n                const epLinks = response.links;\n                for (const linkKey in epLinks) {\n                    let link = epLinks[linkKey];\n                    // Make sure we have LinkObjects:\n                    if (typeof link.$ref === 'string') {\n                        link = resolveRef(link.$ref, oas);\n                    }\n                    else {\n                        link = link;\n                    }\n                    links[linkKey] = link;\n                }\n            }\n        }\n    }\n    return links;\n}\n/**\n * Returns the list of parameters for the endpoint at the given method and path.\n * Resolves possible references.\n */\nexport function getParameters(path, method, oas) {\n    let parameters = [];\n    if (!isOperation(method)) {\n        translationLog(`Warning: attempted to get parameters for ${method} ${path}, ` + `which is not an operation.`);\n        return parameters;\n    }\n    const pathItemObject = oas.paths[path];\n    const pathParams = pathItemObject.parameters;\n    // First, consider parameters in Path Item Object:\n    if (Array.isArray(pathParams)) {\n        const pathItemParameters = pathParams.map(p => {\n            if (typeof p.$ref === 'string') {\n                // Here we know we have a parameter object:\n                return resolveRef(p.$ref, oas);\n            }\n            else {\n                // Here we know we have a parameter object:\n                return p;\n            }\n        });\n        parameters = parameters.concat(pathItemParameters);\n    }\n    // Second, consider parameters in Operation Object:\n    const opObject = oas.paths[path][method];\n    const opObjectParameters = opObject.parameters;\n    if (Array.isArray(opObjectParameters)) {\n        const opParameters = opObjectParameters.map(p => {\n            if (typeof p.$ref === 'string') {\n                // Here we know we have a parameter object:\n                return resolveRef(p.$ref, oas);\n            }\n            else {\n                // Here we know we have a parameter object:\n                return p;\n            }\n        });\n        parameters = parameters.concat(opParameters);\n    }\n    return parameters;\n}\n/**\n * Returns an array of server objects for the opeartion at the given path and\n * method. Considers in the following order: global server definitions,\n * definitions at the path item, definitions at the operation, or the OAS\n * default.\n */\nexport function getServers(path, method, oas) {\n    let servers = [];\n    // Global server definitions:\n    if (Array.isArray(oas.servers) && oas.servers.length > 0) {\n        servers = oas.servers;\n    }\n    // Path item server definitions override global:\n    const pathItem = oas.paths[path];\n    if (Array.isArray(pathItem.servers) && pathItem.servers.length > 0) {\n        servers = pathItem.servers;\n    }\n    // Operation server definitions override path item:\n    const operationObj = pathItem[method];\n    if (Array.isArray(operationObj.servers) && operationObj.servers.length > 0) {\n        servers = operationObj.servers;\n    }\n    // Default, in case there is no server:\n    if (servers.length === 0) {\n        const server = {\n            url: '/',\n        };\n        servers.push(server);\n    }\n    return servers;\n}\n/**\n * Returns a map of Security Scheme definitions, identified by keys. Resolves\n * possible references.\n */\nexport function getSecuritySchemes(oas) {\n    // Collect all security schemes:\n    const securitySchemes = {};\n    if (typeof oas.components === 'object' && typeof oas.components.securitySchemes === 'object') {\n        for (const schemeKey in oas.components.securitySchemes) {\n            const obj = oas.components.securitySchemes[schemeKey];\n            // Ensure we have actual SecuritySchemeObject:\n            if (typeof obj.$ref === 'string') {\n                // Result of resolution will be SecuritySchemeObject:\n                securitySchemes[schemeKey] = resolveRef(obj.$ref, oas);\n            }\n            else {\n                // We already have a SecuritySchemeObject:\n                securitySchemes[schemeKey] = obj;\n            }\n        }\n    }\n    return securitySchemes;\n}\n/**\n * Returns the list of sanitized keys of non-OAuth2 security schemes\n * required by the operation at the given path and method.\n */\nexport function getSecurityRequirements(path, method, securitySchemes, oas) {\n    const results = [];\n    // First, consider global requirements:\n    const globalSecurity = oas.security;\n    if (globalSecurity && typeof globalSecurity !== 'undefined') {\n        for (const secReq of globalSecurity) {\n            for (const schemaKey in secReq) {\n                if (securitySchemes[schemaKey] &&\n                    typeof securitySchemes[schemaKey] === 'object' &&\n                    securitySchemes[schemaKey].def.type !== 'oauth2') {\n                    results.push(schemaKey);\n                }\n            }\n        }\n    }\n    // Local:\n    const operation = oas.paths[path][method];\n    const localSecurity = operation.security;\n    if (localSecurity && typeof localSecurity !== 'undefined') {\n        for (const secReq of localSecurity) {\n            for (const schemaKey in secReq) {\n                if (securitySchemes[schemaKey] &&\n                    typeof securitySchemes[schemaKey] === 'object' &&\n                    securitySchemes[schemaKey].def.type !== 'oauth2') {\n                    if (!results.includes(schemaKey)) {\n                        results.push(schemaKey);\n                    }\n                }\n            }\n        }\n    }\n    return results;\n}\nexport var CaseStyle;\n(function (CaseStyle) {\n    CaseStyle[CaseStyle[\"simple\"] = 0] = \"simple\";\n    CaseStyle[CaseStyle[\"PascalCase\"] = 1] = \"PascalCase\";\n    CaseStyle[CaseStyle[\"camelCase\"] = 2] = \"camelCase\";\n    CaseStyle[CaseStyle[\"ALL_CAPS\"] = 3] = \"ALL_CAPS\";\n})(CaseStyle || (CaseStyle = {}));\n/**\n * First sanitizes given string and then also camel-cases it.\n */\nexport function sanitize(str, caseStyle) {\n    /**\n     * Used in conjunction to simpleNames, which only removes illegal\n     * characters and preserves casing\n     */\n    if (caseStyle === CaseStyle.simple) {\n        return str.replace(/[^a-zA-Z0-9_]/gi, '');\n    }\n    /**\n     * Remove all GraphQL unsafe characters\n     */\n    const regex = caseStyle === CaseStyle.ALL_CAPS\n        ? /[^a-zA-Z0-9_]/g // ALL_CAPS has underscores\n        : /[^a-zA-Z0-9]/g;\n    let sanitized = str.split(regex).reduce((path, part) => {\n        if (caseStyle === CaseStyle.ALL_CAPS) {\n            return path + '_' + part;\n        }\n        else {\n            return path + capitalize(part);\n        }\n    });\n    switch (caseStyle) {\n        case CaseStyle.PascalCase:\n            // The first character in PascalCase should be uppercase\n            sanitized = capitalize(sanitized);\n            break;\n        case CaseStyle.camelCase:\n            // The first character in camelCase should be lowercase\n            sanitized = uncapitalize(sanitized);\n            break;\n        case CaseStyle.ALL_CAPS:\n            sanitized = sanitized.toUpperCase();\n            break;\n    }\n    // Special case: we cannot start with number, and cannot be empty:\n    if (/^[0-9]/.test(sanitized) || sanitized === '') {\n        sanitized = '_' + sanitized;\n    }\n    return sanitized;\n}\n/**\n * Sanitizes the given string and stores the sanitized-to-original mapping in\n * the given mapping.\n */\nexport function storeSaneName(saneStr, str, mapping) {\n    if (saneStr in mapping && str !== mapping[saneStr]) {\n        // TODO: Follow warning model\n        translationLog(`Warning: '${str}' and '${mapping[saneStr]}' both sanitize ` +\n            `to '${saneStr}' - collision possible. Desanitize to '${str}'.`);\n    }\n    mapping[saneStr] = str;\n    return saneStr;\n}\n/**\n * Stringifies and possibly trims the given string to the provided length.\n */\nexport function trim(str, length) {\n    if (typeof str !== 'string') {\n        str = JSON.stringify(str);\n    }\n    if (str && str.length > length) {\n        str = `${str.substring(0, length)}...`;\n    }\n    return str;\n}\n/**\n * Determines if the given \"method\" is indeed an operation. Alternatively, the\n * method could point to other types of information (e.g., parameters, servers).\n */\nexport function isOperation(method) {\n    return OAS_OPERATIONS.includes(method.toLowerCase());\n}\n/**\n * Formats a string that describes an operation in the form:\n * {name of OAS} {HTTP method in ALL_CAPS} {operation path}\n *\n * Also used in preprocessing.ts where Operation objects are being constructed\n */\nexport function formatOperationString(method, path, title) {\n    if (title) {\n        return `${title} ${method.toUpperCase()} ${path}`;\n    }\n    else {\n        return `${method.toUpperCase()} ${path}`;\n    }\n}\n/**\n * Capitalizes a given string\n */\nexport function capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n/**\n * Uncapitalizes a given string\n */\nexport function uncapitalize(str) {\n    return str.charAt(0).toLowerCase() + str.slice(1);\n}\n/**\n * For operations that do not have an operationId, generate one\n */\nexport function generateOperationId(method, path) {\n    return sanitize(`${method} ${path}`, CaseStyle.camelCase);\n}\n//# sourceMappingURL=oas_3_tools.js.map","/* eslint-disable no-case-declarations */\n/* eslint-disable camelcase */\n// Copyright IBM Corp. 2018. All Rights Reserved.\n// Node module: openapi-to-graphql\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n// Imports:\nimport * as Oas3Tools from './oas_3_tools';\nimport * as JSONPath from 'jsonpath-plus';\nimport { debug } from 'debug';\nimport { GraphQLError } from 'graphql';\nimport formurlencoded from 'form-urlencoded';\nimport urlJoin from 'url-join';\nconst translationLog = debug('translation');\nconst httpLog = debug('http');\nfunction headersToObject(headers) {\n    const headersObj = {};\n    headers.forEach((value, key) => {\n        headersObj[key] = value;\n    });\n    return headersObj;\n}\n/**\n * Creates and returns a resolver function that performs API requests for the\n * given GraphQL query\n */\nexport function getResolver(getResolverParams) {\n    let { operation, argsFromLink = {}, payloadName, data, baseUrl, requestOptions } = getResolverParams();\n    // Determine the appropriate URL:\n    if (typeof baseUrl === 'undefined') {\n        baseUrl = Oas3Tools.getBaseUrl(operation);\n    }\n    // Return custom resolver if it is defined\n    const customResolvers = data.options.customResolvers;\n    const title = operation.oas.info.title;\n    const path = operation.path;\n    const method = operation.method;\n    if (typeof customResolvers === 'object' &&\n        typeof customResolvers[title] === 'object' &&\n        typeof customResolvers[title][path] === 'object' &&\n        typeof customResolvers[title][path][method] === 'function') {\n        translationLog(`Use custom resolver for ${operation.operationString}`);\n        return customResolvers[title][path][method];\n    }\n    // Return resolve function:\n    return async (root, args, ctx, info = {}) => {\n        /**\n         * Retch resolveData from possibly existing _openAPIToGraphQL\n         *\n         * NOTE: _openAPIToGraphQL is an object used to pass security info and data\n         * from previous resolvers\n         */\n        let resolveData = {};\n        if (root &&\n            typeof root === 'object' &&\n            typeof root._openAPIToGraphQL === 'object' &&\n            typeof root._openAPIToGraphQL.data === 'object') {\n            const parentIdentifier = getParentIdentifier(info);\n            if (!(parentIdentifier.length === 0) && parentIdentifier in root._openAPIToGraphQL.data) {\n                /**\n                 * Resolving link params may change the usedParams, but these changes\n                 * should not be present in the parent _openAPIToGraphQL, therefore copy\n                 * the object\n                 */\n                resolveData = JSON.parse(JSON.stringify(root._openAPIToGraphQL.data[parentIdentifier]));\n            }\n        }\n        if (typeof resolveData.usedParams === 'undefined') {\n            resolveData.usedParams = {};\n        }\n        /**\n         * Handle default values of parameters, if they have not yet been defined by\n         * the user.\n         */\n        operation.parameters.forEach(param => {\n            const paramName = Oas3Tools.sanitize(param.name, !data.options.simpleNames ? Oas3Tools.CaseStyle.camelCase : Oas3Tools.CaseStyle.simple);\n            if (typeof args[paramName] === 'undefined' && param.schema && typeof param.schema === 'object') {\n                let schema = param.schema;\n                if (schema && schema.$ref && typeof schema.$ref === 'string') {\n                    schema = Oas3Tools.resolveRef(schema.$ref, operation.oas);\n                }\n                if (schema && schema.default && typeof schema.default !== 'undefined') {\n                    args[paramName] = schema.default;\n                }\n            }\n        });\n        // Handle arguments provided by links\n        for (const paramName in argsFromLink) {\n            const saneParamName = Oas3Tools.sanitize(paramName, !data.options.simpleNames ? Oas3Tools.CaseStyle.camelCase : Oas3Tools.CaseStyle.simple);\n            let value = argsFromLink[paramName];\n            /**\n             * see if the link parameter contains constants that are appended to the link parameter\n             *\n             * e.g. instead of:\n             * $response.body#/employerId\n             *\n             * it could be:\n             * abc_{$response.body#/employerId}\n             */\n            if (value.search(/{|}/) === -1) {\n                args[saneParamName] = isRuntimeExpression(value)\n                    ? resolveLinkParameter(paramName, value, resolveData, root, args)\n                    : value;\n            }\n            else {\n                // Replace link parameters with appropriate values\n                const linkParams = value.match(/{([^}]*)}/g);\n                linkParams.forEach(linkParam => {\n                    value = value.replace(linkParam, resolveLinkParameter(paramName, linkParam.substring(1, linkParam.length - 1), resolveData, root, args));\n                });\n                args[saneParamName] = value;\n            }\n        }\n        // Stored used parameters to future requests:\n        resolveData.usedParams = Object.assign(resolveData.usedParams, args);\n        // Build URL (i.e., fill in path parameters):\n        const { path, query, headers } = Oas3Tools.instantiatePathAndGetQuery(operation.path, operation.parameters, args, data);\n        const urlObject = new URL(urlJoin(baseUrl, path));\n        /**\n         * The Content-type and accept property should not be changed because the\n         * object type has already been created and unlike these properties, it\n         * cannot be easily changed\n         *\n         * NOTE: This may cause the user to encounter unexpected changes\n         */\n        headers['content-type'] =\n            typeof operation.payloadContentType !== 'undefined' ? operation.payloadContentType : 'application/json';\n        headers.accept =\n            typeof operation.responseContentType !== 'undefined' ? operation.responseContentType : 'application/json';\n        let options;\n        if (requestOptions) {\n            options = { ...requestOptions };\n            options.method = operation.method;\n            if (options.headers) {\n                Object.assign(options.headers, headers);\n            }\n            else {\n                options.headers = headers;\n            }\n        }\n        else {\n            options = {\n                method: operation.method,\n                headers: headers,\n            };\n        }\n        for (const paramName in query) {\n            const val = query[paramName];\n            urlObject.searchParams.set(paramName, val);\n        }\n        /**\n         * Determine possible payload\n         *\n         * GraphQL produces sanitized payload names, so we have to sanitize before\n         * lookup here\n         */\n        resolveData.usedPayload = undefined;\n        if (typeof payloadName === 'string') {\n            // The option genericPayloadArgName will change the payload name to \"requestBody\"\n            const sanePayloadName = data.options.genericPayloadArgName\n                ? 'requestBody'\n                : Oas3Tools.sanitize(payloadName, Oas3Tools.CaseStyle.camelCase);\n            let rawPayload;\n            if (operation.payloadContentType === 'application/json') {\n                rawPayload = JSON.stringify(Oas3Tools.desanitizeObjectKeys(args[sanePayloadName], data.saneMap));\n            }\n            else if (operation.payloadContentType === 'application/x-www-form-urlencoded') {\n                rawPayload = formurlencoded(Oas3Tools.desanitizeObjectKeys(args[sanePayloadName], data.saneMap));\n            }\n            else {\n                // Payload is not an object\n                rawPayload = args[sanePayloadName];\n            }\n            options.body = rawPayload;\n            resolveData.usedPayload = rawPayload;\n        }\n        /**\n         * Pass on OpenAPI-to-GraphQL options\n         */\n        if (typeof data.options === 'object') {\n            // Headers:\n            if (typeof data.options.headers === 'object') {\n                for (const header in data.options.headers) {\n                    const val = data.options.headers[header];\n                    options.headers[header] = val;\n                }\n            }\n            // Query string:\n            if (typeof data.options.qs === 'object') {\n                for (const query in data.options.qs) {\n                    const val = data.options.qs[query];\n                    urlObject.searchParams.set(query, val);\n                }\n            }\n        }\n        // Get authentication headers and query parameters\n        if (root && typeof root === 'object' && typeof root._openAPIToGraphQL === 'object') {\n            const { authHeaders, authQs, authCookie } = getAuthOptions(operation, root._openAPIToGraphQL, data);\n            // ...and pass them to the options\n            Object.assign(options.headers, authHeaders);\n            for (const query in authQs) {\n                const val = authQs[query];\n                urlObject.searchParams.set(query, val);\n            }\n            // Add authentication cookie if created\n            if (authCookie !== null) {\n                Object.assign(options.headers, {\n                    cookie: authCookie,\n                });\n            }\n        }\n        // Extract OAuth token from context (if available)\n        if (data.options.sendOAuthTokenInQuery) {\n            const oauthQueryObj = createOAuthQS(data, ctx);\n            for (const query in oauthQueryObj) {\n                const val = oauthQueryObj[query];\n                urlObject.searchParams.set(query, val);\n            }\n        }\n        else {\n            const oauthHeader = createOAuthHeader(data, ctx);\n            Object.assign(options.headers, oauthHeader);\n        }\n        const urlWithoutQuery = urlObject.href.replace(urlObject.search, '');\n        resolveData.url = urlWithoutQuery;\n        resolveData.usedRequestOptions = options;\n        resolveData.usedStatusCode = operation.statusCode;\n        // Make the call\n        httpLog(`Call ${options.method.toUpperCase()} ${urlWithoutQuery}?${urlObject.search}\\n` +\n            `headers: ${JSON.stringify(options.headers)}\\n` +\n            `request body: ${options.body}`);\n        let response;\n        try {\n            response = await data.options.fetch(urlObject.href, options);\n        }\n        catch (err) {\n            httpLog(err);\n            throw err;\n        }\n        const body = await response.text();\n        if (response.status < 200 || response.status > 299) {\n            httpLog(`${response.status} - ${Oas3Tools.trim(body, 100)}`);\n            const errorString = `Could not invoke operation ${operation.operationString}`;\n            if (data.options.provideErrorExtensions) {\n                let responseBody;\n                try {\n                    responseBody = JSON.parse(body);\n                }\n                catch (e) {\n                    responseBody = body;\n                }\n                const extensions = {\n                    method: operation.method,\n                    path: operation.path,\n                    statusCode: response.status,\n                    responseHeaders: headersToObject(response.headers),\n                    responseBody,\n                };\n                throw graphQLErrorWithExtensions(errorString, extensions);\n            }\n            else {\n                throw new Error(errorString);\n            }\n            // Successful response 200-299\n        }\n        else {\n            httpLog(`${response.status} - ${Oas3Tools.trim(body, 100)}`);\n            if (response.headers.get('content-type')) {\n                /**\n                 * If the response body is type JSON, then parse it\n                 *\n                 * content-type may not be necessarily 'application/json' it can be\n                 * 'application/json; charset=utf-8' for example\n                 */\n                if (response.headers.get('content-type').includes('json')) {\n                    let responseBody;\n                    try {\n                        responseBody = JSON.parse(body);\n                    }\n                    catch (e) {\n                        const errorString = `Cannot JSON parse response body of ` +\n                            `operation ${operation.operationString} ` +\n                            `even though it has content-type '${response.headers.get('content-type')}'`;\n                        httpLog(errorString);\n                        throw errorString;\n                    }\n                    resolveData.responseHeaders = headersToObject(response.headers);\n                    // Deal with the fact that the server might send unsanitized data\n                    let saneData = Oas3Tools.sanitizeObjectKeys(responseBody, !data.options.simpleNames ? Oas3Tools.CaseStyle.camelCase : Oas3Tools.CaseStyle.simple);\n                    // Pass on _openAPIToGraphQL to subsequent resolvers\n                    if (saneData && typeof saneData === 'object') {\n                        if (Array.isArray(saneData)) {\n                            saneData.forEach(element => {\n                                if (typeof element._openAPIToGraphQL === 'undefined') {\n                                    element._openAPIToGraphQL = {\n                                        data: {},\n                                    };\n                                }\n                                if (root && typeof root === 'object' && typeof root._openAPIToGraphQL === 'object') {\n                                    Object.assign(element._openAPIToGraphQL, root._openAPIToGraphQL);\n                                }\n                                element._openAPIToGraphQL.data[getIdentifier(info)] = resolveData;\n                            });\n                        }\n                        else {\n                            if (typeof saneData._openAPIToGraphQL === 'undefined') {\n                                saneData._openAPIToGraphQL = {\n                                    data: {},\n                                };\n                            }\n                            if (root && typeof root === 'object' && typeof root._openAPIToGraphQL === 'object') {\n                                Object.assign(saneData._openAPIToGraphQL, root._openAPIToGraphQL);\n                            }\n                            saneData._openAPIToGraphQL.data[getIdentifier(info)] = resolveData;\n                        }\n                    }\n                    // Apply limit argument\n                    if (data.options.addLimitArgument &&\n                        /**\n                         * NOTE: Does not differentiate between autogenerated args and\n                         * preexisting args\n                         *\n                         * Ensure that there is not preexisting 'limit' argument\n                         */\n                        !operation.parameters.find(parameter => {\n                            return parameter.name === 'limit';\n                        }) &&\n                        // Only array data\n                        Array.isArray(saneData) &&\n                        // Only array of objects/arrays\n                        saneData.some(data => {\n                            return typeof data === 'object';\n                        })) {\n                        let arraySaneData = saneData;\n                        if ('limit' in args) {\n                            const limit = args.limit;\n                            if (limit >= 0) {\n                                arraySaneData = arraySaneData.slice(0, limit);\n                            }\n                            else {\n                                throw new Error(`Auto-generated 'limit' argument must be greater than or equal to 0`);\n                            }\n                        }\n                        else {\n                            throw new Error(`Cannot get value for auto-generated 'limit' argument`);\n                        }\n                        saneData = arraySaneData;\n                    }\n                    return saneData;\n                }\n                else {\n                    // TODO: Handle YAML\n                    return body;\n                }\n            }\n            else {\n                /**\n                 * Check to see if there is not supposed to be a response body,\n                 * if that is the case, that would explain why there is not\n                 * a content-type\n                 */\n                const { responseContentType } = Oas3Tools.getResponseObject(operation, operation.statusCode, operation.oas);\n                if (responseContentType === null) {\n                    return null;\n                }\n                else {\n                    const errorString = 'Response does not have a Content-Type property';\n                    httpLog(errorString);\n                    throw errorString;\n                }\n            }\n        }\n    };\n}\n/**\n * Attempts to create an object to become an OAuth query string by extracting an\n * OAuth token from the ctx based on the JSON path provided in the options.\n */\nfunction createOAuthQS(data, ctx) {\n    return typeof data.options.tokenJSONpath !== 'string' ? {} : extractToken(data, ctx);\n}\nfunction extractToken(data, ctx) {\n    const tokenJSONpath = data.options.tokenJSONpath;\n    const tokens = JSONPath.JSONPath({ path: tokenJSONpath, json: ctx });\n    if (Array.isArray(tokens) && tokens.length > 0) {\n        const token = tokens[0];\n        return {\n            access_token: token,\n        };\n    }\n    else {\n        httpLog(`Warning: could not extract OAuth token from context at '${tokenJSONpath}'`);\n        return {};\n    }\n}\n/**\n * Attempts to create an OAuth authorization header by extracting an OAuth token\n * from the ctx based on the JSON path provided in the options.\n */\nfunction createOAuthHeader(data, ctx) {\n    if (typeof data.options.tokenJSONpath !== 'string') {\n        return {};\n    }\n    // Extract token\n    const tokenJSONpath = data.options.tokenJSONpath;\n    const tokens = JSONPath.JSONPath({ path: tokenJSONpath, json: ctx });\n    if (Array.isArray(tokens) && tokens.length > 0) {\n        const token = tokens[0];\n        return {\n            Authorization: `Bearer ${token}`,\n            'User-Agent': 'openapi-to-graphql',\n        };\n    }\n    else {\n        httpLog(`Warning: could not extract OAuth token from context at ` + `'${tokenJSONpath}'`);\n        return {};\n    }\n}\n/**\n * Returns the headers and query strings to authenticate a request (if any).\n * Object containing authHeader and authQs object,\n * which hold headers and query parameters respectively to authentication a\n * request.\n */\nfunction getAuthOptions(operation, _openAPIToGraphQL, data) {\n    const authHeaders = {};\n    const authQs = {};\n    let authCookie = null;\n    /**\n     * Determine if authentication is required, and which protocol (if any) we can\n     * use\n     */\n    const { authRequired, sanitizedSecurityRequirement } = getAuthReqAndProtcolName(operation, _openAPIToGraphQL);\n    const securityRequirement = data.saneMap[sanitizedSecurityRequirement];\n    // Possibly, we don't need to do anything:\n    if (!authRequired) {\n        return { authHeaders, authQs, authCookie };\n    }\n    // If authentication is required, but we can't fulfill the protocol, throw:\n    if (authRequired && typeof securityRequirement !== 'string') {\n        throw new Error(`Missing information to authenticate API request.`);\n    }\n    if (typeof securityRequirement === 'string') {\n        const security = data.security[securityRequirement];\n        switch (security.def.type) {\n            case 'apiKey':\n                const apiKey = _openAPIToGraphQL.security[sanitizedSecurityRequirement].apiKey;\n                if ('in' in security.def) {\n                    if (typeof security.def.name === 'string') {\n                        if (security.def.in === 'header') {\n                            authHeaders[security.def.name] = apiKey;\n                        }\n                        else if (security.def.in === 'query') {\n                            authQs[security.def.name] = apiKey;\n                        }\n                        else if (security.def.in === 'cookie') {\n                            authCookie = `${security.def.name}=${apiKey}`;\n                        }\n                    }\n                    else {\n                        throw new Error(`Cannot send API key in '${JSON.stringify(security.def.in)}'`);\n                    }\n                }\n                break;\n            case 'http':\n                switch (security.def.scheme) {\n                    case 'basic':\n                        const username = _openAPIToGraphQL.security[sanitizedSecurityRequirement].username;\n                        const password = _openAPIToGraphQL.security[sanitizedSecurityRequirement].password;\n                        const credentials = `${username}:${password}`;\n                        authHeaders.Authorization = `Basic ${Buffer.from(credentials).toString('base64')}`;\n                        break;\n                    default:\n                        throw new Error(`Cannot recognize http security scheme ` + `'${JSON.stringify(security.def.scheme)}'`);\n                }\n                break;\n            case 'oauth2':\n                break;\n            case 'openIdConnect':\n                break;\n            default:\n                throw new Error(`Cannot recognize security type '${security.def.type}'`);\n        }\n    }\n    return { authHeaders, authQs, authCookie };\n}\n/**\n * Determines whether given operation requires authentication, and which of the\n * (possibly multiple) authentication protocols can be used based on the data\n * present in the given context.\n */\nfunction getAuthReqAndProtcolName(operation, _openAPIToGraphQL) {\n    let authRequired = false;\n    if (Array.isArray(operation.securityRequirements) && operation.securityRequirements.length > 0) {\n        authRequired = true;\n        for (const securityRequirement of operation.securityRequirements) {\n            const sanitizedSecurityRequirement = Oas3Tools.sanitize(securityRequirement, Oas3Tools.CaseStyle.camelCase);\n            if (typeof _openAPIToGraphQL.security[sanitizedSecurityRequirement] === 'object') {\n                return {\n                    authRequired,\n                    sanitizedSecurityRequirement,\n                };\n            }\n        }\n    }\n    return {\n        authRequired,\n    };\n}\n/**\n * Given a link parameter, determine the value\n *\n * The link parameter is a reference to data contained in the\n * url/method/statuscode or response/request body/query/path/header\n */\nfunction resolveLinkParameter(paramName, value, resolveData, root, args) {\n    if (value === '$url') {\n        return resolveData.url;\n    }\n    else if (value === '$method') {\n        return resolveData.usedRequestOptions.method;\n    }\n    else if (value === '$statusCode') {\n        return resolveData.usedStatusCode;\n    }\n    else if (value.startsWith('$request.')) {\n        // CASE: parameter is previous body\n        if (value === '$request.body') {\n            return resolveData.usedPayload;\n            // CASE: parameter in previous body\n        }\n        else if (value.startsWith('$request.body#')) {\n            const tokens = JSONPath.JSONPath({\n                path: value.split('body#/')[1],\n                json: resolveData.usedPayload,\n            });\n            if (Array.isArray(tokens) && tokens.length > 0) {\n                return tokens[0];\n            }\n            else {\n                httpLog(`Warning: could not extract parameter '${paramName}' from link`);\n            }\n            // CASE: parameter in previous query parameter\n        }\n        else if (value.startsWith('$request.query')) {\n            return resolveData.usedParams[Oas3Tools.sanitize(value.split('query.')[1], Oas3Tools.CaseStyle.camelCase)];\n            // CASE: parameter in previous path parameter\n        }\n        else if (value.startsWith('$request.path')) {\n            return resolveData.usedParams[Oas3Tools.sanitize(value.split('path.')[1], Oas3Tools.CaseStyle.camelCase)];\n            // CASE: parameter in previous header parameter\n        }\n        else if (value.startsWith('$request.header')) {\n            return resolveData.usedRequestOptions.headers[value.split('header.')[1]];\n        }\n    }\n    else if (value.startsWith('$response.')) {\n        /**\n         * CASE: parameter is body\n         *\n         * NOTE: may not be used because it implies that the operation does not\n         * return a JSON object and OpenAPI-to-GraphQL does not create GraphQL\n         * objects for non-JSON data and links can only exists between objects.\n         */\n        if (value === '$response.body') {\n            const result = JSON.parse(JSON.stringify(root));\n            /**\n             * _openAPIToGraphQL contains data used by OpenAPI-to-GraphQL to create the GraphQL interface\n             * and should not be exposed\n             */\n            result._openAPIToGraphQL = undefined;\n            return result;\n            // CASE: parameter in body\n        }\n        else if (value.startsWith('$response.body#')) {\n            const tokens = JSONPath.JSONPath({\n                path: value.split('body#/')[1],\n                json: root,\n            });\n            if (Array.isArray(tokens) && tokens.length > 0) {\n                return tokens[0];\n            }\n            else {\n                httpLog(`Warning: could not extract parameter '${paramName}' from link`);\n            }\n            // CASE: parameter in query parameter\n        }\n        else if (value.startsWith('$response.query')) {\n            // NOTE: handled the same way $request.query is handled\n            return resolveData.usedParams[Oas3Tools.sanitize(value.split('query.')[1], Oas3Tools.CaseStyle.camelCase)];\n            // CASE: parameter in path parameter\n        }\n        else if (value.startsWith('$response.path')) {\n            // NOTE: handled the same way $request.path is handled\n            return resolveData.usedParams[Oas3Tools.sanitize(value.split('path.')[1], Oas3Tools.CaseStyle.camelCase)];\n            // CASE: parameter in header parameter\n        }\n        else if (value.startsWith('$response.header')) {\n            return resolveData.responseHeaders[value.split('header.')[1]];\n        }\n    }\n    throw new Error(`Cannot create link because '${value}' is an invalid runtime expression`);\n}\n/**\n * Check if a string is a runtime expression in the context of link parameters\n */\nfunction isRuntimeExpression(str) {\n    const references = ['header.', 'query.', 'path.', 'body'];\n    if (str === '$url' || str === '$method' || str === '$statusCode') {\n        return true;\n    }\n    else if (str.startsWith('$request.')) {\n        for (let i = 0; i < references.length; i++) {\n            if (str.startsWith(`$request.${references[i]}`)) {\n                return true;\n            }\n        }\n    }\n    else if (str.startsWith('$response.')) {\n        for (let i = 0; i < references.length; i++) {\n            if (str.startsWith(`$response.${references[i]}`)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n/**\n * From the info object provided by the resolver, get a unique identifier, which\n * is the path formed from the nested field names (or aliases if provided)\n *\n * Used to store and retrieve the _openAPIToGraphQL of parent field\n */\nfunction getIdentifier(info) {\n    return getIdentifierRecursive(info.path);\n}\n/**\n * From the info object provided by the resolver, get the unique identifier of\n * the parent object\n */\nfunction getParentIdentifier(info) {\n    return getIdentifierRecursive(info.path.prev);\n}\n/**\n * Get the path of nested field names (or aliases if provided)\n */\nfunction getIdentifierRecursive(path) {\n    return typeof path.prev === 'undefined'\n        ? path.key.toString()\n        : /**\n         * Check if the identifier contains array indexing, if so remove.\n         *\n         * i.e. instead of 0/friends/1/friends/2/friends/user, create\n         * friends/friends/friends/user\n         */\n            isNaN(parseInt(path.key.toString()))\n                ? `${path.key}/${getIdentifierRecursive(path.prev)}`\n                : getIdentifierRecursive(path.prev);\n}\n/**\n * Create a new GraphQLError with an extensions field\n */\nfunction graphQLErrorWithExtensions(message, extensions) {\n    return new GraphQLError(message, null, null, null, null, null, extensions);\n}\n//# sourceMappingURL=resolver_builder.js.map","// Copyright IBM Corp. 2018. All Rights Reserved.\n// Node module: openapi-to-graphql\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\nexport var GraphQLOperationType;\n(function (GraphQLOperationType) {\n    GraphQLOperationType[GraphQLOperationType[\"Query\"] = 0] = \"Query\";\n    GraphQLOperationType[GraphQLOperationType[\"Mutation\"] = 1] = \"Mutation\";\n    // TODO: Subscription\n})(GraphQLOperationType || (GraphQLOperationType = {}));\n//# sourceMappingURL=graphql.js.map","// Copyright IBM Corp. 2018. All Rights Reserved.\n// Node module: openapi-to-graphql\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n// Imports:\nimport * as Oas3Tools from './oas_3_tools';\nimport deepEqual from 'deep-equal';\nimport debug from 'debug';\nimport { handleWarning, getCommonPropertyNames } from './utils';\nimport { GraphQLOperationType } from './types/graphql';\nconst preprocessingLog = debug('preprocessing');\n/**\n * Extract information from the OAS and put it inside a data structure that\n * is easier for OpenAPI-to-GraphQL to use\n */\nexport function preprocessOas(oass, options) {\n    const data = {\n        usedTypeNames: [\n            'Query',\n            'Mutation',\n        ],\n        defs: [],\n        operations: {},\n        saneMap: {},\n        security: {},\n        options,\n        oass,\n    };\n    oass.forEach(oas => {\n        // Store stats on OAS:\n        data.options.report.numOps += Oas3Tools.countOperations(oas);\n        data.options.report.numOpsMutation += Oas3Tools.countOperationsMutation(oas);\n        data.options.report.numOpsQuery += Oas3Tools.countOperationsQuery(oas);\n        // Get security schemes\n        const currentSecurity = getProcessedSecuritySchemes(oas, data);\n        const commonSecurityPropertyName = getCommonPropertyNames(data.security, currentSecurity);\n        commonSecurityPropertyName.forEach(propertyName => {\n            handleWarning({\n                typeKey: 'DUPLICATE_SECURITY_SCHEME',\n                message: `Multiple OASs share security schemes with the same name '${propertyName}'`,\n                mitigationAddendum: `The security scheme from OAS ` + `'${currentSecurity[propertyName].oas.info.title}' will be ignored`,\n                data,\n                log: preprocessingLog,\n            });\n        });\n        // Do not overwrite preexisting security schemes\n        data.security = { ...currentSecurity, ...data.security };\n        // Process all operations\n        for (const path in oas.paths) {\n            for (const method in oas.paths[path]) {\n                // Only consider Operation Objects\n                if (!Oas3Tools.isOperation(method)) {\n                    continue;\n                }\n                const endpoint = oas.paths[path][method];\n                const operationString = oass.length === 1\n                    ? Oas3Tools.formatOperationString(method, path)\n                    : Oas3Tools.formatOperationString(method, path, oas.info.title);\n                // Determine description\n                let description = endpoint.description;\n                if ((typeof description !== 'string' || description === '') && typeof endpoint.summary === 'string') {\n                    description = endpoint.summary;\n                }\n                if (data.options.equivalentToMessages) {\n                    // Description may not exist\n                    if (typeof description !== 'string') {\n                        description = '';\n                    }\n                    description += `\\n\\nEquivalent to ${operationString}`;\n                }\n                // Hold on to the operationId\n                const operationId = typeof endpoint.operationId !== 'undefined'\n                    ? endpoint.operationId\n                    : Oas3Tools.generateOperationId(method, path);\n                // Request schema\n                const { payloadContentType, payloadSchema, payloadSchemaNames, payloadRequired, } = Oas3Tools.getRequestSchemaAndNames(path, method, oas);\n                const payloadDefinition = payloadSchema && typeof payloadSchema !== 'undefined'\n                    ? createDataDef(payloadSchemaNames, payloadSchema, true, data, undefined, oas)\n                    : undefined;\n                // Response schema\n                const { responseContentType, responseSchema, responseSchemaNames, statusCode, } = Oas3Tools.getResponseSchemaAndNames(path, method, oas, data, options);\n                if (!responseSchema || typeof responseSchema !== 'object') {\n                    handleWarning({\n                        typeKey: 'MISSING_RESPONSE_SCHEMA',\n                        message: `Operation ${operationString} has no (valid) response schema. ` +\n                            `You can use the fillEmptyResponses option to create a ` +\n                            `placeholder schema`,\n                        data,\n                        log: preprocessingLog,\n                    });\n                    continue;\n                }\n                // Links\n                const links = Oas3Tools.getEndpointLinks(path, method, oas, data);\n                const responseDefinition = createDataDef(responseSchemaNames, responseSchema, false, data, links, oas);\n                // Parameters\n                const parameters = Oas3Tools.getParameters(path, method, oas);\n                // Security protocols\n                const securityRequirements = options.viewer\n                    ? Oas3Tools.getSecurityRequirements(path, method, data.security, oas)\n                    : [];\n                // Servers\n                const servers = Oas3Tools.getServers(path, method, oas);\n                // Whether to place this operation into an authentication viewer\n                const inViewer = securityRequirements.length > 0 && data.options.viewer !== false;\n                /**\n                 * Whether the operation should be added as a Query or Mutation field.\n                 * By default, all GET operations are Query fields and all other\n                 * operations are Mutation fields.\n                 */\n                let isMutation = method.toLowerCase() !== 'get';\n                // Option selectQueryOrMutationField can override isMutation\n                if (typeof options.selectQueryOrMutationField === 'object' &&\n                    typeof options.selectQueryOrMutationField[oas.info.title] === 'object' &&\n                    typeof options.selectQueryOrMutationField[oas.info.title][path] === 'object' &&\n                    typeof options.selectQueryOrMutationField[oas.info.title][path][method] === 'number' // This is an TS enum, which is translated to have a integer value\n                ) {\n                    isMutation =\n                        options.selectQueryOrMutationField[oas.info.title][path][method] === GraphQLOperationType.Mutation;\n                }\n                // Store determined information for operation\n                const operation = {\n                    operationId,\n                    operationString,\n                    description,\n                    path,\n                    method: method.toLowerCase(),\n                    payloadContentType,\n                    payloadDefinition,\n                    payloadRequired,\n                    responseContentType,\n                    responseDefinition,\n                    parameters,\n                    securityRequirements,\n                    servers,\n                    inViewer,\n                    isMutation,\n                    statusCode,\n                    oas,\n                };\n                /**\n                 * Handle operationId property name collision\n                 * May occur if multiple OAS are provided\n                 */\n                if (operationId in data.operations) {\n                    handleWarning({\n                        typeKey: 'DUPLICATE_OPERATIONID',\n                        message: `Multiple OASs share operations with the same operationId '${operationId}'`,\n                        mitigationAddendum: `The operation from the OAS '${operation.oas.info.title}' will be ignored`,\n                        data,\n                        log: preprocessingLog,\n                    });\n                }\n                else {\n                    data.operations[operationId] = operation;\n                }\n            }\n        }\n    });\n    return data;\n}\n/**\n * Extracts the security schemes from given OAS and organizes the information in\n * a data structure that is easier for OpenAPI-to-GraphQL to use\n *\n * Here is the structure of the data:\n * {\n *   {string} [sanitized name] { Contains information about the security protocol\n *     {string} rawName           Stores the raw security protocol name\n *     {object} def               Definition provided by OAS\n *     {object} parameters        Stores the names of the authentication credentials\n *                                  NOTE: Structure will depend on the type of the protocol\n *                                    (e.g. basic authentication, API key, etc.)\n *                                  NOTE: Mainly used for the AnyAuth viewers\n *     {object} schema            Stores the GraphQL schema to create the viewers\n *   }\n * }\n *\n * Here is an example:\n * {\n *   MyApiKey: {\n *     rawName: \"My_api_key\",\n *     def: { ... },\n *     parameters: {\n *       apiKey: MyKeyApiKey\n *     },\n *     schema: { ... }\n *   }\n *   MyBasicAuth: {\n *     rawName: \"My_basic_auth\",\n *     def: { ... },\n *     parameters: {\n *       username: MyBasicAuthUsername,\n *       password: MyBasicAuthPassword,\n *     },\n *     schema: { ... }\n *   }\n * }\n */\nfunction getProcessedSecuritySchemes(oas, data) {\n    const result = {};\n    const security = Oas3Tools.getSecuritySchemes(oas);\n    // Loop through all the security protocols\n    for (const key in security) {\n        const protocol = security[key];\n        // Determine the schema and the parameters for the security protocol\n        let schema;\n        let parameters = {};\n        let description;\n        switch (protocol.type) {\n            case 'apiKey':\n                description = `API key credentials for the security protocol '${key}'`;\n                if (data.oass.length > 1) {\n                    description += ` in ${oas.info.title}`;\n                }\n                parameters = {\n                    apiKey: Oas3Tools.sanitize(`${key}_apiKey`, Oas3Tools.CaseStyle.camelCase),\n                };\n                schema = {\n                    type: 'object',\n                    description,\n                    properties: {\n                        apiKey: {\n                            type: 'string',\n                        },\n                    },\n                };\n                break;\n            case 'http':\n                switch (protocol.scheme) {\n                    /**\n                     * TODO: HTTP has a number of authentication types\n                     *\n                     * See http://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\n                     */\n                    case 'basic':\n                        description = `Basic auth credentials for security protocol '${key}'`;\n                        parameters = {\n                            username: Oas3Tools.sanitize(`${key}_username`, Oas3Tools.CaseStyle.camelCase),\n                            password: Oas3Tools.sanitize(`${key}_password`, Oas3Tools.CaseStyle.camelCase),\n                        };\n                        schema = {\n                            type: 'object',\n                            description,\n                            properties: {\n                                username: {\n                                    type: 'string',\n                                },\n                                password: {\n                                    type: 'string',\n                                },\n                            },\n                        };\n                        break;\n                    default:\n                        handleWarning({\n                            typeKey: 'UNSUPPORTED_HTTP_SECURITY_SCHEME',\n                            message: `Currently unsupported HTTP authentication protocol ` +\n                                `type 'http' and scheme '${protocol.scheme}' in OAS ` +\n                                `'${oas.info.title}'`,\n                            data,\n                            log: preprocessingLog,\n                        });\n                }\n                break;\n            // TODO: Implement\n            case 'openIdConnect':\n                handleWarning({\n                    typeKey: 'UNSUPPORTED_HTTP_SECURITY_SCHEME',\n                    message: `Currently unsupported HTTP authentication protocol ` + `type 'openIdConnect' in OAS '${oas.info.title}'`,\n                    data,\n                    log: preprocessingLog,\n                });\n                break;\n            case 'oauth2':\n                handleWarning({\n                    typeKey: 'OAUTH_SECURITY_SCHEME',\n                    message: `OAuth security scheme found in OAS '${oas.info.title}'. ` +\n                        `OAuth support is provided using the 'tokenJSONpath' option`,\n                    data,\n                    log: preprocessingLog,\n                });\n                // Continue because we do not want to create an OAuth viewer\n                continue;\n            default:\n                handleWarning({\n                    typeKey: 'UNSUPPORTED_HTTP_SECURITY_SCHEME',\n                    message: `Unsupported HTTP authentication protocol` + `type '${protocol.type}' in OAS '${oas.info.title}'`,\n                    data,\n                    log: preprocessingLog,\n                });\n        }\n        // Add protocol data to the output\n        result[key] = {\n            rawName: key,\n            def: protocol,\n            parameters,\n            schema,\n            oas,\n        };\n    }\n    return result;\n}\n/**\n * Method to either create a new or reuse an existing, centrally stored data\n * definition. Data definitions are objects that hold a schema (= JSON schema),\n * an otName (= String to use as the name for object types), and an iotName\n * (= String to use as the name for input object types). Eventually, data\n * definitions also hold an ot (= the object type for the schema) and an iot\n * (= the input object type for the schema).\n *\n * Either names or preferredName should exist.\n */\nexport function createDataDef(names, schema, isInputObjectType, data, links, oas) {\n    const preferredName = getPreferredName(names);\n    // Basic validation test\n    if (typeof schema !== 'object') {\n        handleWarning({\n            typeKey: 'MISSING_SCHEMA',\n            message: `Could not create data definition for schema with ` +\n                `preferred name '${preferredName}' and schema '${JSON.stringify(schema)}'`,\n            data,\n            log: preprocessingLog,\n        });\n        // TODO: Does this change make the option fillEmptyResponses obsolete?\n        return {\n            preferredName,\n            schema: null,\n            required: [],\n            links: null,\n            subDefinitions: null,\n            graphQLTypeName: null,\n            graphQLInputObjectTypeName: null,\n            targetGraphQLType: 'json',\n        };\n    }\n    else {\n        if ('$ref' in schema) {\n            schema = Oas3Tools.resolveRef(schema.$ref, oas);\n        }\n        const saneLinks = {};\n        if (typeof links === 'object') {\n            Object.keys(links).forEach((linkKey) => {\n                saneLinks[Oas3Tools.sanitize(linkKey, !data.options.simpleNames ? Oas3Tools.CaseStyle.camelCase : Oas3Tools.CaseStyle.simple)] = links[linkKey];\n            });\n        }\n        // Determine the index of possible existing data definition\n        const index = getSchemaIndex(preferredName, schema, data.defs);\n        if (index !== -1) {\n            // Found existing data definition and fetch it\n            const existingDataDef = data.defs[index];\n            /**\n             * Collapse links if possible, i.e. if the current operation has links,\n             * combine them with the prexisting ones\n             */\n            if (typeof saneLinks !== 'undefined') {\n                if (typeof existingDataDef.links !== 'undefined') {\n                    // Check if there are any overlapping links\n                    Object.keys(existingDataDef.links).forEach(saneLinkKey => {\n                        if (typeof saneLinks[saneLinkKey] !== 'undefined' &&\n                            !deepEqual(existingDataDef.links[saneLinkKey], saneLinks[saneLinkKey])) {\n                            handleWarning({\n                                typeKey: 'DUPLICATE_LINK_KEY',\n                                message: `Multiple operations with the same response body share the same sanitized ` +\n                                    `link key '${saneLinkKey}' but have different link definitions ` +\n                                    `'${JSON.stringify(existingDataDef.links[saneLinkKey])}' and ` +\n                                    `'${JSON.stringify(saneLinks[saneLinkKey])}'.`,\n                                data,\n                                log: preprocessingLog,\n                            });\n                        }\n                    });\n                    /**\n                     * Collapse the links\n                     *\n                     * Avoid overwriting preexisting links\n                     */\n                    existingDataDef.links = { ...saneLinks, ...existingDataDef.links };\n                }\n                else {\n                    // No preexisting links, so simply assign the links\n                    existingDataDef.links = saneLinks;\n                }\n            }\n            return existingDataDef;\n        }\n        else {\n            // Else, define a new name, store the def, and return it\n            const name = getSchemaName(names, data.usedTypeNames);\n            // Store and sanitize the name\n            const saneName = !data.options.simpleNames\n                ? Oas3Tools.sanitize(name, Oas3Tools.CaseStyle.PascalCase)\n                : Oas3Tools.capitalize(Oas3Tools.sanitize(name, Oas3Tools.CaseStyle.simple));\n            const saneInputName = Oas3Tools.capitalize(saneName + 'Input');\n            Oas3Tools.storeSaneName(saneName, name, data.saneMap);\n            /**\n             * TODO: is there a better way of copying the schema object?\n             *\n             * Perhaps, just copy it at the root level (operation schema)\n             */\n            const collapsedSchema = resolveAllOf(schema, {}, data, oas);\n            const targetGraphQLType = Oas3Tools.getSchemaTargetGraphQLType(collapsedSchema, data);\n            const def = {\n                preferredName,\n                /**\n                 * Note that schema may contain $ref or schema composition (e.g. allOf)\n                 *\n                 * TODO: the schema is used in getSchemaIndex, which allows us to check\n                 * whether a dataDef has already been created for that particular\n                 * schema and name pair. The look up should resolve references but\n                 * currently, it does not.\n                 */\n                schema,\n                required: [],\n                targetGraphQLType,\n                subDefinitions: undefined,\n                links: saneLinks,\n                graphQLTypeName: saneName,\n                graphQLInputObjectTypeName: saneInputName,\n            };\n            // Used type names and defs of union and object types are pushed during creation\n            if (targetGraphQLType === 'object' || targetGraphQLType === 'list' || targetGraphQLType === 'enum') {\n                data.usedTypeNames.push(saneName);\n                data.usedTypeNames.push(saneInputName);\n                // Add the def to the master list\n                data.defs.push(def);\n            }\n            // We currently only support simple cases of anyOf and oneOf\n            if (\n            // TODO: Should also consider if the member schema contains type data\n            (Array.isArray(collapsedSchema.anyOf) && Array.isArray(collapsedSchema.oneOf)) || // anyOf and oneOf used concurrently\n                hasNestedAnyOfUsage(collapsedSchema, oas) ||\n                hasNestedOneOfUsage(collapsedSchema, oas)) {\n                handleWarning({\n                    typeKey: 'COMBINE_SCHEMAS',\n                    message: `Schema '${JSON.stringify(schema)}' contains either both ` +\n                        `'anyOf' and 'oneOf' or nested 'anyOf' and 'oneOf' which ` +\n                        `is currently not supported.`,\n                    mitigationAddendum: `Use arbitrary JSON type instead.`,\n                    data,\n                    log: preprocessingLog,\n                });\n                def.targetGraphQLType = 'json';\n                return def;\n            }\n            // oneOf will ideally be turned into a union type\n            if (Array.isArray(collapsedSchema.oneOf)) {\n                const oneOfDataDef = createDataDefFromOneOf({\n                    saneName,\n                    saneInputName,\n                    collapsedSchema,\n                    isInputObjectType,\n                    def,\n                    data,\n                    oas,\n                });\n                if (typeof oneOfDataDef === 'object') {\n                    return oneOfDataDef;\n                }\n            }\n            /**\n             * anyOf will ideally be turned into an object type\n             *\n             * Fields common to all member schemas will be made non-null\n             */\n            if (Array.isArray(collapsedSchema.anyOf)) {\n                const anyOfDataDef = createDataDefFromAnyOf({\n                    saneName,\n                    saneInputName,\n                    collapsedSchema,\n                    isInputObjectType,\n                    def,\n                    data,\n                    oas,\n                });\n                if (typeof anyOfDataDef === 'object') {\n                    return anyOfDataDef;\n                }\n            }\n            if (targetGraphQLType) {\n                switch (targetGraphQLType) {\n                    case 'list':\n                        if (typeof collapsedSchema.items === 'object') {\n                            // Break schema down into component parts\n                            // I.e. if it is an list type, create a reference to the list item type\n                            // Or if it is an object type, create references to all of the field types\n                            const itemsSchema = collapsedSchema.items;\n                            let itemsName = `${name}ListItem`;\n                            if ('$ref' in itemsSchema) {\n                                itemsName = collapsedSchema.items.$ref.split('/').pop();\n                            }\n                            const subDefinition = createDataDef(\n                            // Is this the correct classification for this name? It does not matter in the long run.\n                            { fromRef: itemsName }, itemsSchema, isInputObjectType, data, undefined, oas);\n                            // Add list item reference\n                            def.subDefinitions = subDefinition;\n                        }\n                        break;\n                    case 'object':\n                        def.subDefinitions = {};\n                        if (typeof collapsedSchema.properties === 'object' && Object.keys(collapsedSchema.properties).length > 0) {\n                            addObjectPropertiesToDataDef(def, collapsedSchema, def.required, isInputObjectType, data, oas);\n                        }\n                        else {\n                            handleWarning({\n                                typeKey: 'OBJECT_MISSING_PROPERTIES',\n                                message: `Schema ${JSON.stringify(schema)} does not have ` + `any properties`,\n                                data,\n                                log: preprocessingLog,\n                            });\n                            def.targetGraphQLType = 'json';\n                        }\n                        break;\n                }\n            }\n            else {\n                // No target GraphQL type\n                handleWarning({\n                    typeKey: 'UNKNOWN_TARGET_TYPE',\n                    message: `No GraphQL target type could be identified for schema '${JSON.stringify(schema)}'.`,\n                    data,\n                    log: preprocessingLog,\n                });\n                def.targetGraphQLType = 'json';\n            }\n            return def;\n        }\n    }\n}\n/**\n * Returns the index of the data definition object in the given list that\n * contains the same schema and preferred name as the given one. Returns -1 if\n * that schema could not be found.\n */\nfunction getSchemaIndex(preferredName, schema, dataDefs) {\n    /**\n     * TODO: instead of iterating through the whole list every time, create a\n     * hashing function and store all of the DataDefinitions in a hashmap.\n     */\n    for (let index = 0; index < dataDefs.length; index++) {\n        const def = dataDefs[index];\n        /**\n         * TODO: deepEquals is not sufficient. We also need to resolve references.\n         * However, deepEquals should work for vast majority of cases.\n         */\n        if (preferredName === def.preferredName && deepEqual(schema, def.schema)) {\n            return index;\n        }\n    }\n    // The schema could not be found in the master list\n    return -1;\n}\n/**\n * Determines the preferred name to use for schema regardless of name collisions.\n *\n * In other words, determines the ideal name for a schema.\n *\n * Similar to getSchemaName() except it does not check if the name has already\n * been taken.\n */\nfunction getPreferredName(names) {\n    if (typeof names.preferred === 'string') {\n        return Oas3Tools.sanitize(names.preferred, Oas3Tools.CaseStyle.PascalCase); // CASE: preferred name already known\n    }\n    else if (typeof names.fromRef === 'string') {\n        return Oas3Tools.sanitize(names.fromRef, Oas3Tools.CaseStyle.PascalCase); // CASE: name from reference\n    }\n    else if (typeof names.fromSchema === 'string') {\n        return Oas3Tools.sanitize(names.fromSchema, Oas3Tools.CaseStyle.PascalCase); // CASE: name from schema (i.e., \"title\" property in schema)\n    }\n    else if (typeof names.fromPath === 'string') {\n        return Oas3Tools.sanitize(names.fromPath, Oas3Tools.CaseStyle.PascalCase); // CASE: name from path\n    }\n    else {\n        return 'PlaceholderName'; // CASE: placeholder name\n    }\n}\n/**\n * Determines name to use for schema from previously determined schemaNames and\n * considering not reusing existing names.\n */\nfunction getSchemaName(names, usedNames) {\n    if (Object.keys(names).length === 1 && typeof names.preferred === 'string') {\n        throw new Error(`Cannot create data definition without name(s), excluding the preferred name.`);\n    }\n    let schemaName;\n    // CASE: name from reference\n    if (typeof names.fromRef === 'string') {\n        const saneName = Oas3Tools.sanitize(names.fromRef, Oas3Tools.CaseStyle.PascalCase);\n        if (!usedNames.includes(saneName)) {\n            schemaName = names.fromRef;\n        }\n    }\n    // CASE: name from schema (i.e., \"title\" property in schema)\n    if (!schemaName && typeof names.fromSchema === 'string') {\n        const saneName = Oas3Tools.sanitize(names.fromSchema, Oas3Tools.CaseStyle.PascalCase);\n        if (!usedNames.includes(saneName)) {\n            schemaName = names.fromSchema;\n        }\n    }\n    // CASE: name from path\n    if (!schemaName && typeof names.fromPath === 'string') {\n        const saneName = Oas3Tools.sanitize(names.fromPath, Oas3Tools.CaseStyle.PascalCase);\n        if (!usedNames.includes(saneName)) {\n            schemaName = names.fromPath;\n        }\n    }\n    // CASE: all names are already used - create approximate name\n    if (!schemaName) {\n        schemaName = Oas3Tools.sanitize(typeof names.fromRef === 'string'\n            ? names.fromRef\n            : typeof names.fromSchema === 'string'\n                ? names.fromSchema\n                : typeof names.fromPath === 'string'\n                    ? names.fromPath\n                    : 'PlaceholderName', Oas3Tools.CaseStyle.PascalCase);\n    }\n    if (usedNames.includes(schemaName)) {\n        let appendix = 2;\n        /**\n         * GraphQL Objects cannot share the name so if the name already exists in\n         * the master list append an incremental number until the name does not\n         * exist anymore.\n         */\n        while (usedNames.includes(`${schemaName}${appendix}`)) {\n            appendix++;\n        }\n        schemaName = `${schemaName}${appendix}`;\n    }\n    return schemaName;\n}\n/**\n * Add the properties to the data definition\n */\nfunction addObjectPropertiesToDataDef(def, schema, required, isInputObjectType, data, oas) {\n    /**\n     * Resolve all required properties\n     *\n     * TODO: required may contain duplicates, which is not necessarily a problem\n     */\n    if (Array.isArray(schema.required)) {\n        schema.required.forEach(requiredProperty => {\n            required.push(requiredProperty);\n        });\n    }\n    for (const propertyKey in schema.properties) {\n        let propSchemaName = propertyKey;\n        let propSchema = schema.properties[propertyKey];\n        if ('$ref' in propSchema) {\n            propSchemaName = propSchema.$ref.split('/').pop();\n            propSchema = Oas3Tools.resolveRef(propSchema.$ref, oas);\n        }\n        if (!(propertyKey in def.subDefinitions)) {\n            const subDefinition = createDataDef({\n                fromRef: propSchemaName,\n                fromSchema: propSchema.title,\n            }, propSchema, isInputObjectType, data, undefined, oas);\n            // Add field type references\n            def.subDefinitions[propertyKey] = subDefinition;\n        }\n        else {\n            handleWarning({\n                typeKey: 'DUPLICATE_FIELD_NAME',\n                message: `By way of resolving 'allOf', multiple schemas contain ` +\n                    `properties with the same name, preventing consolidation. Cannot ` +\n                    `add property '${propertyKey}' from schema '${JSON.stringify(schema)}' ` +\n                    `to dataDefinition '${JSON.stringify(def)}'`,\n                data,\n                log: preprocessingLog,\n            });\n        }\n    }\n}\n/**\n * Recursively traverse a schema and resolve allOf by appending the data to the\n * parent schema\n */\nfunction resolveAllOf(schema, references, data, oas) {\n    // Dereference schema\n    if ('$ref' in schema) {\n        const referenceLocation = schema.$ref;\n        schema = Oas3Tools.resolveRef(schema.$ref, oas);\n        if (referenceLocation in references) {\n            return references[referenceLocation];\n        }\n        else {\n            // Store references in case of circular allOf\n            references[referenceLocation] = schema;\n        }\n    }\n    const collapsedSchema = JSON.parse(JSON.stringify(schema));\n    // Resolve allOf\n    if (Array.isArray(collapsedSchema.allOf)) {\n        collapsedSchema.allOf.forEach(memberSchema => {\n            // Collapse type if applicable\n            const resolvedSchema = resolveAllOf(memberSchema, references, data, oas);\n            if (resolvedSchema.type) {\n                if (!collapsedSchema.type) {\n                    collapsedSchema.type = resolvedSchema.type;\n                    // Add type if applicable\n                }\n                else if (collapsedSchema.type !== resolvedSchema.type) {\n                    // Incompatible schema type\n                    handleWarning({\n                        typeKey: 'UNRESOLVABLE_SCHEMA',\n                        message: `Resolving 'allOf' field in schema '${collapsedSchema}' ` +\n                            `results in incompatible schema type from partial schema '${resolvedSchema}'.`,\n                        data,\n                        log: preprocessingLog,\n                    });\n                }\n            }\n            // Collapse properties if applicable\n            if ('properties' in resolvedSchema) {\n                if (!('properties' in collapsedSchema)) {\n                    collapsedSchema.properties = {};\n                }\n                Object.entries(resolvedSchema.properties).forEach(([propertyName, property]) => {\n                    if (propertyName in collapsedSchema) {\n                        // Conflicting property\n                        handleWarning({\n                            typeKey: 'UNRESOLVABLE_SCHEMA',\n                            message: `Resolving 'allOf' field in schema '${collapsedSchema}' ` +\n                                `results in incompatible property field from partial schema '${resolvedSchema}'.`,\n                            data,\n                            log: preprocessingLog,\n                        });\n                    }\n                    else {\n                        collapsedSchema.properties[propertyName] = property;\n                    }\n                });\n            }\n            // Collapse oneOf if applicable\n            if ('oneOf' in resolvedSchema) {\n                if (!('oneOf' in collapsedSchema)) {\n                    collapsedSchema.oneOf = [];\n                }\n                resolvedSchema.oneOf.forEach(oneOfProperty => {\n                    collapsedSchema.oneOf.push(oneOfProperty);\n                });\n            }\n            // Collapse anyOf if applicable\n            if ('anyOf' in resolvedSchema) {\n                if (!('anyOf' in collapsedSchema)) {\n                    collapsedSchema.anyOf = [];\n                }\n                resolvedSchema.anyOf.forEach(anyOfProperty => {\n                    collapsedSchema.anyOf.push(anyOfProperty);\n                });\n            }\n            // Collapse required if applicable\n            if ('required' in resolvedSchema) {\n                if (!('required' in collapsedSchema)) {\n                    collapsedSchema.required = [];\n                }\n                resolvedSchema.required.forEach(requiredProperty => {\n                    if (!collapsedSchema.required.includes(requiredProperty)) {\n                        collapsedSchema.required.push(requiredProperty);\n                    }\n                });\n            }\n        });\n    }\n    return collapsedSchema;\n}\n/**\n * In the context of schemas that use keywords that combine member schemas,\n * collect data on certain aspects so it is all in one place for processing.\n */\nfunction getMemberSchemaData(schemas, data, oas) {\n    const result = {\n        allTargetGraphQLTypes: [],\n        allProperties: [],\n        allRequired: [],\n    };\n    schemas.forEach(schema => {\n        // Dereference schemas\n        if ('$ref' in schema) {\n            schema = Oas3Tools.resolveRef(schema.$ref, oas);\n        }\n        // Consolidate target GraphQL type\n        const memberTargetGraphQLType = Oas3Tools.getSchemaTargetGraphQLType(schema, data);\n        if (memberTargetGraphQLType) {\n            result.allTargetGraphQLTypes.push(memberTargetGraphQLType);\n        }\n        // Consolidate properties\n        if (schema.properties) {\n            result.allProperties.push(schema.properties);\n        }\n        // Consolidate required\n        if (schema.required) {\n            result.allRequired = result.allRequired.concat(schema.required);\n        }\n    });\n    return result;\n}\n/**\n * Check to see if there are cases of nested oneOf fields in the member schemas\n *\n * We currently cannot handle complex cases of oneOf and anyOf\n */\nfunction hasNestedOneOfUsage(collapsedSchema, oas) {\n    // TODO: Should also consider if the member schema contains type data\n    return (Array.isArray(collapsedSchema.oneOf) &&\n        collapsedSchema.oneOf.some(memberSchema => {\n            // anyOf and oneOf are nested\n            if ('$ref' in memberSchema) {\n                memberSchema = Oas3Tools.resolveRef(memberSchema.$ref, oas);\n            }\n            return (Array.isArray(memberSchema.anyOf) || Array.isArray(memberSchema.oneOf) // Nested oneOf would result in nested unions which are not allowed by GraphQL\n            );\n        }));\n}\n/**\n * Check to see if there are cases of nested anyOf fields in the member schemas\n *\n * We currently cannot handle complex cases of oneOf and anyOf\n */\nfunction hasNestedAnyOfUsage(collapsedSchema, oas) {\n    // TODO: Should also consider if the member schema contains type data\n    return (Array.isArray(collapsedSchema.anyOf) &&\n        collapsedSchema.anyOf.some(memberSchema => {\n            // anyOf and oneOf are nested\n            if ('$ref' in memberSchema) {\n                memberSchema = Oas3Tools.resolveRef(memberSchema.$ref, oas);\n            }\n            return Array.isArray(memberSchema.anyOf) || Array.isArray(memberSchema.oneOf);\n        }));\n}\n/**\n * Create a data definition for anyOf is applicable\n *\n * anyOf should resolve into an object that contains the superset of all\n * properties from the member schemas\n */\nfunction createDataDefFromAnyOf({ saneName, saneInputName, collapsedSchema, isInputObjectType, def, data, oas, }) {\n    const anyOfData = getMemberSchemaData(collapsedSchema.anyOf, data, oas);\n    if (anyOfData.allTargetGraphQLTypes.some(memberTargetGraphQLType => {\n        return memberTargetGraphQLType === 'object';\n    })) {\n        // Every member type should be an object\n        if (anyOfData.allTargetGraphQLTypes.every(memberTargetGraphQLType => {\n            return memberTargetGraphQLType === 'object';\n        }) &&\n            anyOfData.allProperties.length > 0 // Redundant check\n        ) {\n            // Ensure that parent schema is compatiable with oneOf\n            if (def.targetGraphQLType === null || def.targetGraphQLType === 'object') {\n                const allProperties = {};\n                const incompatibleProperties = new Set();\n                /**\n                 * TODO: Check for consistent properties across all member schemas and\n                 * make them into non-nullable properties by manipulating the\n                 * required field\n                 */\n                if (typeof collapsedSchema.properties === 'object') {\n                    Object.keys(collapsedSchema.properties).forEach(propertyName => {\n                        allProperties[propertyName] = [collapsedSchema.properties[propertyName]];\n                    });\n                }\n                // Check if any member schema has conflicting properties\n                anyOfData.allProperties.forEach(properties => {\n                    Object.keys(properties).forEach((propertyName) => {\n                        if (!incompatibleProperties.has(propertyName) && // Has not been already identified as a problematic property\n                            typeof allProperties[propertyName] === 'object' &&\n                            allProperties[propertyName].some(property => {\n                                // Property does not match a recorded one\n                                return !deepEqual(property, properties[propertyName]);\n                            })) {\n                            incompatibleProperties.add(propertyName);\n                        }\n                        // Add property in the store\n                        if (!(propertyName in allProperties)) {\n                            allProperties[propertyName] = [];\n                        }\n                        allProperties[propertyName].push(properties[propertyName]);\n                    });\n                });\n                def.subDefinitions = {};\n                if (typeof collapsedSchema.properties === 'object' && Object.keys(collapsedSchema.properties).length > 0) {\n                    addObjectPropertiesToDataDef(def, collapsedSchema, def.required, isInputObjectType, data, oas);\n                }\n                anyOfData.allProperties.forEach(properties => {\n                    Object.keys(properties).forEach((propertyName) => {\n                        if (!incompatibleProperties.has(propertyName)) {\n                            // Dereferenced by processing anyOfData\n                            const propertySchema = properties[propertyName];\n                            const subDefinition = createDataDef({\n                                fromRef: propertyName,\n                                fromSchema: propertySchema.title,\n                            }, propertySchema, isInputObjectType, data, undefined, oas);\n                            /**\n                             * Add field type references\n                             * There should not be any collisions\n                             */\n                            def.subDefinitions[propertyName] = subDefinition;\n                        }\n                    });\n                });\n                // Add in incompatible properties\n                incompatibleProperties.forEach(propertyName => {\n                    // TODO: add description\n                    def.subDefinitions[propertyName] = {\n                        targetGraphQLType: 'json',\n                    };\n                });\n                data.usedTypeNames.push(saneName);\n                data.usedTypeNames.push(saneInputName);\n                data.defs.push(def);\n                def.targetGraphQLType = 'object';\n                return def;\n            }\n            else {\n                // The parent schema is incompatible with the member schemas\n                handleWarning({\n                    typeKey: 'COMBINE_SCHEMAS',\n                    message: `Schema '${JSON.stringify(def.schema)}' contains 'anyOf' and ` +\n                        `some member schemas are object types so create a GraphQL ` +\n                        `object type but the parent schema is a non-object type ` +\n                        `so they are not compatible.`,\n                    mitigationAddendum: `Use arbitrary JSON type instead.`,\n                    data,\n                    log: preprocessingLog,\n                });\n                def.targetGraphQLType = 'json';\n                return def;\n            }\n        }\n        else {\n            // The member schemas are not all object types\n            handleWarning({\n                typeKey: 'COMBINE_SCHEMAS',\n                message: `Schema '${def.schema}' contains 'anyOf' and ` +\n                    `some member schemas are object types so create a GraphQL ` +\n                    `object type but some member schemas are non-object types ` +\n                    `so they are not compatible.`,\n                data,\n                log: preprocessingLog,\n            });\n            def.targetGraphQLType = 'json';\n            return def;\n        }\n    }\n}\nfunction createDataDefFromOneOf({ saneName, saneInputName, collapsedSchema, isInputObjectType, def, data, oas, }) {\n    const oneOfData = getMemberSchemaData(collapsedSchema.oneOf, data, oas);\n    if (oneOfData.allTargetGraphQLTypes.some(memberTargetGraphQLType => {\n        return memberTargetGraphQLType === 'object';\n    })) {\n        // unions must be created from object types\n        if (oneOfData.allTargetGraphQLTypes.every(memberTargetGraphQLType => {\n            return memberTargetGraphQLType === 'object';\n        }) &&\n            oneOfData.allProperties.length > 0 // Redundant check\n        ) {\n            // Ensure that parent schema is compatiable with oneOf\n            if (def.targetGraphQLType === null || def.targetGraphQLType === 'object') {\n                def.subDefinitions = [];\n                collapsedSchema.oneOf.forEach(memberSchema => {\n                    // Dereference member schema\n                    let fromRef;\n                    if ('$ref' in memberSchema) {\n                        fromRef = memberSchema.$ref.split('/').pop();\n                        memberSchema = Oas3Tools.resolveRef(memberSchema.$ref, oas);\n                    }\n                    // Member types of GraphQL unions must be object types\n                    if (Oas3Tools.getSchemaTargetGraphQLType(memberSchema, data) === 'object') {\n                        const subDefinition = createDataDef({\n                            fromRef,\n                            fromSchema: memberSchema.title,\n                            fromPath: `${saneName}Member`,\n                        }, memberSchema, isInputObjectType, data, undefined, oas);\n                        def.subDefinitions.push(subDefinition);\n                    }\n                    else {\n                        handleWarning({\n                            typeKey: 'COMBINE_SCHEMAS',\n                            message: `Schema '${JSON.stringify(def.schema)}' contains 'oneOf' so ` +\n                                `create a GraphQL union type but member schema '${JSON.stringify(memberSchema)}' ` +\n                                `is not an object type and union member types must be ` +\n                                `object base types.`,\n                            data,\n                            log: preprocessingLog,\n                        });\n                    }\n                });\n                // Not all member schemas may have been turned into GraphQL member types\n                if (def.subDefinitions.length > 0 &&\n                    def.subDefinitions.every(subDefinition => {\n                        return subDefinition.targetGraphQLType === 'object';\n                    })) {\n                    // Ensure all member schemas have been verified as object types\n                    data.usedTypeNames.push(saneName);\n                    data.usedTypeNames.push(saneInputName);\n                    data.defs.push(def);\n                    def.targetGraphQLType = 'union';\n                    return def;\n                }\n                else {\n                    handleWarning({\n                        typeKey: 'COMBINE_SCHEMAS',\n                        message: `Schema '${JSON.stringify(def.schema)}' contains 'oneOf' so ` +\n                            `create a GraphQL union type but all member schemas are not` +\n                            `object types and union member types must be object types.`,\n                        mitigationAddendum: `Use arbitrary JSON type instead.`,\n                        data,\n                        log: preprocessingLog,\n                    });\n                    // Default arbitrary JSON type\n                    def.targetGraphQLType = 'json';\n                    return def;\n                }\n            }\n            else {\n                // The parent schema is incompatible with the member schemas\n                handleWarning({\n                    typeKey: 'COMBINE_SCHEMAS',\n                    message: `Schema '${JSON.stringify(def.schema)}' contains 'oneOf' so create ` +\n                        `a GraphQL union type but the parent schema is a non-object ` +\n                        `type and member types must be object types.`,\n                    mitigationAddendum: `Use arbitrary JSON type instead.`,\n                    data,\n                    log: preprocessingLog,\n                });\n                def.targetGraphQLType = 'json';\n                return def;\n            }\n        }\n        else {\n            // The member schemas are not all object types\n            handleWarning({\n                typeKey: 'COMBINE_SCHEMAS',\n                message: `Schema '${JSON.stringify(def.schema)}' contains 'oneOf' so create ` +\n                    `a GraphQL union type but some member schemas are non-object ` +\n                    `types and union member types must be object types.`,\n                mitigationAddendum: `Use arbitrary JSON type instead.`,\n                data,\n                log: preprocessingLog,\n            });\n            def.targetGraphQLType = 'json';\n            return def;\n        }\n    }\n}\n//# sourceMappingURL=preprocessor.js.map","/* eslint-disable @typescript-eslint/ban-ts-comment */\n/* eslint-disable no-dupe-else-if */\n/* eslint-disable no-case-declarations */\n// Copyright IBM Corp. 2018. All Rights Reserved.\n// Node module: openapi-to-graphql\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\nimport { GraphQLObjectType, GraphQLString, GraphQLID, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLNonNull, GraphQLList, GraphQLInputObjectType, GraphQLEnumType, GraphQLUnionType, } from 'graphql';\n// Imports:\nimport * as Oas3Tools from './oas_3_tools';\nimport { getResolver } from './resolver_builder';\nimport { createDataDef } from './preprocessor';\nimport debug from 'debug';\nimport { handleWarning, sortObject } from './utils';\nimport { GraphQLJSON } from 'graphql-scalars';\nconst translationLog = debug('translation');\n/**\n * Creates and returns a GraphQL type for the given JSON schema.\n */\nexport function getGraphQLType({ def, operation, data, iteration = 0, isInputObjectType = false, }) {\n    const name = isInputObjectType ? def.graphQLInputObjectTypeName : def.graphQLTypeName;\n    // Avoid excessive iterations\n    if (iteration === 50) {\n        throw new Error(`GraphQL type ${name} has excessive nesting of other types`);\n    }\n    switch (def.targetGraphQLType) {\n        // CASE: object - create object type\n        case 'object':\n            return createOrReuseOt({\n                def,\n                operation,\n                data,\n                iteration,\n                isInputObjectType,\n            });\n        // CASE: union - create union type\n        case 'union':\n            return createOrReuseUnion({\n                def,\n                operation,\n                data,\n                iteration,\n            });\n        // CASE: list - create list type\n        case 'list':\n            return createOrReuseList({\n                def,\n                operation,\n                data,\n                iteration,\n                isInputObjectType,\n            });\n        // CASE: enum - create enum type\n        case 'enum':\n            return createOrReuseEnum({\n                def,\n                data,\n            });\n        // CASE: scalar - return scalar type\n        default:\n            return getScalarType({\n                def,\n                data,\n            });\n    }\n}\n/**\n * Creates an (input) object type or return an existing one, and stores it\n * in data\n *\n * A returned GraphQLObjectType has the following internal structure:\n *\n *   new GraphQLObjectType({\n *     name        // Optional name of the type\n *     description // Optional description of type\n *     fields      // REQUIRED returning fields\n *       type      // REQUIRED definition of the field type\n *       args      // Optional definition of types\n *       resolve   // Optional function defining how to obtain this type\n *   })\n */\nfunction createOrReuseOt({ def, operation, data, iteration, isInputObjectType, }) {\n    // Try to reuse a preexisting (input) object type\n    // CASE: query - reuse object type\n    if (!isInputObjectType) {\n        if (def.graphQLType && typeof def.graphQLType !== 'undefined') {\n            translationLog(`Reuse object type '${def.graphQLTypeName}'` +\n                (typeof operation === 'object' ? ` (for operation '${operation.operationString}')` : ''));\n            return def.graphQLType;\n        }\n        // CASE: mutation - reuse input object type\n    }\n    else {\n        if (def.graphQLInputObjectType && typeof def.graphQLInputObjectType !== 'undefined') {\n            translationLog(`Reuse input object type '${def.graphQLInputObjectTypeName}'` +\n                (typeof operation === 'object' ? ` (for operation '${operation.operationString}')` : ''));\n            return def.graphQLInputObjectType;\n        }\n    }\n    // Cannot reuse preexisting (input) object type, therefore create one\n    const schema = def.schema;\n    const description = schema.description;\n    // CASE: query - create object type\n    if (!isInputObjectType) {\n        translationLog(`Create object type '${def.graphQLTypeName}'` +\n            (typeof operation === 'object' ? ` (for operation '${operation.operationString}')` : ''));\n        def.graphQLType = new GraphQLObjectType({\n            name: def.graphQLTypeName,\n            description,\n            fields: () => {\n                return createFields({\n                    def,\n                    links: def.links,\n                    operation,\n                    data,\n                    iteration,\n                    isInputObjectType: false,\n                });\n            },\n        });\n        return def.graphQLType;\n        // CASE: mutation - create input object type\n    }\n    else {\n        translationLog(`Create input object type '${def.graphQLInputObjectTypeName}'` +\n            (typeof operation === 'object' ? ` (for operation '${operation.operationString}')` : ''));\n        def.graphQLInputObjectType = new GraphQLInputObjectType({\n            name: def.graphQLInputObjectTypeName,\n            description,\n            // @ts-ignore\n            fields: () => {\n                return createFields({\n                    def,\n                    links: {},\n                    operation,\n                    data,\n                    iteration,\n                    isInputObjectType: true,\n                });\n            },\n        });\n        return def.graphQLInputObjectType;\n    }\n}\n/**\n * Creates a union type or return an existing one, and stores it in data\n */\nfunction createOrReuseUnion({ def, operation, data, iteration }) {\n    // Try to reuse existing union type\n    if (typeof def.graphQLType !== 'undefined') {\n        translationLog(`Reuse union type '${def.graphQLTypeName}'` +\n            (typeof operation === 'object' ? ` (for operation '${operation.operationString}')` : ''));\n        return def.graphQLType;\n    }\n    else {\n        translationLog(`Create union type '${def.graphQLTypeName}'` +\n            (typeof operation === 'object' ? ` (for operation '${operation.operationString}')` : ''));\n        const schema = def.schema;\n        const description = typeof schema.description !== 'undefined' ? schema.description : 'No description available.';\n        const memberTypeDefinitions = def.subDefinitions;\n        const types = Object.values(memberTypeDefinitions).map(memberTypeDefinition => {\n            return getGraphQLType({\n                def: memberTypeDefinition,\n                operation,\n                data,\n                iteration: iteration + 1,\n                isInputObjectType: false,\n            });\n        });\n        /**\n         * Check for ambiguous member types\n         *\n         * i.e. member types that can be confused with each other.\n         */\n        checkAmbiguousMemberTypes(def, types, data);\n        def.graphQLType = new GraphQLUnionType({\n            name: def.graphQLTypeName,\n            description,\n            types,\n            resolveType: source => {\n                const properties = Object.keys(source);\n                // Remove custom _openAPIToGraphQL property used to pass data\n                const otgIndex = properties.indexOf('_openAPIToGraphQL');\n                if (otgIndex !== -1) {\n                    properties.splice(otgIndex, 1);\n                }\n                /**\n                 * Find appropriate member type\n                 *\n                 * TODO: currently, the check is performed by only checking the property\n                 * names. In the future, we should also check the types of those\n                 * properties.\n                 *\n                 * TODO: there is a chance a that an intended member type cannot be\n                 * identified if, for whatever reason, the return data is a superset\n                 * of the fields specified in the OAS\n                 */\n                return types.find(type => {\n                    const typeFields = Object.keys(type.getFields());\n                    if (properties.length <= typeFields.length) {\n                        for (let i = 0; i < properties.length; i++) {\n                            if (!typeFields.includes(properties[i])) {\n                                return false;\n                            }\n                        }\n                        return true;\n                    }\n                    return false;\n                });\n            },\n        });\n        return def.graphQLType;\n    }\n}\n/**\n * Check for ambiguous member types\n *\n * i.e. member types that can be confused with each other.\n */\nfunction checkAmbiguousMemberTypes(def, types, data) {\n    types.sort((a, b) => {\n        const aFieldLength = Object.keys(a.getFields()).length;\n        const bFieldLength = Object.keys(b.getFields()).length;\n        if (aFieldLength < bFieldLength) {\n            return -1;\n        }\n        else if (aFieldLength < bFieldLength) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    });\n    for (let i = 0; i < types.length - 1; i++) {\n        const currentType = types[i];\n        for (let j = i + 1; j < types.length; j++) {\n            const otherType = types[j];\n            // TODO: Check the value, not just the field name\n            if (Object.keys(currentType.getFields()).every(field => {\n                return Object.keys(otherType.getFields()).includes(field);\n            })) {\n                handleWarning({\n                    typeKey: 'AMBIGUOUS_UNION_MEMBERS',\n                    message: `Union created from schema '${JSON.stringify(def)}' contains ` +\n                        `member types such as '${currentType}' and '${otherType}' ` +\n                        `which are ambiguous. Ambiguous member types can cause ` +\n                        `problems when trying to resolve types.`,\n                    data,\n                    log: translationLog,\n                });\n                return;\n            }\n        }\n    }\n}\n/**\n * Creates a list type or returns an existing one, and stores it in data\n */\nfunction createOrReuseList({ def, operation, iteration, isInputObjectType, data, }) {\n    const name = isInputObjectType ? def.graphQLInputObjectTypeName : def.graphQLTypeName;\n    // Try to reuse existing Object Type\n    if (!isInputObjectType && def.graphQLType && typeof def.graphQLType !== 'undefined') {\n        translationLog(`Reuse GraphQLList '${def.graphQLTypeName}'`);\n        return def.graphQLType;\n    }\n    else if (isInputObjectType && def.graphQLInputObjectType && typeof def.graphQLInputObjectType !== 'undefined') {\n        translationLog(`Reuse GraphQLList '${def.graphQLInputObjectTypeName}'`);\n        return def.graphQLInputObjectType;\n    }\n    // Create new List Object Type\n    translationLog(`Create GraphQLList '${def.graphQLTypeName}'`);\n    // Get definition of the list item, which should be in the sub definitions\n    const itemDef = def.subDefinitions;\n    // Equivalent to schema.items\n    const itemsSchema = itemDef.schema;\n    // Equivalent to `{name}ListItem`\n    const itemsName = itemDef.graphQLTypeName;\n    const itemsType = getGraphQLType({\n        def: itemDef,\n        data,\n        operation,\n        iteration: iteration + 1,\n        isInputObjectType,\n    });\n    if (itemsType !== null) {\n        const listObjectType = new GraphQLList(itemsType);\n        // Store newly created list type\n        if (!isInputObjectType) {\n            def.graphQLType = listObjectType;\n        }\n        else {\n            def.graphQLInputObjectType = listObjectType;\n        }\n        return listObjectType;\n    }\n    else {\n        throw new Error(`Cannot create list item object type '${itemsName}' in list\n    '${name}' with schema '${JSON.stringify(itemsSchema)}'`);\n    }\n}\n/**\n * Creates an enum type or returns an existing one, and stores it in data\n */\nfunction createOrReuseEnum({ def }) {\n    /**\n     * Try to reuse existing enum type\n     *\n     * Enum types do not have an input variant so only check def.ot\n     */\n    if (def.graphQLType && typeof def.graphQLType !== 'undefined') {\n        translationLog(`Reuse GraphQLEnumType '${def.graphQLTypeName}'`);\n        return def.graphQLType;\n    }\n    else {\n        translationLog(`Create GraphQLEnumType '${def.graphQLTypeName}'`);\n        const values = {};\n        def.schema.enum.forEach(e => {\n            // Force enum values to string and value should be in ALL_CAPS\n            values[Oas3Tools.sanitize(e.toString(), Oas3Tools.CaseStyle.ALL_CAPS)] = {\n                value: e,\n            };\n        });\n        // Store newly created Enum Object Type\n        def.graphQLType = new GraphQLEnumType({\n            name: def.graphQLTypeName,\n            values,\n        });\n        return def.graphQLType;\n    }\n}\n/**\n * Returns the GraphQL scalar type matching the given JSON schema type\n */\nfunction getScalarType({ def }) {\n    switch (def.targetGraphQLType) {\n        case 'id':\n            def.graphQLType = GraphQLID;\n            break;\n        case 'string':\n            def.graphQLType = GraphQLString;\n            break;\n        case 'integer':\n            def.graphQLType = GraphQLInt;\n            break;\n        case 'number':\n            def.graphQLType = GraphQLFloat;\n            break;\n        case 'float':\n            def.graphQLType = GraphQLFloat;\n            break;\n        case 'boolean':\n            def.graphQLType = GraphQLBoolean;\n            break;\n        case 'json':\n            def.graphQLType = GraphQLJSON;\n            break;\n        default:\n            throw new Error(`Cannot process schema type '${def.targetGraphQLType}'.`);\n    }\n    return def.graphQLType;\n}\n/**\n * Creates the fields object to be used by an (input) object type\n */\nfunction createFields({ def, links, operation, data, iteration, isInputObjectType, }) {\n    let fields = {};\n    const fieldTypeDefinitions = def.subDefinitions;\n    // Create fields for properties\n    for (const fieldTypeKey in fieldTypeDefinitions) {\n        const fieldTypeDefinition = fieldTypeDefinitions[fieldTypeKey];\n        const fieldSchema = fieldTypeDefinition.schema;\n        // Get object type describing the property\n        const objectType = getGraphQLType({\n            def: fieldTypeDefinition,\n            operation,\n            data,\n            iteration: iteration + 1,\n            isInputObjectType,\n        });\n        const requiredProperty = typeof def.required === 'object' && def.required.includes(fieldTypeKey);\n        // Finally, add the object type to the fields (using sanitized field name)\n        if (objectType) {\n            const saneFieldTypeKey = Oas3Tools.sanitize(fieldTypeKey, !data.options.simpleNames ? Oas3Tools.CaseStyle.camelCase : Oas3Tools.CaseStyle.simple);\n            const sanePropName = Oas3Tools.storeSaneName(saneFieldTypeKey, fieldTypeKey, data.saneMap);\n            fields[sanePropName] = {\n                type: requiredProperty ? new GraphQLNonNull(objectType) : objectType,\n                description: typeof fieldSchema === 'object' ? fieldSchema.description : null,\n            };\n        }\n        else {\n            handleWarning({\n                typeKey: 'CANNOT_GET_FIELD_TYPE',\n                message: `Cannot obtain GraphQL type for field '${fieldTypeKey}' in ` +\n                    `GraphQL type '${JSON.stringify(def.schema)}'.`,\n                data,\n                log: translationLog,\n            });\n        }\n    }\n    if (typeof links === 'object' && // Links are present\n        !isInputObjectType // Only object type (input object types cannot make use of links)\n    ) {\n        for (const saneLinkKey in links) {\n            translationLog(`Create link '${saneLinkKey}'...`);\n            // Check if key is already in fields\n            if (saneLinkKey in fields) {\n                handleWarning({\n                    typeKey: 'LINK_NAME_COLLISION',\n                    message: `Cannot create link '${saneLinkKey}' because parent ` +\n                        `object type already contains a field with the same (sanitized) name.`,\n                    data,\n                    log: translationLog,\n                });\n            }\n            else {\n                const link = links[saneLinkKey];\n                // Get linked operation\n                let linkedOpId;\n                // TODO: href is yet another alternative to operationRef and operationId\n                if (typeof link.operationId === 'string') {\n                    linkedOpId = link.operationId;\n                }\n                else if (typeof link.operationRef === 'string') {\n                    linkedOpId = linkOpRefToOpId({\n                        links,\n                        linkKey: saneLinkKey,\n                        operation,\n                        data,\n                    });\n                }\n                /**\n                 * linkedOpId may not be initialized because operationRef may lead to an\n                 * operation object that does not have an operationId\n                 */\n                if (typeof linkedOpId === 'string' && linkedOpId in data.operations) {\n                    const linkedOp = data.operations[linkedOpId];\n                    // Determine parameters provided via link\n                    const argsFromLink = link.parameters;\n                    // Get arguments that are not provided by the linked operation\n                    let dynamicParams = linkedOp.parameters;\n                    if (typeof argsFromLink === 'object') {\n                        dynamicParams = dynamicParams.filter(param => {\n                            return typeof argsFromLink[param.name] === 'undefined';\n                        });\n                    }\n                    // Get resolve function for link\n                    const linkResolver = data.options.resolverMiddleware(() => ({\n                        operation: linkedOp,\n                        argsFromLink: argsFromLink,\n                        data,\n                        baseUrl: data.options.baseUrl,\n                        requestOptions: data.options.requestOptions,\n                    }), getResolver);\n                    // Get arguments for link\n                    const args = getArgs({\n                        parameters: dynamicParams,\n                        operation: linkedOp,\n                        data,\n                    });\n                    // Get response object type\n                    const resObjectType = linkedOp.responseDefinition.graphQLType !== undefined\n                        ? linkedOp.responseDefinition.graphQLType\n                        : getGraphQLType({\n                            def: linkedOp.responseDefinition,\n                            operation,\n                            data,\n                            iteration: iteration + 1,\n                            isInputObjectType: false,\n                        });\n                    let description = link.description;\n                    if (data.options.equivalentToMessages && description) {\n                        description += `\\n\\nEquivalent to ${linkedOp.operationString}`;\n                    }\n                    // Finally, add the object type to the fields (using sanitized field name)\n                    // TODO: check if fields already has this field name\n                    fields[saneLinkKey] = {\n                        type: resObjectType,\n                        resolve: linkResolver,\n                        args,\n                        description,\n                    };\n                }\n                else {\n                    handleWarning({\n                        typeKey: 'UNRESOLVABLE_LINK',\n                        message: `Cannot resolve target of link '${saneLinkKey}'`,\n                        data,\n                        log: translationLog,\n                    });\n                }\n            }\n        }\n    }\n    fields = sortObject(fields);\n    return fields;\n}\n/**\n * Returns the operationId that an operationRef is associated to\n *\n * NOTE: If the operation does not natively have operationId, this function\n *  will try to produce an operationId the same way preprocessor.js does it.\n *\n *  Any changes to constructing operationIds in preprocessor.js should be\n *  reflected here.\n */\nfunction linkOpRefToOpId({ links, linkKey, operation, data }) {\n    const link = links[linkKey];\n    if (typeof link.operationRef === 'string') {\n        // TODO: external refs\n        const operationRef = link.operationRef;\n        let linkLocation;\n        let linkRelativePathAndMethod;\n        /**\n         * Example relative path: '#/paths/~12.0~1repositories~1{username}/get'\n         * Example absolute path: 'https://na2.gigantic-server.com/#/paths/~12.0~1repositories~1{username}/get'\n         * Extract relative path from relative path\n         */\n        if (operationRef.substring(0, 8) === '#/paths/') {\n            linkRelativePathAndMethod = operationRef;\n            // Extract relative path from absolute path\n        }\n        else {\n            /**\n             * '#' may exist in other places in the path\n             * '/#/' is more likely to point to the beginning of the path\n             */\n            const firstPathIndex = operationRef.indexOf('#/paths/');\n            // Found a relative path candidate\n            if (firstPathIndex !== -1) {\n                // Check to see if there are other relative path candidates\n                const lastPathIndex = operationRef.lastIndexOf('#/paths/');\n                if (firstPathIndex !== lastPathIndex) {\n                    handleWarning({\n                        typeKey: 'AMBIGUOUS_LINK',\n                        message: `The link '${linkKey}' in operation '${operation.operationString}' ` +\n                            `contains an ambiguous operationRef '${operationRef}', ` +\n                            `meaning it has multiple instances of the string '#/paths/'`,\n                        data,\n                        log: translationLog,\n                    });\n                    return;\n                }\n                linkLocation = operationRef.substring(0, firstPathIndex);\n                linkRelativePathAndMethod = operationRef.substring(firstPathIndex);\n                // Cannot find relative path candidate\n            }\n            else {\n                handleWarning({\n                    typeKey: 'UNRESOLVABLE_LINK',\n                    message: `The link '${linkKey}' in operation '${operation.operationString}' ` +\n                        `does not contain a valid path in operationRef '${operationRef}', ` +\n                        `meaning it does not contain a string '#/paths/'`,\n                    data,\n                    log: translationLog,\n                });\n                return;\n            }\n        }\n        // Infer operationId from relative path\n        if (typeof linkRelativePathAndMethod === 'string') {\n            let linkPath;\n            let linkMethod;\n            /**\n             * NOTE: I wish we could extract the linkedOpId by matching the\n             * linkedOpObject with an operation in data and extracting the operationId\n             * there but that does not seem to be possible especiially because you\n             * need to know the operationId just to access the operations so what I\n             * have to do is reconstruct the operationId the same way preprocessing\n             * does it\n             */\n            /**\n             * linkPath should be the path followed by the method\n             *\n             * Find the slash that divides the path from the method\n             */\n            const pivotSlashIndex = linkRelativePathAndMethod.lastIndexOf('/');\n            // Check if there are any '/' in the linkPath\n            if (pivotSlashIndex !== -1) {\n                // Get method\n                // Check if there is a method at the end of the linkPath\n                if (pivotSlashIndex !== linkRelativePathAndMethod.length - 1) {\n                    // Start at +1 because we do not want the starting '/'\n                    linkMethod = linkRelativePathAndMethod.substring(pivotSlashIndex + 1);\n                    // Check if method is a valid method\n                    if (!Oas3Tools.OAS_OPERATIONS.includes(linkMethod)) {\n                        handleWarning({\n                            typeKey: 'UNRESOLVABLE_LINK',\n                            message: `The operationRef '${operationRef}' contains an ` + `invalid HTTP method '${linkMethod}'`,\n                            data,\n                            log: translationLog,\n                        });\n                        return;\n                    }\n                    // There is no method at the end of the path\n                }\n                else {\n                    handleWarning({\n                        typeKey: 'UNRESOLVABLE_LINK',\n                        message: `The operationRef '${operationRef}' does not contain an` + `HTTP method`,\n                        data,\n                        log: translationLog,\n                    });\n                    return;\n                }\n                /**\n                 * Get path\n                 *\n                 * Substring starts at index 8 and ends at pivotSlashIndex to exclude\n                 * the '/'s at the ends of the path\n                 *\n                 * TODO: improve removing '/#/paths'?\n                 */\n                linkPath = linkRelativePathAndMethod.substring(8, pivotSlashIndex);\n                /**\n                 * linkPath is currently a JSON Pointer\n                 *\n                 * Revert the escaped '/', represented by '~1', to form intended path\n                 */\n                linkPath = linkPath.replace(/~1/g, '/');\n                // Find the right oas\n                const oas = typeof linkLocation === 'undefined' ? operation.oas : getOasFromLinkLocation({ linkLocation, link, data });\n                // If the link was external, make sure that an OAS could be identified\n                if (typeof oas !== 'undefined') {\n                    if (typeof linkMethod === 'string' && typeof linkPath === 'string') {\n                        let linkedOpId;\n                        if (linkPath in oas.paths && linkMethod in oas.paths[linkPath]) {\n                            const linkedOpObject = oas.paths[linkPath][linkMethod];\n                            if ('operationId' in linkedOpObject) {\n                                linkedOpId = linkedOpObject.operationId;\n                            }\n                        }\n                        if (typeof linkedOpId !== 'string') {\n                            linkedOpId = Oas3Tools.generateOperationId(linkMethod, linkPath);\n                        }\n                        if (linkedOpId in data.operations) {\n                            return linkedOpId;\n                        }\n                        else {\n                            handleWarning({\n                                typeKey: 'UNRESOLVABLE_LINK',\n                                message: `The link '${linkKey}' references an operation with ` +\n                                    `operationId '${linkedOpId}' but no such operation exists. ` +\n                                    `Note that the operationId may be autogenerated but ` +\n                                    `regardless, the link could not be matched to an operation.`,\n                                data,\n                                log: translationLog,\n                            });\n                        }\n                        // Path and method could not be found\n                    }\n                    else {\n                        handleWarning({\n                            typeKey: 'UNRESOLVABLE_LINK',\n                            message: `Cannot identify path and/or method, '${linkPath} and ` +\n                                `'${linkMethod}' respectively, from operationRef ` +\n                                `'${operationRef}' in link '${linkKey}'`,\n                            data,\n                            log: translationLog,\n                        });\n                    }\n                    // External link could not be resolved\n                }\n                else {\n                    handleWarning({\n                        typeKey: 'UNRESOLVABLE_LINK',\n                        message: `The link '${link.operationRef}' references an external OAS ` + `but it was not provided`,\n                        data,\n                        log: translationLog,\n                    });\n                }\n                // Cannot split relative path into path and method sections\n            }\n            else {\n                handleWarning({\n                    typeKey: 'UNRESOLVABLE_LINK',\n                    message: `Cannot extract path and/or method from operationRef ` + `'${operationRef}' in link '${linkKey}'`,\n                    data,\n                    log: translationLog,\n                });\n            }\n            // Cannot extract relative path from absolute path\n        }\n        else {\n            handleWarning({\n                typeKey: 'UNRESOLVABLE_LINK',\n                message: `Cannot extract path and/or method from operationRef ` + `'${operationRef}' in link '${linkKey}'`,\n                data,\n                log: translationLog,\n            });\n        }\n    }\n}\n/**\n * Creates the arguments for resolving a field\n */\nexport function getArgs({ requestPayloadDef, parameters, operation, data }) {\n    let args = {};\n    // Handle params:\n    for (const parameter of parameters) {\n        // We need at least a name\n        if (typeof parameter.name !== 'string') {\n            handleWarning({\n                typeKey: 'INVALID_OAS',\n                message: `The operation '${operation.operationString}' contains a ` +\n                    `parameter '${JSON.stringify(parameter)}' with no 'name' property`,\n                data,\n                log: translationLog,\n            });\n            continue;\n        }\n        // If this parameter is provided via options, ignore\n        if (typeof data.options === 'object') {\n            switch (parameter.in) {\n                case 'header':\n                    // Check header option\n                    if (typeof data.options.headers === 'object' && parameter.name in data.options.headers) {\n                        continue;\n                    }\n                    // Check requestOptions option\n                    if (typeof data.options.requestOptions === 'object' &&\n                        typeof data.options.requestOptions.headers === 'object' &&\n                        parameter.name in data.options.requestOptions.headers) {\n                        continue;\n                    }\n                    break;\n                case 'query':\n                    // Check header option\n                    if (typeof data.options.qs === 'object' && parameter.name in data.options.qs) {\n                        continue;\n                    }\n                    break;\n            }\n        }\n        /**\n         * Determine type of parameter\n         *\n         * The type of the parameter can either be contained in the \"schema\" field\n         * or the \"content\" field (but not both)\n         */\n        let schema;\n        if (typeof parameter.schema === 'object') {\n            schema = parameter.schema;\n        }\n        else if (typeof parameter.content === 'object') {\n            if (typeof parameter.content['application/json'] === 'object' &&\n                typeof parameter.content['application/json'].schema === 'object') {\n                schema = parameter.content['application/json'].schema;\n            }\n            else {\n                handleWarning({\n                    typeKey: 'NON_APPLICATION_JSON_SCHEMA',\n                    message: `The operation '${operation.operationString}' contains a ` +\n                        `parameter '${JSON.stringify(parameter)}' that has a 'content' ` +\n                        `property but no schemas in application/json format. The ` +\n                        `parameter will not be created`,\n                    data,\n                    log: translationLog,\n                });\n                continue;\n            }\n        }\n        else {\n            // Invalid OAS according to 3.0.2\n            handleWarning({\n                typeKey: 'INVALID_OAS',\n                message: `The operation '${operation.operationString}' contains a ` +\n                    `parameter '${JSON.stringify(parameter)}' with no 'schema' or ` +\n                    `'content' property`,\n                data,\n                log: translationLog,\n            });\n            continue;\n        }\n        /**\n         * Resolving the reference is necessary later in the code and by doing it,\n         * we can avoid doing it a second time in resolveRev()\n         */\n        if ('$ref' in schema) {\n            schema = Oas3Tools.resolveRef(schema.$ref, operation.oas);\n        }\n        // TODO: remove\n        const paramDef = createDataDef({ fromSchema: parameter.name }, schema, true, data);\n        // @ts-ignore\n        const type = getGraphQLType({\n            def: paramDef,\n            operation,\n            data,\n            iteration: 0,\n            isInputObjectType: true,\n        });\n        /**\n         * Sanitize the argument name\n         *\n         * NOTE: when matching these parameters back to requests, we need to again\n         * use the real parameter name\n         */\n        const saneName = Oas3Tools.sanitize(parameter.name, !data.options.simpleNames ? Oas3Tools.CaseStyle.camelCase : Oas3Tools.CaseStyle.simple);\n        // Parameters are not required when a default exists:\n        let hasDefault = false;\n        if (typeof parameter.schema === 'object') {\n            let schema = parameter.schema;\n            if (typeof schema.$ref === 'string') {\n                schema = Oas3Tools.resolveRef(parameter.schema.$ref, operation.oas);\n            }\n            if (typeof schema.default !== 'undefined') {\n                hasDefault = true;\n            }\n        }\n        const paramRequired = parameter.required && !hasDefault;\n        args[saneName] = {\n            type: paramRequired ? new GraphQLNonNull(type) : type,\n            description: parameter.description,\n        };\n    }\n    // Add limit argument\n    if (data.options.addLimitArgument &&\n        typeof operation.responseDefinition === 'object' &&\n        operation.responseDefinition.schema.type === 'array' &&\n        // Only add limit argument to lists of object types, not to lists of scalar types\n        (operation.responseDefinition.subDefinitions.schema.type === 'object' ||\n            operation.responseDefinition.subDefinitions.schema.type === 'array')) {\n        // Make sure slicing arguments will not overwrite preexisting arguments\n        if ('limit' in args) {\n            handleWarning({\n                typeKey: 'LIMIT_ARGUMENT_NAME_COLLISION',\n                message: `The 'limit' argument cannot be added ` +\n                    `because of a preexisting argument in ` +\n                    `operation ${operation.operationString}`,\n                data,\n                log: translationLog,\n            });\n        }\n        else {\n            args.limit = {\n                type: GraphQLInt,\n                description: `Auto-generated argument that limits the size of ` +\n                    `returned list of objects/list, selecting the first \\`n\\` ` +\n                    `elements of the list`,\n            };\n        }\n    }\n    // Handle request payload (if present):\n    if (typeof requestPayloadDef === 'object') {\n        const reqObjectType = getGraphQLType({\n            def: requestPayloadDef,\n            data,\n            operation,\n            isInputObjectType: true,\n        });\n        // Sanitize the argument name\n        const saneName = data.options.genericPayloadArgName\n            ? 'requestBody'\n            : Oas3Tools.uncapitalize(requestPayloadDef.graphQLInputObjectTypeName); // Already sanitized\n        const reqRequired = typeof operation === 'object' && typeof operation.payloadRequired === 'boolean'\n            ? operation.payloadRequired\n            : false;\n        args[saneName] = {\n            type: reqRequired ? new GraphQLNonNull(reqObjectType) : reqObjectType,\n            // TODO: addendum to the description explaining this is the request body\n            description: requestPayloadDef.schema.description,\n        };\n    }\n    args = sortObject(args);\n    return args;\n}\n/**\n * Used in the context of links, specifically those using an external operationRef\n * If the reference is an absolute reference, determine the type of location\n *\n * For example, name reference, file path, web-hosted OAS link, etc.\n */\nfunction getLinkLocationType() {\n    // TODO: currently we only support the title as a link location\n    return 'title';\n}\n/**\n * Used in the context of links, specifically those using an external operationRef\n * Based on the location of the OAS, retrieve said OAS\n */\nfunction getOasFromLinkLocation({ linkLocation, link, data, }) {\n    // May be an external reference\n    switch (getLinkLocationType()) {\n        case 'title':\n            // Get the possible\n            const possibleOass = data.oass.filter(oas => {\n                return oas.info.title === linkLocation;\n            });\n            // Check if there are an ambiguous OASs\n            if (possibleOass.length === 1) {\n                // No ambiguity\n                return possibleOass[0];\n            }\n            else if (possibleOass.length > 1) {\n                // Some ambiguity\n                handleWarning({\n                    typeKey: 'AMBIGUOUS_LINK',\n                    message: `The operationRef '${link.operationRef}' references an ` +\n                        `OAS '${linkLocation}' but multiple OASs share the same title`,\n                    data,\n                    log: translationLog,\n                });\n            }\n            else {\n                // No OAS had the expected title\n                handleWarning({\n                    typeKey: 'UNRESOLVABLE_LINK',\n                    message: `The operationRef '${link.operationRef}' references an ` +\n                        `OAS '${linkLocation}' but no such OAS was provided`,\n                    data,\n                    log: translationLog,\n                });\n            }\n            break;\n        // // TODO\n        // case 'url':\n        //   break\n        // // TODO\n        // case 'file':\n        //   break\n        // TODO: should title be default?\n        // In cases of names like api.io\n        default:\n            handleWarning({\n                typeKey: 'UNRESOLVABLE_LINK',\n                message: `The link location of the operationRef ` +\n                    `'${link.operationRef}' is currently not supported\\n` +\n                    `Currently only the title of the OAS is supported`,\n                data,\n                log: translationLog,\n            });\n    }\n}\n//# sourceMappingURL=schema_builder.js.map","// Copyright IBM Corp. 2018. All Rights Reserved.\n// Node module: openapi-to-graphql\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n/**\n * Utilities related to GraphQL.\n */\nimport { GraphQLObjectType, GraphQLString } from 'graphql';\n/**\n * Returns empty GraphQLObjectType.\n */\nexport function getEmptyObjectType(name) {\n    return new GraphQLObjectType({\n        name: name + 'Placeholder',\n        description: 'Placeholder object',\n        fields: {\n            message: {\n                type: GraphQLString,\n                description: 'Placeholder field',\n                resolve: () => {\n                    return 'This is a placeholder field.';\n                },\n            },\n        },\n    });\n}\n//# sourceMappingURL=graphql_tools.js.map","// Copyright IBM Corp. 2018. All Rights Reserved.\n// Node module: openapi-to-graphql\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n/**\n * Functions to create viewers that allow users to pass credentials to resolve\n * functions used by OpenAPI-to-GraphQL.\n */\n// Type imports:\nimport { GraphQLString, GraphQLObjectType, GraphQLNonNull, } from 'graphql';\n// Imports:\nimport { getGraphQLType } from './schema_builder';\nimport * as Oas3Tools from './oas_3_tools';\nimport debug from 'debug';\nimport { handleWarning, sortObject } from './utils';\nimport { createDataDef } from './preprocessor';\nconst translationLog = debug('translation');\n/**\n * Load the field object in the appropriate root object\n *\n * i.e. inside either rootQueryFields/rootMutationFields or inside\n * rootQueryFields/rootMutationFields for further processing\n */\nexport function createAndLoadViewer(queryFields, data, isMutation = false) {\n    const results = {};\n    /**\n     * To ensure that viewers have unique names, we add a numerical postfix.\n     *\n     * This object keeps track of what the postfix should be.\n     *\n     * The key is the security scheme type and the value is\n     * the current highest postfix used for viewers of that security scheme type.\n     */\n    const viewerNamePostfix = {};\n    /**\n     * Used to collect all fields in the given querFields object, no matter which\n     * protocol. Used to populate anyAuthViewer.\n     */\n    const anyAuthFields = {};\n    for (const protocolName in queryFields) {\n        Object.assign(anyAuthFields, queryFields[protocolName]);\n        /**\n         * Check if the name has already been used (i.e. in the list)\n         * if so, create a new name and add it to the list\n         */\n        const securityType = data.security[protocolName].def.type;\n        let viewerType;\n        /**\n         * HTTP is not an authentication protocol\n         * HTTP covers a number of different authentication type\n         * change the typeName to match the exact authentication type (e.g. basic\n         * authentication)\n         */\n        if (securityType === 'http') {\n            const scheme = data.security[protocolName].def.scheme;\n            switch (scheme) {\n                case 'basic':\n                    viewerType = 'basicAuth';\n                    break;\n                default:\n                    handleWarning({\n                        typeKey: 'UNSUPPORTED_HTTP_SECURITY_SCHEME',\n                        message: `Currently unsupported HTTP authentication protocol ` + `type 'http' and scheme '${scheme}'`,\n                        data,\n                        log: translationLog,\n                    });\n                    continue;\n            }\n        }\n        else {\n            viewerType = securityType;\n        }\n        // Create name for the viewer\n        let viewerName = !isMutation\n            ? Oas3Tools.sanitize(`viewer ${viewerType}`, Oas3Tools.CaseStyle.camelCase)\n            : Oas3Tools.sanitize(`mutation viewer ${viewerType}`, Oas3Tools.CaseStyle.camelCase);\n        // Ensure unique viewer name\n        // If name already exists, append a number at the end of the name\n        if (!(viewerType in viewerNamePostfix)) {\n            viewerNamePostfix[viewerType] = 1;\n        }\n        else {\n            viewerName += ++viewerNamePostfix[viewerType];\n        }\n        // Add the viewer object type to the specified root query object type\n        results[viewerName] = getViewerOT(viewerName, protocolName, securityType, queryFields[protocolName], data);\n    }\n    // Create name for the AnyAuth viewer\n    const anyAuthObjectName = !isMutation ? 'viewerAnyAuth' : 'mutationViewerAnyAuth';\n    // Add the AnyAuth object type to the specified root query object type\n    results[anyAuthObjectName] = getViewerAnyAuthOT(anyAuthObjectName, anyAuthFields, data);\n    return results;\n}\n/**\n * Gets the viewer Object, resolve function, and arguments\n */\nconst getViewerOT = (name, protocolName, securityType, queryFields, data) => {\n    const scheme = data.security[protocolName];\n    // Resolve function:\n    const resolve = (_root, args, _ctx) => {\n        const security = {};\n        const saneProtocolName = Oas3Tools.sanitize(protocolName, Oas3Tools.CaseStyle.camelCase);\n        security[Oas3Tools.storeSaneName(saneProtocolName, protocolName, data.saneMap)] = args;\n        /**\n         * Viewers are always root, so we can instantiate _openAPIToGraphQL here without\n         * previously checking for its existence\n         */\n        return {\n            _openAPIToGraphQL: {\n                security,\n            },\n        };\n    };\n    // Arguments:\n    /**\n     * Do not sort because they are already \"sorted\" in preprocessing.\n     * Otherwise, for basic auth, \"password\" will appear before \"username\"\n     */\n    const args = {};\n    if (typeof scheme === 'object') {\n        for (const parameterName in scheme.parameters) {\n            args[parameterName] = { type: new GraphQLNonNull(GraphQLString) };\n        }\n    }\n    let typeDescription = `A viewer for security scheme '${protocolName}'`;\n    /**\n     * HTTP authentication uses different schemes. It is not sufficient to name\n     * only the security type\n     */\n    let description = securityType === 'http'\n        ? `A viewer that wraps all operations authenticated via security scheme ` +\n            `'${protocolName}', which is of type 'http' '${scheme.def.scheme}'`\n        : `A viewer that wraps all operations authenticated via security scheme ` +\n            `'${protocolName}', which is of type '${securityType}'`;\n    if (data.oass.length !== 1) {\n        typeDescription += ` in OAS '${scheme.oas.info.title}'`;\n        description = `, in OAS '${scheme.oas.info.title}`;\n    }\n    return {\n        type: new GraphQLObjectType({\n            name: Oas3Tools.capitalize(name),\n            description: typeDescription,\n            fields: () => queryFields,\n        }),\n        resolve,\n        args,\n        description,\n    };\n};\n/**\n * Create an object containing an AnyAuth viewer, its resolve function,\n * and its args.\n */\nconst getViewerAnyAuthOT = (name, queryFields, data) => {\n    let args = {};\n    for (const protocolName in data.security) {\n        // Create input object types for the viewer arguments\n        const def = createDataDef({ fromRef: protocolName }, data.security[protocolName].schema, true, data);\n        const type = getGraphQLType({\n            def,\n            data,\n            isInputObjectType: true,\n        });\n        const saneProtocolName = Oas3Tools.sanitize(protocolName, Oas3Tools.CaseStyle.camelCase);\n        args[Oas3Tools.storeSaneName(saneProtocolName, protocolName, data.saneMap)] = { type };\n    }\n    args = sortObject(args);\n    // Pass object containing security information to fields\n    const resolve = (_root, args, _ctx) => {\n        return {\n            _openAPIToGraphQL: {\n                security: args,\n            },\n        };\n    };\n    return {\n        type: new GraphQLObjectType({\n            name: Oas3Tools.capitalize(name),\n            description: 'Warning: Not every request will work with this viewer type',\n            fields: () => queryFields,\n        }),\n        resolve,\n        args,\n        description: `A viewer that wraps operations for all available ` + `authentication mechanisms`,\n    };\n};\n//# sourceMappingURL=auth_builder.js.map","// Copyright IBM Corp. 2018. All Rights Reserved.\n// Node module: openapi-to-graphql\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\nimport { GraphQLSchema, GraphQLObjectType } from 'graphql';\n// Imports:\nimport { getGraphQLType, getArgs } from './schema_builder';\nimport { getResolver } from './resolver_builder';\nimport * as GraphQLTools from './graphql_tools';\nimport { preprocessOas } from './preprocessor';\nimport * as Oas3Tools from './oas_3_tools';\nimport { createAndLoadViewer } from './auth_builder';\nimport debug from 'debug';\nimport { sortObject, handleWarning } from './utils';\nconst translationLog = debug('translation');\n/**\n * Creates a GraphQL interface from the given OpenAPI Specification (2 or 3).\n */\nexport async function createGraphQLSchema(spec, options) {\n    if (typeof options === 'undefined') {\n        options = {};\n    }\n    // Setting default options\n    options.strict = typeof options.strict === 'boolean' ? options.strict : false;\n    // Schema options\n    options.operationIdFieldNames =\n        typeof options.operationIdFieldNames === 'boolean' ? options.operationIdFieldNames : false;\n    options.fillEmptyResponses = typeof options.fillEmptyResponses === 'boolean' ? options.fillEmptyResponses : false;\n    options.addLimitArgument = typeof options.addLimitArgument === 'boolean' ? options.addLimitArgument : false;\n    options.genericPayloadArgName =\n        typeof options.genericPayloadArgName === 'boolean' ? options.genericPayloadArgName : false;\n    options.simpleNames = typeof options.simpleNames === 'boolean' ? options.simpleNames : false;\n    options.singularNames = typeof options.singularNames === 'boolean' ? options.singularNames : false;\n    // Authentication options\n    options.viewer = typeof options.viewer === 'boolean' ? options.viewer : true;\n    options.sendOAuthTokenInQuery =\n        typeof options.sendOAuthTokenInQuery === 'boolean' ? options.sendOAuthTokenInQuery : false;\n    // Logging options\n    options.provideErrorExtensions =\n        typeof options.provideErrorExtensions === 'boolean' ? options.provideErrorExtensions : true;\n    options.equivalentToMessages =\n        typeof options.equivalentToMessages === 'boolean' ? options.equivalentToMessages : true;\n    options.fetch = typeof options.fetch === 'function' ? options.fetch : await import('cross-fetch').then(m => m.fetch);\n    options.resolverMiddleware =\n        typeof options.resolverMiddleware === 'function'\n            ? options.resolverMiddleware\n            : (resolverFactoryParams, factory) => factory(resolverFactoryParams);\n    options.report = {\n        warnings: [],\n        numOps: 0,\n        numOpsQuery: 0,\n        numOpsMutation: 0,\n        numQueriesCreated: 0,\n        numMutationsCreated: 0,\n    };\n    options.skipSchemaValidation =\n        typeof options.skipSchemaValidation === 'boolean' ? options.skipSchemaValidation : false;\n    let oass;\n    if (Array.isArray(spec)) {\n        /**\n         * Convert all non-OAS 3.0.x into OAS 3.0.x\n         */\n        oass = await Promise.all(spec.map(ele => {\n            return Oas3Tools.getValidOAS3(ele, options);\n        }));\n    }\n    else {\n        /**\n         * Check if the spec is a valid OAS 3.0.x\n         * If the spec is OAS 2.0, attempt to translate it into 3.0.x, then try to\n         * translate the spec into a GraphQL schema\n         */\n        oass = [await Oas3Tools.getValidOAS3(spec, options)];\n    }\n    const { schema, report } = await translateOpenAPIToGraphQL(oass, options);\n    return {\n        schema,\n        report,\n    };\n}\n/**\n * Creates a GraphQL interface from the given OpenAPI Specification 3.0.x\n */\nasync function translateOpenAPIToGraphQL(oass, { strict, report, \n// Schema options\noperationIdFieldNames, fillEmptyResponses, addLimitArgument, idFormats, selectQueryOrMutationField, genericPayloadArgName, simpleNames, singularNames, \n// Resolver options\nheaders, qs, requestOptions, baseUrl, customResolvers, fetch, resolverMiddleware, \n// Authentication options\nviewer, tokenJSONpath, sendOAuthTokenInQuery, \n// Logging options\nprovideErrorExtensions, equivalentToMessages, }) {\n    const options = {\n        strict,\n        report,\n        // Schema options\n        operationIdFieldNames,\n        fillEmptyResponses,\n        addLimitArgument,\n        idFormats,\n        selectQueryOrMutationField,\n        genericPayloadArgName,\n        simpleNames,\n        singularNames,\n        // Resolver options\n        headers,\n        qs,\n        requestOptions,\n        baseUrl,\n        customResolvers,\n        fetch,\n        resolverMiddleware,\n        // Authentication options\n        viewer,\n        tokenJSONpath,\n        sendOAuthTokenInQuery,\n        // Logging options\n        provideErrorExtensions,\n        equivalentToMessages,\n    };\n    translationLog(`Options: ${JSON.stringify(options)}`);\n    /**\n     * Extract information from the OASs and put it inside a data structure that\n     * is easier for OpenAPI-to-GraphQL to use\n     */\n    const data = preprocessOas(oass, options);\n    preliminaryChecks(options, data);\n    /**\n     * Create GraphQL fields for every operation and structure them based on their\n     * characteristics (query vs. mutation, auth vs. non-auth).\n     */\n    let queryFields = {};\n    let mutationFields = {};\n    let authQueryFields = {};\n    let authMutationFields = {};\n    Object.entries(data.operations).forEach(([operationId, operation]) => {\n        translationLog(`Process operation '${operation.operationString}'...`);\n        const field = getFieldForOperation(operation, options.baseUrl, data, requestOptions);\n        const saneOperationId = Oas3Tools.sanitize(operationId, Oas3Tools.CaseStyle.camelCase);\n        // Check if the operation should be added as a Query or Mutation field\n        if (!operation.isMutation) {\n            let fieldName = !singularNames\n                ? Oas3Tools.uncapitalize(operation.responseDefinition.graphQLTypeName)\n                : Oas3Tools.sanitize(Oas3Tools.inferResourceNameFromPath(operation.path), Oas3Tools.CaseStyle.camelCase);\n            if (operation.inViewer) {\n                for (const securityRequirement of operation.securityRequirements) {\n                    if (typeof authQueryFields[securityRequirement] !== 'object') {\n                        authQueryFields[securityRequirement] = {};\n                    }\n                    // Avoid overwriting fields that return the same data:\n                    if (fieldName in authQueryFields[securityRequirement] ||\n                        /**\n                         * If the option is set operationIdFieldNames, the fieldName is\n                         * forced to be the operationId\n                         */\n                        operationIdFieldNames) {\n                        fieldName = Oas3Tools.storeSaneName(saneOperationId, operationId, data.saneMap);\n                    }\n                    if (fieldName in authQueryFields[securityRequirement]) {\n                        handleWarning({\n                            typeKey: 'DUPLICATE_FIELD_NAME',\n                            message: `Multiple operations have the same name ` +\n                                `'${fieldName}' and security requirement ` +\n                                `'${securityRequirement}'. GraphQL field names must be ` +\n                                `unique so only one can be added to the authentication ` +\n                                `viewer. Operation '${operation.operationString}' will be ignored.`,\n                            data,\n                            log: translationLog,\n                        });\n                    }\n                    else {\n                        authQueryFields[securityRequirement][fieldName] = field;\n                    }\n                }\n            }\n            else {\n                // Avoid overwriting fields that return the same data:\n                if (fieldName in queryFields ||\n                    /**\n                     * If the option is set operationIdFieldNames, the fieldName is\n                     * forced to be the operationId\n                     */\n                    operationIdFieldNames) {\n                    fieldName = Oas3Tools.storeSaneName(saneOperationId, operationId, data.saneMap);\n                }\n                if (fieldName in queryFields) {\n                    handleWarning({\n                        typeKey: 'DUPLICATE_FIELD_NAME',\n                        message: `Multiple operations have the same name ` +\n                            `'${fieldName}'. GraphQL field names must be ` +\n                            `unique so only one can be added to the Query object. ` +\n                            `Operation '${operation.operationString}' will be ignored.`,\n                        data,\n                        log: translationLog,\n                    });\n                }\n                else {\n                    queryFields[fieldName] = field;\n                }\n            }\n        }\n        else {\n            let saneFieldName;\n            if (!singularNames) {\n                /**\n                 * Use operationId to avoid problems differentiating operations with the\n                 * same path but differnet methods\n                 */\n                saneFieldName = Oas3Tools.storeSaneName(saneOperationId, operationId, data.saneMap);\n            }\n            else {\n                const fieldName = `${operation.method}${Oas3Tools.inferResourceNameFromPath(operation.path)}`;\n                saneFieldName = Oas3Tools.storeSaneName(Oas3Tools.sanitize(fieldName, Oas3Tools.CaseStyle.camelCase), fieldName, data.saneMap);\n            }\n            if (operation.inViewer) {\n                for (const securityRequirement of operation.securityRequirements) {\n                    if (typeof authMutationFields[securityRequirement] !== 'object') {\n                        authMutationFields[securityRequirement] = {};\n                    }\n                    if (saneFieldName in authMutationFields[securityRequirement]) {\n                        handleWarning({\n                            typeKey: 'DUPLICATE_FIELD_NAME',\n                            message: `Multiple operations have the same name ` +\n                                `'${saneFieldName}' and security requirement ` +\n                                `'${securityRequirement}'. GraphQL field names must be ` +\n                                `unique so only one can be added to the authentication ` +\n                                `viewer. Operation '${operation.operationString}' will be ignored.`,\n                            data,\n                            log: translationLog,\n                        });\n                    }\n                    else {\n                        authMutationFields[securityRequirement][saneFieldName] = field;\n                    }\n                }\n            }\n            else {\n                if (saneFieldName in mutationFields) {\n                    handleWarning({\n                        typeKey: 'DUPLICATE_FIELD_NAME',\n                        message: `Multiple operations have the same name ` +\n                            `'${saneFieldName}'. GraphQL field names must be ` +\n                            `unique so only one can be added to the Mutation object. ` +\n                            `Operation '${operation.operationString}' will be ignored.`,\n                        data,\n                        log: translationLog,\n                    });\n                }\n                else {\n                    mutationFields[saneFieldName] = field;\n                }\n            }\n        }\n    });\n    // Sorting fields\n    queryFields = sortObject(queryFields);\n    mutationFields = sortObject(mutationFields);\n    authQueryFields = sortObject(authQueryFields);\n    Object.keys(authQueryFields).forEach((key) => {\n        authQueryFields[key] = sortObject(authQueryFields[key]);\n    });\n    authMutationFields = sortObject(authMutationFields);\n    Object.keys(authMutationFields).forEach((key) => {\n        authMutationFields[key] = sortObject(authMutationFields[key]);\n    });\n    /**\n     * Count created queries / mutations\n     */\n    options.report.numQueriesCreated =\n        Object.keys(queryFields).length +\n            Object.keys(authQueryFields).reduce((sum, key) => {\n                return sum + Object.keys(authQueryFields[key]).length;\n            }, 0);\n    options.report.numMutationsCreated =\n        Object.keys(mutationFields).length +\n            Object.keys(authMutationFields).reduce((sum, key) => {\n                return sum + Object.keys(authMutationFields[key]).length;\n            }, 0);\n    /**\n     * Organize created queries / mutations into viewer objects.\n     */\n    if (Object.keys(authQueryFields).length > 0) {\n        Object.assign(queryFields, createAndLoadViewer(authQueryFields, data, false));\n    }\n    if (Object.keys(authMutationFields).length > 0) {\n        Object.assign(mutationFields, createAndLoadViewer(authMutationFields, data, true));\n    }\n    /**\n     * Build up the schema\n     */\n    const schemaConfig = {\n        query: Object.keys(queryFields).length > 0\n            ? new GraphQLObjectType({\n                name: 'Query',\n                description: 'The start of any query',\n                fields: queryFields,\n            })\n            : GraphQLTools.getEmptyObjectType('Query'),\n        mutation: Object.keys(mutationFields).length > 0\n            ? new GraphQLObjectType({\n                name: 'Mutation',\n                description: 'The start of any mutation',\n                fields: mutationFields,\n            })\n            : null,\n    };\n    /**\n     * Fill in yet undefined object types to avoid GraphQLSchema from breaking.\n     *\n     * The reason: once creating the schema, the 'fields' thunks will resolve and\n     * if a field references an undefined object types, GraphQL will throw.\n     */\n    Object.entries(data.operations).forEach(([opId, operation]) => {\n        if (typeof operation.responseDefinition.graphQLType === 'undefined') {\n            operation.responseDefinition.graphQLType = GraphQLTools.getEmptyObjectType(operation.responseDefinition.graphQLTypeName);\n        }\n    });\n    const schema = new GraphQLSchema(schemaConfig);\n    return { schema, report: options.report };\n}\n/**\n * Creates the field object for the given operation.\n */\nfunction getFieldForOperation(operation, baseUrl, data, requestOptions) {\n    // Create GraphQL Type for response:\n    const type = getGraphQLType({\n        def: operation.responseDefinition,\n        data,\n        operation,\n    });\n    // Create resolve function:\n    const payloadSchemaName = operation.payloadDefinition ? operation.payloadDefinition.graphQLInputObjectTypeName : null;\n    const resolve = data.options.resolverMiddleware(() => ({\n        operation,\n        payloadName: payloadSchemaName,\n        data,\n        baseUrl,\n        requestOptions,\n    }), getResolver);\n    // Create args:\n    const args = getArgs({\n        /**\n         * Even though these arguments seems redundent because of the operation\n         * argument, the function cannot be refactored because it is also used to\n         * create arguments for links. The operation argument is really used to pass\n         * data to other functions.\n         */\n        requestPayloadDef: operation.payloadDefinition,\n        parameters: operation.parameters,\n        operation,\n        data,\n    });\n    return {\n        type,\n        resolve,\n        args,\n        description: operation.description,\n    };\n}\n/**\n * Ensures that the options are valid\n */\nfunction preliminaryChecks(options, data) {\n    // Check if OASs have unique titles\n    const titles = data.oass.map(oas => {\n        return oas.info.title;\n    });\n    // Find duplicates among titles\n    new Set(titles.filter((title, index) => {\n        return titles.indexOf(title) !== index;\n    })).forEach(title => {\n        handleWarning({\n            typeKey: 'MULTIPLE_OAS_SAME_TITLE',\n            message: `Multiple OAS share the same title '${title}'`,\n            data,\n            log: translationLog,\n        });\n    });\n    // Check customResolvers\n    if (typeof options.customResolvers === 'object') {\n        // Check that all OASs that are referenced in the customResolvers are provided\n        Object.keys(options.customResolvers)\n            .filter(title => {\n            // If no OAS contains this title\n            return !data.oass.some(oas => {\n                return title === oas.info.title;\n            });\n        })\n            .forEach(title => {\n            handleWarning({\n                typeKey: 'CUSTOM_RESOLVER_UNKNOWN_OAS',\n                message: `Custom resolvers reference OAS '${title}' but no such ` + `OAS was provided`,\n                data,\n                log: translationLog,\n            });\n        });\n        // TODO: Only run the following test on OASs that exist. See previous check.\n        Object.keys(options.customResolvers).forEach(title => {\n            // Get all operations from a particular OAS\n            const operations = Object.values(data.operations).filter(operation => {\n                return title === operation.oas.info.title;\n            });\n            Object.keys(options.customResolvers[title]).forEach(path => {\n                Object.keys(options.customResolvers[title][path]).forEach(method => {\n                    if (!operations.some(operation => {\n                        return path === operation.path && method === operation.method;\n                    })) {\n                        handleWarning({\n                            typeKey: 'CUSTOM_RESOLVER_UNKNOWN_PATH_METHOD',\n                            message: `A custom resolver references an operation with ` +\n                                `path '${path}' and method '${method}' but no such operation ` +\n                                `exists in OAS '${title}'`,\n                            data,\n                            log: translationLog,\n                        });\n                    }\n                });\n            });\n        });\n    }\n}\nexport { sanitize, CaseStyle } from './oas_3_tools';\nexport { GraphQLOperationType } from './types/graphql';\n//# sourceMappingURL=index.js.map","import { readFileOrUrlWithCache, parseInterpolationStrings, getInterpolatedHeadersFactory, getHeadersObject, } from '@graphql-mesh/utils';\nimport { createGraphQLSchema } from './openapi-to-graphql';\nimport { fetchache, Request } from 'fetchache';\nconst handler = {\n    async getMeshSource({ config, cache }) {\n        var _a, _b, _c;\n        const path = config.source;\n        const spec = await readFileOrUrlWithCache(path, cache, {\n            headers: config.schemaHeaders,\n        });\n        const fetch = (...args) => fetchache(args[0] instanceof Request ? args[0] : new Request(...args), cache);\n        const headersFactory = getInterpolatedHeadersFactory(config.operationHeaders);\n        const { schema } = await createGraphQLSchema(spec, {\n            fetch,\n            baseUrl: config.baseUrl,\n            skipSchemaValidation: config.skipSchemaValidation,\n            operationIdFieldNames: true,\n            fillEmptyResponses: true,\n            viewer: false,\n            resolverMiddleware: (getResolverParams, originalFactory) => (root, args, context, info) => {\n                const resolverData = { root, args, context, info };\n                const resolverParams = getResolverParams();\n                resolverParams.requestOptions = {\n                    headers: getHeadersObject(headersFactory(resolverData)),\n                };\n                return originalFactory(() => resolverParams)(root, args, context, info);\n            },\n        });\n        const { args, contextVariables } = parseInterpolationStrings(Object.values(config.operationHeaders || {}));\n        const rootFields = [\n            ...Object.values(((_a = schema.getQueryType()) === null || _a === void 0 ? void 0 : _a.getFields()) || {}),\n            ...Object.values(((_b = schema.getMutationType()) === null || _b === void 0 ? void 0 : _b.getFields()) || {}),\n            ...Object.values(((_c = schema.getSubscriptionType()) === null || _c === void 0 ? void 0 : _c.getFields()) || {}),\n        ];\n        for (const rootField of rootFields) {\n            for (const argName in args) {\n                const argConfig = args[argName];\n                rootField.args.push({\n                    name: argName,\n                    description: undefined,\n                    defaultValue: undefined,\n                    extensions: undefined,\n                    astNode: undefined,\n                    ...argConfig,\n                });\n            }\n        }\n        return {\n            schema,\n            contextVariables,\n        };\n    },\n};\nexport default handler;\n//# sourceMappingURL=index.js.map","var nodeFetch = require('node-fetch')\nvar realFetch = nodeFetch.default || nodeFetch\n\nvar fetch = function (url, options) {\n  // Support schemaless URIs on the server for parity with the browser.\n  // Ex: //github.com/ -> https://github.com/\n  if (/^\\/\\//.test(url)) {\n    url = 'https:' + url\n  }\n  return realFetch.call(this, url, options)\n}\n\nmodule.exports = exports = fetch\nexports.fetch = fetch\nexports.Headers = nodeFetch.Headers\nexports.Request = nodeFetch.Request\nexports.Response = nodeFetch.Response\n\n// Needed for TypeScript consumers without esModuleInterop.\nexports.default = fetch\n"],"names":["convertSwaggerObjToOpenAPI","oasValidate","pluralize.singular","translationLog","debug","httpLog","Oas3Tools.getBaseUrl","Oas3Tools.sanitize","Oas3Tools.CaseStyle","Oas3Tools.resolveRef","Oas3Tools.instantiatePathAndGetQuery","Oas3Tools.desanitizeObjectKeys","Oas3Tools.trim","Oas3Tools.sanitizeObjectKeys","Oas3Tools.getResponseObject","JSONPath.JSONPath","preprocessingLog","Oas3Tools.countOperations","Oas3Tools.countOperationsMutation","Oas3Tools.countOperationsQuery","Oas3Tools.isOperation","Oas3Tools.formatOperationString","Oas3Tools.generateOperationId","Oas3Tools.getRequestSchemaAndNames","Oas3Tools.getResponseSchemaAndNames","Oas3Tools.getEndpointLinks","Oas3Tools.getParameters","Oas3Tools.getSecurityRequirements","Oas3Tools.getServers","Oas3Tools.getSecuritySchemes","Oas3Tools.capitalize","Oas3Tools.storeSaneName","Oas3Tools.getSchemaTargetGraphQLType","Oas3Tools.OAS_OPERATIONS","Oas3Tools.uncapitalize","Oas3Tools.getValidOAS3","Oas3Tools.inferResourceNameFromPath","GraphQLTools.getEmptyObjectType"],"mappings":"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"}