{"version":3,"file":"index.cjs.js","sources":["../../../dist/runtime/src/utils.js","../../../dist/runtime/src/constants.js","../../../dist/runtime/src/resolvers-hooks.js","../../../dist/runtime/src/get-mesh.js","../../../dist/runtime/src/parse-config.js"],"sourcesContent":["import { parse } from 'graphql';\nimport { resolve } from 'path';\nimport { printSchemaWithDirectives } from '@graphql-tools/utils';\nimport { paramCase } from 'param-case';\nimport { loadTypedefs } from '@graphql-tools/load';\nimport { GraphQLFileLoader } from '@graphql-tools/graphql-file-loader';\nimport { get, set, kebabCase } from 'lodash';\nimport { stringInterpolator } from '@graphql-mesh/utils';\nimport { mergeResolvers } from '@graphql-tools/merge';\nexport async function getPackage(name, type) {\n    const casedName = paramCase(name);\n    const casedType = paramCase(type);\n    const possibleNames = [\n        `@graphql-mesh/${casedName}`,\n        `@graphql-mesh/${casedName}-${casedType}`,\n        `@graphql-mesh/${casedType}-${casedName}`,\n        casedName,\n        `${casedName}-${casedType}`,\n        `${casedType}-${casedName}`,\n        casedType,\n    ];\n    const possibleModules = possibleNames.concat(resolve(process.cwd(), name));\n    for (const moduleName of possibleModules) {\n        try {\n            const exported = await import(moduleName);\n            return (exported.default || exported.parser || exported);\n        }\n        catch (err) {\n            if (err.message.indexOf(`Cannot find module '${moduleName}'`) === -1) {\n                throw new Error(`Unable to load ${type} matching ${name}: ${err.message}`);\n            }\n        }\n    }\n    throw new Error(`Unable to find ${type} matching ${name}`);\n}\nexport async function getHandler(name) {\n    const handlerFn = await getPackage(name, 'handler');\n    return handlerFn;\n}\nexport async function resolveAdditionalTypeDefs(baseDir, additionalTypeDefs) {\n    if (additionalTypeDefs) {\n        const sources = await loadTypedefs(additionalTypeDefs, {\n            cwd: baseDir,\n            loaders: [new GraphQLFileLoader()],\n        });\n        return sources.map(source => source.document || parse(source.rawSDL || printSchemaWithDirectives(source.schema)));\n    }\n    return undefined;\n}\nexport async function resolveAdditionalResolvers(baseDir, additionalResolvers) {\n    const loadedResolvers = await Promise.all((additionalResolvers || []).map(async (additionalResolver) => {\n        if (typeof additionalResolver === 'string') {\n            const filePath = additionalResolver;\n            const exported = await import(resolve(baseDir, filePath));\n            let resolvers = null;\n            if (exported.default) {\n                if (exported.default.resolvers) {\n                    resolvers = exported.default.resolvers;\n                }\n                else if (typeof exported.default === 'object') {\n                    resolvers = exported.default;\n                }\n            }\n            else if (exported.resolvers) {\n                resolvers = exported.resolvers;\n            }\n            if (!resolvers) {\n                console.warn(`Unable to load resolvers from file: ${filePath}`);\n                return {};\n            }\n            return resolvers;\n        }\n        else {\n            return {\n                [additionalResolver.type]: {\n                    [additionalResolver.field]: {\n                        selectionSet: additionalResolver.requiredSelectionSet,\n                        resolve: async (root, args, context, info) => {\n                            const resolverData = { root, args, context, info };\n                            const methodArgs = {};\n                            for (const argPath in additionalResolver.args) {\n                                set(methodArgs, argPath, stringInterpolator.parse(additionalResolver.args[argPath], resolverData));\n                            }\n                            const result = await context[additionalResolver.targetSource].api[additionalResolver.targetMethod](methodArgs, {\n                                selectedFields: additionalResolver.resultSelectedFields,\n                                selectionSet: additionalResolver.resultSelectionSet,\n                                depth: additionalResolver.resultDepth,\n                            });\n                            return additionalResolver.returnData ? get(result, additionalResolver.returnData) : result;\n                        },\n                    },\n                },\n            };\n        }\n    }));\n    return mergeResolvers(loadedResolvers);\n}\nexport function ensureDocumentNode(document) {\n    return typeof document === 'string' ? parse(document) : document;\n}\nexport async function resolveCache(cacheConfig) {\n    if (cacheConfig) {\n        const cacheName = Object.keys(cacheConfig)[0];\n        const config = cacheConfig[cacheName];\n        const moduleName = kebabCase(cacheName);\n        const pkg = await getPackage(moduleName, 'cache');\n        const Cache = pkg.default || pkg;\n        return new Cache(config);\n    }\n    return undefined;\n}\nexport async function resolveMerger(mergerConfig) {\n    const pkg = await getPackage(mergerConfig || 'stitching', 'merger');\n    return pkg.default || pkg;\n}\n//# sourceMappingURL=utils.js.map","export const MESH_CONTEXT_SYMBOL = Symbol('isMeshContext');\nexport const MESH_API_CONTEXT_SYMBOL = Symbol('isMeshAPIContext');\n//# sourceMappingURL=constants.js.map","import { Kind, print, parse, } from 'graphql';\nimport { composeResolvers } from '@graphql-tools/resolvers-composition';\nimport { buildOperationNodeForField } from '@graphql-tools/utils';\nimport { addResolversToSchema } from '@graphql-tools/schema';\nimport { MESH_CONTEXT_SYMBOL, MESH_API_CONTEXT_SYMBOL } from './constants';\nimport { delegateToSchema } from '@graphql-tools/delegate';\nimport { extractResolvers } from '@graphql-mesh/utils';\nfunction isMeshContext(context) {\n    return !!context && typeof context === 'object' && MESH_CONTEXT_SYMBOL in context;\n}\nfunction isAPIContext(apiContext) {\n    return !!apiContext && typeof apiContext === 'object' && MESH_API_CONTEXT_SYMBOL in apiContext;\n}\nfunction createProxyInfo({ schema, parentType, field, depthLimit = 2, root, args, selectedFields, selectionSet, info, }) {\n    const actualReturnType = 'ofType' in info.returnType ? info.returnType.ofType : info.returnType;\n    const returnType = 'ofType' in field.type ? field.type.ofType : field.type;\n    if (!selectedFields &&\n        !selectionSet &&\n        'name' in actualReturnType &&\n        'name' in returnType &&\n        actualReturnType.name === returnType.name) {\n        return {\n            ...info,\n            returnType,\n        };\n    }\n    selectionSet = selectionSet && (typeof selectionSet === 'string' ? parse(selectionSet) : parse(print(selectionSet)));\n    const operation = (selectionSet === null || selectionSet === void 0 ? void 0 : selectionSet.definitions[0]) ||\n        buildOperationNodeForField({\n            schema,\n            kind: 'query',\n            field: field.name,\n            depthLimit,\n            argNames: Object.keys(args),\n            selectedFields,\n        });\n    return {\n        fieldName: field.name,\n        fieldNodes: operation.selectionSet.selections.filter(s => s.kind === Kind.FIELD),\n        returnType: field.type,\n        parentType,\n        schema,\n        fragments: {},\n        rootValue: root,\n        operation,\n        variableValues: args,\n        path: {\n            key: field.name,\n        },\n    };\n}\nexport function applyResolversHooksToResolvers(unifiedSchema, resolvers, hooks) {\n    return composeResolvers(resolvers, {\n        '*.*': originalResolver => async (root, args, context = {}, info) => {\n            const resolverData = {\n                root,\n                args,\n                context,\n                info,\n            };\n            hooks.emit('resolverCalled', resolverData);\n            try {\n                const proxyContext = new Proxy(context, {\n                    get(context, apiName) {\n                        if (isMeshContext(context)) {\n                            const apiContext = context[apiName];\n                            if (isAPIContext(apiContext)) {\n                                const sdk = new Proxy(apiContext, {\n                                    get(apiContext, fieldName) {\n                                        const apiSchema = unifiedSchema.extensions.sourceMap.get(apiContext.rawSource);\n                                        const rootTypes = {\n                                            query: apiSchema.getQueryType(),\n                                            mutation: apiSchema.getMutationType(),\n                                            subscription: apiSchema.getSubscriptionType(),\n                                        };\n                                        let parentType;\n                                        let operation;\n                                        let field;\n                                        for (const operationName in rootTypes) {\n                                            const rootType = rootTypes[operationName];\n                                            if (rootType) {\n                                                const fieldMap = rootType.getFields();\n                                                if (fieldName in fieldMap) {\n                                                    operation = operationName;\n                                                    field = fieldMap[fieldName];\n                                                    parentType = rootType;\n                                                }\n                                            }\n                                        }\n                                        return (methodArgs = {}, { depth, fields, selectionSet } = {}) => {\n                                            const proxyInfo = createProxyInfo({\n                                                schema: apiSchema,\n                                                parentType,\n                                                field,\n                                                depthLimit: depth,\n                                                root,\n                                                args: methodArgs,\n                                                selectedFields: fields,\n                                                selectionSet,\n                                                info,\n                                            });\n                                            return delegateToSchema({\n                                                schema: apiSchema,\n                                                operation,\n                                                fieldName,\n                                                args: methodArgs,\n                                                context,\n                                                info: proxyInfo,\n                                            });\n                                        };\n                                    },\n                                });\n                                return {\n                                    ...apiContext,\n                                    api: sdk,\n                                };\n                            }\n                        }\n                        return context[apiName];\n                    },\n                });\n                const result = await originalResolver(root, args, proxyContext, info);\n                hooks.emit('resolverDone', resolverData, result);\n                return result;\n            }\n            catch (e) {\n                hooks.emit('resolverError', resolverData, e);\n                throw e;\n            }\n        },\n    });\n}\nexport function applyResolversHooksToSchema(schema, hooks) {\n    const sourceResolvers = extractResolvers(schema);\n    return addResolversToSchema({\n        schema,\n        resolvers: applyResolversHooksToResolvers(schema, sourceResolvers, hooks),\n        updateResolversInPlace: true,\n    });\n}\n//# sourceMappingURL=resolvers-hooks.js.map","/* eslint-disable no-unused-expressions */\nimport { execute, subscribe } from 'graphql';\nimport { ensureDocumentNode } from './utils';\nimport InMemoryLRUCache from '@graphql-mesh/cache-inmemory-lru';\nimport { applyResolversHooksToSchema } from './resolvers-hooks';\nimport { EventEmitter } from 'events';\nimport { MESH_CONTEXT_SYMBOL, MESH_API_CONTEXT_SYMBOL } from './constants';\nimport { applySchemaTransforms } from '@graphql-tools/utils';\nexport function groupTransforms({ transforms, apiName, cache, hooks, }) {\n    const wrapTransforms = [];\n    const noWrapTransforms = [];\n    transforms === null || transforms === void 0 ? void 0 : transforms.forEach(({ transformLibrary: TransformCtor, config }) => {\n        const transform = new TransformCtor({\n            apiName,\n            config,\n            cache,\n            hooks,\n        });\n        if (transform.noWrap) {\n            noWrapTransforms.push(transform);\n        }\n        else {\n            wrapTransforms.push(transform);\n        }\n    });\n    return { wrapTransforms, noWrapTransforms };\n}\nexport async function getMesh(options) {\n    const rawSources = [];\n    let hooks = options.hooks;\n    if (!hooks) {\n        hooks = new EventEmitter({ captureRejections: true });\n        hooks.setMaxListeners(Infinity);\n    }\n    const cache = options.cache || new InMemoryLRUCache();\n    await Promise.all(options.sources.map(async (apiSource) => {\n        const source = await apiSource.handlerLibrary.getMeshSource({\n            name: apiSource.name,\n            config: apiSource.handlerConfig || {},\n            hooks,\n            cache,\n        });\n        let apiSchema = source.schema;\n        const apiName = apiSource.name;\n        const { wrapTransforms, noWrapTransforms } = groupTransforms({\n            transforms: apiSource.transforms,\n            apiName,\n            cache,\n            hooks,\n        });\n        apiSchema = applySchemaTransforms(apiSchema, noWrapTransforms);\n        rawSources.push({\n            name: apiName,\n            contextBuilder: source.contextBuilder || null,\n            schema: apiSchema,\n            executor: source.executor,\n            subscriber: source.subscriber,\n            transforms: wrapTransforms,\n            contextVariables: source.contextVariables || [],\n            handler: apiSource.handlerLibrary,\n        });\n    }));\n    let unifiedSchema = await options.merger({\n        rawSources,\n        cache,\n        hooks,\n        typeDefs: options.additionalTypeDefs,\n        resolvers: options.additionalResolvers,\n        transforms: options.transforms.map(({ transformLibrary: TransformCtor, config }) => new TransformCtor({\n            config,\n            cache,\n            hooks,\n        })),\n    });\n    hooks.emit('schemaReady', unifiedSchema);\n    unifiedSchema = applyResolversHooksToSchema(unifiedSchema, hooks);\n    async function buildMeshContext(initialContextValue) {\n        const context = {\n            ...initialContextValue,\n            [MESH_CONTEXT_SYMBOL]: true,\n        };\n        await Promise.all(rawSources.map(async (rawSource) => {\n            const contextBuilder = rawSource.contextBuilder;\n            if (contextBuilder) {\n                const sourceContext = await contextBuilder(context);\n                if (sourceContext) {\n                    Object.assign(context, sourceContext);\n                }\n            }\n            Object.assign(context, {\n                [rawSource.name]: {\n                    rawSource,\n                    [MESH_API_CONTEXT_SYMBOL]: true,\n                },\n            });\n        }));\n        return context;\n    }\n    async function meshExecute(document, variables, context, rootValue) {\n        const contextValue = await buildMeshContext(context);\n        return execute({\n            document: ensureDocumentNode(document),\n            contextValue,\n            rootValue: rootValue || {},\n            variableValues: variables || {},\n            schema: unifiedSchema,\n        });\n    }\n    async function meshSubscribe(document, variables, context, rootValue) {\n        const contextValue = await buildMeshContext(context);\n        return subscribe({\n            document: ensureDocumentNode(document),\n            contextValue,\n            rootValue: rootValue || {},\n            variableValues: variables || {},\n            schema: unifiedSchema,\n        });\n    }\n    const localRequester = async (document, variables, context) => {\n        const executionResult = await meshExecute(document, variables, context);\n        if (executionResult.data && !executionResult.errors) {\n            return executionResult.data;\n        }\n        else {\n            throw new GraphQLMeshSdkError(executionResult.errors, document, variables, executionResult.data);\n        }\n    };\n    return {\n        execute: meshExecute,\n        subscribe: meshSubscribe,\n        schema: unifiedSchema,\n        contextBuilder: buildMeshContext,\n        rawSources,\n        sdkRequester: localRequester,\n        cache,\n        hooks,\n        destroy: () => hooks.emit('destroy'),\n    };\n}\nexport class GraphQLMeshSdkError extends Error {\n    constructor(errors, document, variables, data) {\n        super(`GraphQL Mesh SDK Failed (${errors.length} errors): ${errors.map(e => e.message).join('\\n\\t')}`);\n        this.errors = errors;\n        this.document = document;\n        this.variables = variables;\n        this.data = data;\n        errors.forEach(e => console.error(e));\n    }\n}\n//# sourceMappingURL=get-mesh.js.map","import { cosmiconfig, defaultLoaders } from 'cosmiconfig';\nimport { getHandler, getPackage, resolveAdditionalResolvers, resolveCache, resolveMerger, resolveAdditionalTypeDefs, } from './utils';\nimport { getJsonSchema } from '@graphql-mesh/types';\nimport Ajv from 'ajv';\nexport async function parseConfig(rawConfig, options) {\n    let config;\n    const { configFormat = 'object' } = options || {};\n    switch (configFormat) {\n        case 'yaml':\n            config = defaultLoaders['.yaml']('.meshrc.yml', rawConfig);\n            break;\n        case 'json':\n            config = defaultLoaders['.json']('.meshrc.json', rawConfig);\n            break;\n        case 'object':\n            config = rawConfig;\n            break;\n    }\n    return processConfig(config, options);\n}\nexport async function processConfig(config, options) {\n    var _a, _b;\n    const { dir = process.cwd(), ignoreAdditionalResolvers = false } = options || {};\n    await Promise.all(((_a = config.require) === null || _a === void 0 ? void 0 : _a.map(mod => import(mod))) || []);\n    const [sources, transforms, additionalTypeDefs, additionalResolvers, cache, merger] = await Promise.all([\n        Promise.all(config.sources.map(async (source) => {\n            const handlerName = Object.keys(source.handler)[0];\n            const handlerConfig = source.handler[handlerName];\n            const [handlerLibrary, transforms] = await Promise.all([\n                getHandler(handlerName),\n                Promise.all((source.transforms || []).map(async (t) => {\n                    const transformName = Object.keys(t)[0];\n                    const transformConfig = t[transformName];\n                    const transformLibrary = await getPackage(transformName, 'transform');\n                    return {\n                        config: transformConfig,\n                        transformLibrary,\n                    };\n                })),\n            ]);\n            return {\n                name: source.name,\n                handlerConfig,\n                handlerLibrary,\n                transforms,\n            };\n        })),\n        Promise.all(((_b = config.transforms) === null || _b === void 0 ? void 0 : _b.map(async (t) => {\n            const transformName = Object.keys(t)[0];\n            const transformConfig = t[transformName];\n            const TransformLibrary = await getPackage(transformName, 'transform');\n            return {\n                config: transformConfig,\n                transformLibrary: TransformLibrary,\n            };\n        })) || []),\n        resolveAdditionalTypeDefs(dir, config.additionalTypeDefs),\n        resolveAdditionalResolvers(dir, ignoreAdditionalResolvers ? [] : config.additionalResolvers || []),\n        resolveCache(config.cache),\n        resolveMerger(config.merger),\n    ]);\n    return {\n        sources,\n        transforms,\n        additionalTypeDefs,\n        additionalResolvers,\n        cache,\n        merger,\n        mergerType: config.merger,\n    };\n}\nfunction customLoader(ext) {\n    function loader(filepath, content) {\n        if (typeof process !== 'undefined' && 'env' in process) {\n            content = content.replace(/\\$\\{(.*?)\\}/g, (_, variable) => {\n                let varName = variable;\n                let defaultValue = '';\n                if (variable.includes(':')) {\n                    const spl = variable.split(':');\n                    varName = spl.shift();\n                    defaultValue = spl.join(':');\n                }\n                return process.env[varName] || defaultValue;\n            });\n        }\n        if (ext === 'json') {\n            return defaultLoaders['.json'](filepath, content);\n        }\n        if (ext === 'yaml') {\n            return defaultLoaders['.yaml'](filepath, content);\n        }\n        if (ext === 'js') {\n            return defaultLoaders['.js'](filepath, content);\n        }\n    }\n    return loader;\n}\nexport function validateConfig(config) {\n    const ajv = new Ajv({ schemaId: 'auto' });\n    // Settings for draft-04\n    const metaSchema = require('ajv/lib/refs/json-schema-draft-04.json');\n    ajv.addMetaSchema(metaSchema);\n    const isValid = ajv.validate(getJsonSchema(), config);\n    if (!isValid) {\n        throw new Error(`GraphQL Mesh Configuration is not valid: ${ajv.errorsText()}`);\n    }\n}\nexport async function findAndParseConfig(options) {\n    const { configName = 'mesh', dir = process.cwd(), ignoreAdditionalResolvers = false } = options || {};\n    const explorer = cosmiconfig(configName, {\n        loaders: {\n            '.json': customLoader('json'),\n            '.yaml': customLoader('yaml'),\n            '.yml': customLoader('yaml'),\n            '.js': customLoader('js'),\n            noExt: customLoader('yaml'),\n        },\n    });\n    const results = await explorer.search(dir);\n    const config = results === null || results === void 0 ? void 0 : results.config;\n    validateConfig(config);\n    return processConfig(config, { dir, ignoreAdditionalResolvers });\n}\n//# sourceMappingURL=parse-config.js.map"],"names":["paramCase","resolve","loadTypedefs","GraphQLFileLoader","parse","printSchemaWithDirectives","set","stringInterpolator","get","mergeResolvers","kebabCase","print","buildOperationNodeForField","Kind","composeResolvers","delegateToSchema","schema","extractResolvers","addResolversToSchema","EventEmitter","applySchemaTransforms","execute","subscribe","defaultLoaders","getJsonSchema","cosmiconfig"],"mappings":"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"}