{"version":3,"file":"index.cjs.js","sources":["../../../dist/cli/src/commands/scalars-map.js","../../../dist/cli/src/commands/typescript.js","../../../dist/cli/src/commands/generate-sdk.js","../../../dist/cli/src/commands/serve/playground.js","../../../dist/cli/src/commands/serve/serve.js","../../../dist/cli/src/bin.js"],"sourcesContent":["export const scalarsMap = {\n    BigInt: 'BigInt',\n    Byte: 'Buffer',\n    Date: 'Date',\n    DateTime: 'Date',\n    GUID: 'String',\n};\n//# sourceMappingURL=scalars-map.js.map","import * as tsBasePlugin from '@graphql-codegen/typescript';\nimport * as tsResolversPlugin from '@graphql-codegen/typescript-resolvers';\nimport { Kind } from 'graphql';\nimport { codegen } from '@graphql-codegen/core';\nimport { scalarsMap } from './scalars-map';\nconst unifiedContextIdentifier = 'MeshContext';\nclass CodegenHelpers extends tsBasePlugin.TsVisitor {\n    getTypeToUse(namedType) {\n        if (this.scalars[namedType.name.value]) {\n            return this._getScalar(namedType.name.value);\n        }\n        return this._getTypeForNode(namedType);\n    }\n}\nfunction buildSignatureBasedOnRootFields(codegenHelpers, type) {\n    if (!type) {\n        return [];\n    }\n    const fields = type.getFields();\n    return Object.keys(fields).map(fieldName => {\n        const field = fields[fieldName];\n        const argsExists = field.args && field.args.length > 0;\n        const argsName = argsExists ? `${type.name}${codegenHelpers.convertName(field.name)}Args` : '{}';\n        const parentTypeNode = {\n            kind: Kind.NAMED_TYPE,\n            name: {\n                kind: Kind.NAME,\n                value: type.name,\n            },\n        };\n        return `  ${field.name}: (args${argsExists ? '' : '?'}: ${argsName}, projectionOptions?: ProjectionOptions) => Promise<${codegenHelpers.getTypeToUse(parentTypeNode)}['${fieldName}']>`;\n    });\n}\nfunction generateTypesForApi(options) {\n    const codegenHelpers = new CodegenHelpers(options.schema, {}, {});\n    const sdkIdentifier = `${options.name}Sdk`;\n    const contextIdentifier = `${options.name}Context`;\n    const operations = [\n        ...buildSignatureBasedOnRootFields(codegenHelpers, options.schema.getQueryType()),\n        ...buildSignatureBasedOnRootFields(codegenHelpers, options.schema.getMutationType()),\n        ...buildSignatureBasedOnRootFields(codegenHelpers, options.schema.getSubscriptionType()),\n    ];\n    const sdk = {\n        identifier: sdkIdentifier,\n        codeAst: `export type ${sdkIdentifier} = {\n${operations.join(',\\n')}\n};`,\n    };\n    const context = {\n        identifier: contextIdentifier,\n        codeAst: `export type ${contextIdentifier} = { \n      ${options.name}: { api: ${sdkIdentifier} }, \n    };`,\n    };\n    return {\n        sdk,\n        context,\n    };\n}\nexport function generateTsTypes(unifiedSchema, rawSources, mergerType = 'stitching') {\n    return codegen({\n        filename: 'types.ts',\n        documents: [],\n        config: {\n            scalars: scalarsMap,\n            skipTypename: true,\n        },\n        schemaAst: unifiedSchema,\n        schema: undefined,\n        pluginMap: {\n            typescript: tsBasePlugin,\n            resolvers: tsResolversPlugin,\n            contextSdk: {\n                plugin: async () => {\n                    const commonTypes = [\n                        `import { MeshContext as OriginalMeshContext, ProjectionOptions } from '@graphql-mesh/runtime';`,\n                    ];\n                    const sdkItems = [];\n                    const contextItems = [];\n                    const results = await Promise.all(rawSources.map(source => {\n                        const item = generateTypesForApi({\n                            schema: unifiedSchema.extensions.sourceMap.get(source),\n                            name: source.name,\n                        });\n                        if (item) {\n                            if (item.sdk) {\n                                sdkItems.push(item.sdk.codeAst);\n                            }\n                            if (item.context) {\n                                contextItems.push(item.context.codeAst);\n                            }\n                        }\n                        return item;\n                    }));\n                    const contextType = `export type ${unifiedContextIdentifier} = ${results\n                        .map(r => { var _a; return (_a = r === null || r === void 0 ? void 0 : r.context) === null || _a === void 0 ? void 0 : _a.identifier; })\n                        .filter(Boolean)\n                        .join(' & ')} & OriginalMeshContext;`;\n                    return {\n                        content: [...commonTypes, ...sdkItems, ...contextItems, contextType].join('\\n\\n'),\n                    };\n                },\n            },\n        },\n        plugins: [\n            {\n                typescript: {\n                    namingConvention: {\n                        enumValues: 'keep',\n                    },\n                },\n            },\n            {\n                resolvers: {\n                    useIndexSignature: true,\n                    noSchemaStitching: mergerType !== 'stitching',\n                    contextType: unifiedContextIdentifier,\n                    federation: mergerType === 'federation',\n                },\n            },\n            {\n                contextSdk: {},\n            },\n        ],\n    });\n}\n//# sourceMappingURL=typescript.js.map","import { Kind, print } from 'graphql';\nimport { codegen } from '@graphql-codegen/core';\nimport * as tsPlugin from '@graphql-codegen/typescript';\nimport * as tsOperationsPlugin from '@graphql-codegen/typescript-operations';\nimport * as tsGenericSdkPlugin from '@graphql-codegen/typescript-generic-sdk';\nimport { loadDocuments as loadDocumentsToolkit } from '@graphql-tools/load';\nimport { CodeFileLoader } from '@graphql-tools/code-file-loader';\nimport { GraphQLFileLoader } from '@graphql-tools/graphql-file-loader';\nimport { buildOperationNodeForField } from '@graphql-tools/utils';\nimport { scalarsMap } from './scalars-map';\nexport async function generateSdk(schema, { operations: operationsPaths = [], depth: depthLimit = 1, }) {\n    let sources = [];\n    if (operationsPaths.length) {\n        sources = await loadDocumentsToolkit(operationsPaths, {\n            loaders: [new CodeFileLoader(), new GraphQLFileLoader()],\n            skipGraphQLImport: true,\n            cwd: process.cwd(),\n        });\n    }\n    else {\n        const rootTypeMap = {\n            query: schema.getQueryType(),\n            mutation: schema.getMutationType(),\n            subscription: schema.getSubscriptionType(),\n        };\n        for (const operationType in rootTypeMap) {\n            const rootType = rootTypeMap[operationType];\n            if (rootType) {\n                for (const fieldName in rootType.getFields()) {\n                    const operation = buildOperationNodeForField({\n                        schema,\n                        field: fieldName,\n                        kind: operationType,\n                        depthLimit,\n                    });\n                    const document = {\n                        kind: Kind.DOCUMENT,\n                        definitions: [operation],\n                    };\n                    sources.push({\n                        document,\n                        rawSDL: print(document),\n                        location: `${fieldName}_${operationType}.graphql`,\n                    });\n                }\n            }\n        }\n    }\n    const output = await codegen({\n        filename: 'types.ts',\n        pluginMap: {\n            typescript: tsPlugin,\n            typescriptOperations: tsOperationsPlugin,\n            typescriptGenericSdk: tsGenericSdkPlugin,\n        },\n        documents: sources,\n        skipDocumentsValidation: true,\n        schema: undefined,\n        schemaAst: schema,\n        plugins: [\n            {\n                typescript: {},\n            },\n            {\n                typescriptOperations: {},\n            },\n            {\n                typescriptGenericSdk: {},\n            },\n        ],\n        config: {\n            flattenGeneratedTypes: true,\n            scalars: scalarsMap,\n        },\n    });\n    return output;\n}\n//# sourceMappingURL=generate-sdk.js.map","import { loadDocuments } from '@graphql-tools/load';\nimport { CodeFileLoader } from '@graphql-tools/code-file-loader';\nimport { GraphQLFileLoader } from '@graphql-tools/graphql-file-loader';\nimport { basename, resolve } from 'path';\nimport { readFile } from 'fs-extra';\nexport function playground(exampleQuery, graphqlPath) {\n    return async (req, res, next) => {\n        if (req.query.query) {\n            next();\n            return;\n        }\n        res.setHeader('Content-Type', 'text/html');\n        res.write(`\n          <script>\n              const localStorageMock = new Map();\n              Object.defineProperty(window, 'localStorage', {\n                get() {\n                  return {\n                    getItem(key) {\n                      return localStorageMock.get(key);\n                    },\n                    setItem(key, val) {\n                      return localStorageMock.set(key, val);\n                    },\n                    clear() {\n                      return localStorageMock.clear();\n                    },\n                    key(i) {\n                      return localStorageMock.keys()[i];\n                    },\n                    remove(key) {\n                      return localStorageMock.delete(key);\n                    },\n                    get length() {\n                      return localStorageMock.size;\n                    }\n                  }\n                }\n              });\n            </script>\n        `);\n        const renderPageOptions = {\n            title: 'GraphQL Mesh Playground',\n        };\n        if (exampleQuery) {\n            const documents = await loadDocuments(exampleQuery, {\n                loaders: [new CodeFileLoader(), new GraphQLFileLoader()],\n                cwd: process.cwd(),\n            });\n            renderPageOptions.tabs = documents.map(doc => ({\n                name: doc.location && basename(doc.location),\n                query: doc.rawSDL,\n            }));\n        }\n        res.write(await readFile(resolve(__dirname, './playground.html'), 'utf8'));\n        res.write(`\n            <script>\n            window.addEventListener('load', function (event) {\n                const renderPageOptions = ${JSON.stringify(renderPageOptions)};\n                const endpoint = location.protocol + '//' + location.hostname + (location.port ? (':' + location.port) : '') + '${graphqlPath}';\n                renderPageOptions.endpoint = endpoint;\n                if (renderPageOptions.tabs) {\n                    renderPageOptions.tabs.forEach(tab => {\n                        tab.endpoint = endpoint;\n                    });\n                }\n                GraphQLPlayground.init(document.getElementById('root'), renderPageOptions);\n            });\n            </script>\n        `);\n        res.end();\n    };\n}\n//# sourceMappingURL=playground.js.map","import { execute, subscribe } from 'graphql';\nimport express from 'express';\nimport { fork as clusterFork, isMaster } from 'cluster';\nimport { cpus } from 'os';\nimport 'json-bigint-patch';\nimport { createServer } from 'http';\nimport { playground } from './playground';\nimport graphqlHTTP from 'express-graphql';\nimport { graphqlUploadExpress } from 'graphql-upload';\nimport { SubscriptionServer } from 'subscriptions-transport-ws';\nexport async function serveMesh(logger, schema, contextBuilder, fork, port = 4000, exampleQuery) {\n    var _a;\n    const graphqlPath = '/graphql';\n    if (isMaster && fork) {\n        fork = fork > 1 ? fork : cpus().length;\n        for (let i = 0; i < fork; i++) {\n            clusterFork();\n        }\n        logger.info(`🕸️ => Serving GraphQL Mesh GraphiQL: http://localhost:${port}${graphqlPath} in ${fork} forks`);\n    }\n    else {\n        const app = express();\n        app.set('trust proxy', 'loopback');\n        const httpServer = createServer(app);\n        if (((_a = process.env.NODE_ENV) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== 'production') {\n            const playgroundMiddleware = playground(exampleQuery, graphqlPath);\n            app.get('/', playgroundMiddleware);\n            app.get(graphqlPath, playgroundMiddleware);\n        }\n        app.use(graphqlUploadExpress({ maxFileSize: 10000000, maxFiles: 10 }), graphqlHTTP(async (req) => ({\n            schema,\n            context: await contextBuilder(req),\n            graphiql: false,\n        })));\n        SubscriptionServer.create({\n            schema,\n            execute,\n            subscribe,\n            onConnect: async function (_params, _webSocket, connectionContext) {\n                const context = await contextBuilder(connectionContext.request);\n                return context;\n            },\n        }, {\n            server: httpServer,\n            path: graphqlPath,\n        });\n        httpServer.listen(port.toString(), () => {\n            if (!fork) {\n                logger.info(`🕸️ => Serving GraphQL Mesh Playground: http://localhost:${port}${graphqlPath}`);\n            }\n        });\n    }\n}\n//# sourceMappingURL=serve.js.map","import { findAndParseConfig, getMesh } from '@graphql-mesh/runtime';\nimport * as yargs from 'yargs';\nimport { createLogger, format, transports } from 'winston';\nimport { generateTsTypes } from './commands/typescript';\nimport { generateSdk } from './commands/generate-sdk';\nimport { serveMesh } from './commands/serve/serve';\nimport { resolve } from 'path';\nimport { writeFile, ensureFile } from 'fs-extra';\nconst logger = createLogger({\n    level: 'info',\n    format: format.prettyPrint(),\n    transports: [\n        new transports.Console({\n            format: format.simple(),\n        }),\n    ],\n});\nexport async function graphqlMesh() {\n    return yargs\n        .command('serve', 'Serves a GraphiQLApolloServer interface to test your Mesh API', builder => {\n        builder.option('fork', {\n            required: false,\n            number: true,\n            count: true,\n        });\n        builder.option('port', {\n            required: false,\n        });\n        builder.option('example-query', {\n            required: false,\n            string: true,\n        });\n    }, async ({ fork, port, 'example-query': exampleQuery }) => {\n        try {\n            const meshConfig = await findAndParseConfig();\n            const { schema, contextBuilder } = await getMesh(meshConfig);\n            await serveMesh(logger, schema, contextBuilder, fork, port, exampleQuery);\n        }\n        catch (e) {\n            logger.error('Unable to serve mesh: ', e);\n        }\n    })\n        .command('generate-sdk', 'Generates fully type-safe SDK based on unifid GraphQL schema and GraphQL operations', builder => {\n        builder\n            .option('operations', {\n            type: 'array',\n        })\n            .option('depth', {\n            type: 'number',\n        })\n            .option('output', {\n            required: true,\n            type: 'string',\n        });\n    }, async (args) => {\n        const meshConfig = await findAndParseConfig({\n            ignoreAdditionalResolvers: true,\n        });\n        const { schema, destroy } = await getMesh(meshConfig);\n        const result = await generateSdk(schema, args);\n        const outFile = resolve(process.cwd(), args.output);\n        await ensureFile(outFile);\n        await writeFile(outFile, result);\n        destroy();\n    })\n        .command('typescript', 'Generates TypeScript typings for the generated mesh', builder => {\n        builder.option('output', {\n            required: true,\n            type: 'string',\n        });\n    }, async (args) => {\n        const meshConfig = await findAndParseConfig({\n            ignoreAdditionalResolvers: true,\n        });\n        const { schema, rawSources, destroy } = await getMesh(meshConfig);\n        const result = await generateTsTypes(schema, rawSources, meshConfig.mergerType);\n        const outFile = resolve(process.cwd(), args.output);\n        await ensureFile(outFile);\n        await writeFile(outFile, result);\n        destroy();\n    }).argv;\n}\ngraphqlMesh()\n    .then(() => { })\n    .catch(e => {\n    logger.error(e);\n});\n//# sourceMappingURL=bin.js.map"],"names":["tsBasePlugin.TsVisitor","Kind","codegen","loadDocumentsToolkit","CodeFileLoader","GraphQLFileLoader","buildOperationNodeForField","print","tsPlugin","loadDocuments","basename","readFile","resolve","isMaster","cpus","clusterFork","createServer","graphqlUploadExpress","SubscriptionServer","execute","subscribe","createLogger","format","transports","yargs\n        .command","findAndParseConfig","getMesh","ensureFile","writeFile"],"mappings":"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"}