"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var apollo_server_express_1 = require("apollo-server-express");
var bodyParser = require("body-parser");
var connect = require("connect");
var express = require("express");
var http = require("http");
var qs = require("qs");
var urlModule = require("url");
var schema_1 = require("./schema");
var util_1 = require("./util");
var engine_common_1 = require("./engine-common");
var engine_1 = require("../engine");
var os = require("os");
engine_common_1.runSuitesForHttpServerFramework('express', {
    createApp: function () {
        var path = '/graphql';
        var app = express();
        app.get(path + "/ping", function (req, res) {
            res.json({ pong: true });
        });
        app.use(path, bodyParser.json(), apollo_server_express_1.graphqlExpress({
            schema: schema_1.schema,
            rootValue: schema_1.rootValue,
            tracing: true,
            cacheControl: true,
        }));
        return app;
    },
    serverForApp: function (app) {
        return http.createServer(app);
    },
    appParameter: 'expressApp',
});
function connectQuery(req, res, next) {
    var parsedUrl = urlModule.parse(req.url);
    req.query = qs.parse(parsedUrl.query);
    next();
}
engine_common_1.runSuitesForHttpServerFramework('connect', {
    createApp: function () {
        var path = '/graphql';
        var app = connect().use(connectQuery);
        app.use(path + "/ping", function (req, res) {
            res.end(JSON.stringify({ pong: true }));
        });
        app.use(path, bodyParser.json());
        app.use(path, apollo_server_express_1.graphqlConnect({
            schema: schema_1.schema,
            rootValue: schema_1.rootValue,
            tracing: true,
            cacheControl: true,
        }));
        return app;
    },
    serverForApp: function (app) {
        return http.createServer(app);
    },
    appParameter: 'connectApp',
});
test('can pass a string as a port', function () { return __awaiter(_this, void 0, void 0, function () {
    var httpServer, engine, p;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                httpServer = http.createServer();
                engine = new engine_1.ApolloEngine({
                    apiKey: 'faked',
                    logging: {
                        level: 'WARN',
                        destination: 'STDERR',
                    },
                    reporting: {
                        disabled: true,
                    },
                });
                _a.label = 1;
            case 1:
                _a.trys.push([1, , 3, 5]);
                p = new Promise(function (resolve) {
                    return engine.listen({ port: '0', httpServer: httpServer }, resolve);
                });
                return [4 /*yield*/, p];
            case 2:
                _a.sent();
                return [3 /*break*/, 5];
            case 3: return [4 /*yield*/, engine.stop()];
            case 4:
                _a.sent();
                httpServer.close();
                return [7 /*endfinally*/];
            case 5: return [2 /*return*/];
        }
    });
}); });
test('must specify apiKey', function () { return __awaiter(_this, void 0, void 0, function () {
    var httpServer, engine, p;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                httpServer = http.createServer();
                engine = new engine_1.ApolloEngine();
                p = new Promise(function (resolve, reject) {
                    engine.on('error', function (e) { return resolve(e); });
                    engine.listen({
                        port: '0',
                        httpServer: httpServer,
                        launcherOptions: { proxyStderrStream: util_1.devNull() },
                    }, function () { return reject(new Error('should not start')); });
                });
                return [4 /*yield*/, p];
            case 1:
                _a.sent();
                httpServer.close();
                return [2 /*return*/];
        }
    });
}); });
describe('env var', function () {
    var oldValue;
    beforeEach(function () {
        oldValue = process.env.ENGINE_API_KEY;
    });
    afterEach(function () {
        if (oldValue === undefined) {
            delete process.env.ENGINE_API_KEY;
        }
        else {
            process.env.ENGINE_API_KEY = oldValue;
        }
    });
    test('can specify apiKey as env var', function () { return __awaiter(_this, void 0, void 0, function () {
        var httpServer, engine, p;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    httpServer = http.createServer();
                    engine = new engine_1.ApolloEngine();
                    process.env.ENGINE_API_KEY = 'faked';
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, , 3, 5]);
                    p = new Promise(function (resolve) {
                        return engine.listen({
                            port: '0',
                            httpServer: httpServer,
                            launcherOptions: { proxyStderrStream: util_1.devNull() },
                        }, resolve);
                    });
                    return [4 /*yield*/, p];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 5];
                case 3: return [4 /*yield*/, engine.stop()];
                case 4:
                    _a.sent();
                    httpServer.close();
                    return [7 /*endfinally*/];
                case 5: return [2 /*return*/];
            }
        });
    }); });
});
describe('launch failure', function () {
    var engine = null;
    var httpServer = null;
    beforeEach(function () {
        engine = null;
        httpServer = null;
    });
    afterEach(function () { return __awaiter(_this, void 0, void 0, function () {
        var child;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(engine !== null)) return [3 /*break*/, 3];
                    child = engine['launcher']['child'];
                    if (!child) return [3 /*break*/, 2];
                    return [4 /*yield*/, engine.stop()];
                case 1:
                    _a.sent();
                    expect(util_1.processIsRunning(child.pid)).toBe(false);
                    _a.label = 2;
                case 2:
                    engine = null;
                    _a.label = 3;
                case 3:
                    if (httpServer) {
                        httpServer.close();
                    }
                    return [2 /*return*/];
            }
        });
    }); });
    test('emits error on invalid config', function () { return __awaiter(_this, void 0, void 0, function () {
        var start, p, end;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    engine = new engine_1.ApolloEngine({
                        apiKey: 'faked',
                        logging: {
                            level: 'INVALID',
                        },
                        reporting: {
                            disabled: true,
                        },
                    });
                    start = +new Date();
                    httpServer = http.createServer();
                    p = new Promise(function (resolve, reject) {
                        // Help TS understand that these variables are still set.
                        httpServer = httpServer;
                        engine = engine;
                        // We expect to get an error, so that's why we're *resolving* with it.
                        engine.once('error', function (err) {
                            resolve(err.message);
                        });
                        engine.listen({
                            httpServer: httpServer,
                            port: 0,
                            launcherOptions: { proxyStderrStream: util_1.devNull() },
                        }, function () { return reject(new Error('Engine should not listen successfully')); });
                    });
                    return [4 /*yield*/, expect(p).resolves.toMatch(/Engine crashed due to invalid configuration/)];
                case 1:
                    _a.sent();
                    end = +new Date();
                    expect(end - start).toBeLessThan(5000);
                    return [2 /*return*/];
            }
        });
    }); });
    if (os.type() === 'Windows_NT') {
        // Named pipes should actually work
        test('using pipePath on Windows should actually work', function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        httpServer = http.createServer();
                        httpServer = httpServer;
                        engine = new engine_1.ApolloEngine({
                            apiKey: 'faked',
                            logging: {
                                level: 'DEBUG',
                                destination: 'STDERR',
                            },
                            reporting: {
                                disabled: true,
                            },
                        });
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, , 3, 5]);
                        p = new Promise(function (resolve) {
                            httpServer = httpServer;
                            engine.listen({ pipePath: String.raw(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\\.pipe\foo"], ["\\\\.\\pipe\\foo"]))), httpServer: httpServer }, resolve);
                        });
                        return [4 /*yield*/, p];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, engine.stop()];
                    case 4:
                        _a.sent();
                        httpServer.close();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        }); });
        test('using pipe in port variable on Windows should actually work', function () { return __awaiter(_this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        httpServer = http.createServer();
                        httpServer = httpServer;
                        engine = new engine_1.ApolloEngine({
                            apiKey: 'faked',
                            logging: {
                                level: 'DEBUG',
                                destination: 'STDERR',
                            },
                            reporting: {
                                disabled: true,
                            },
                        });
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, , 3, 5]);
                        p = new Promise(function (resolve) {
                            httpServer = httpServer;
                            engine.listen({ port: String.raw(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\\.pipe\foo"], ["\\\\.\\pipe\\foo"]))), httpServer: httpServer }, resolve);
                        });
                        return [4 /*yield*/, p];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, engine.stop()];
                    case 4:
                        _a.sent();
                        httpServer.close();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        }); });
    }
    else {
        test('using pipePath on non-Windows results in a configuration error', function () { return __awaiter(_this, void 0, void 0, function () {
            var start, p, end;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        engine = new engine_1.ApolloEngine({
                            apiKey: 'faked',
                            reporting: {
                                disabled: true,
                            },
                        });
                        start = +new Date();
                        httpServer = http.createServer();
                        p = new Promise(function (resolve, reject) {
                            // Help TS understand that these variables are still set.
                            httpServer = httpServer;
                            engine = engine;
                            // We expect to get an error, so that's why we're *resolving* with it.
                            engine.once('error', function (err) {
                                resolve(err.message);
                            });
                            engine.listen({
                                httpServer: httpServer,
                                pipePath: 'anything',
                                launcherOptions: { proxyStderrStream: util_1.devNull() },
                            }, function () { return reject(new Error('Engine should not listen successfully')); });
                        });
                        return [4 /*yield*/, expect(p).resolves.toMatch(/Engine crashed due to invalid configuration/)];
                    case 1:
                        _a.sent();
                        end = +new Date();
                        expect(end - start).toBeLessThan(5000);
                        return [2 /*return*/];
                }
            });
        }); });
    }
});
engine_common_1.runCleanupTests(false);
var templateObject_1, templateObject_2;
//# sourceMappingURL=engine.test.js.map