"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var http = require("http");
var express = require("express");
var tmp = require("tmp");
var bodyParser = require("body-parser");
var apollo_server_express_1 = require("apollo-server-express");
var fs_1 = require("fs");
var stream_1 = require("stream");
var schema_1 = require("./schema");
var util_1 = require("./util");
var engine_common_1 = require("./engine-common");
var launcher_1 = require("../launcher");
function basicConfig(port) {
    return {
        apiKey: 'faked',
        logging: {
            level: 'WARN',
            destination: 'STDERR',
        },
        frontends: [
            {
                // We need to know which to connect to.
                host: '127.0.0.1',
            },
        ],
        reporting: {
            disabled: true,
        },
        origins: [
            {
                http: {
                    url: "http://127.0.0.1:" + port + "/graphql",
                },
            },
        ],
    };
}
describe('ApolloEngineLauncher', function () {
    var httpServers = [];
    var port;
    var config;
    var launcher = null;
    beforeEach(function () {
        httpServers = [];
        port = gqlServer();
        config = basicConfig(port);
    });
    afterEach(function () { return __awaiter(_this, void 0, void 0, function () {
        var child;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(launcher !== null)) return [3 /*break*/, 3];
                    child = launcher['child'];
                    if (!(child !== null)) return [3 /*break*/, 2];
                    return [4 /*yield*/, launcher.stop()];
                case 1:
                    _a.sent();
                    expect(util_1.processIsRunning(child.pid)).toBe(false);
                    _a.label = 2;
                case 2:
                    launcher = null;
                    _a.label = 3;
                case 3:
                    httpServers.forEach(function (server) { return server.close(); });
                    return [2 /*return*/];
            }
        });
    }); });
    function gqlServer(path) {
        if (path === void 0) { path = '/graphql'; }
        var app = express();
        app.use(path, bodyParser.json(), apollo_server_express_1.graphqlExpress({
            schema: schema_1.schema,
            rootValue: schema_1.rootValue,
            tracing: true,
        }));
        var server = http.createServer(app);
        httpServers.push(server);
        return server.listen().address().port;
    }
    describe('config', function () {
        test('allows reading and reloading config from file', function () { return __awaiter(_this, void 0, void 0, function () {
            var tmpConfig, tmpLog, listeningAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tmpConfig = tmp.fileSync({ discardDescriptor: true });
                        tmpLog = tmp.fileSync({ discardDescriptor: true });
                        fs_1.unlinkSync(tmpLog.name);
                        // Write a basic config file out to disk. It does not have request logging
                        // turned on.
                        fs_1.writeFileSync(tmpConfig.name, JSON.stringify(config));
                        // Run Engine. Ask it to check the config file for reloads every 5ms
                        // instead of the default 5s, for a faster test.
                        launcher = new launcher_1.ApolloEngineLauncher(tmpConfig.name);
                        return [4 /*yield*/, launcher.start({
                                extraArgs: ['-config-reload-file=5ms'],
                            })];
                    case 1:
                        listeningAddress = _a.sent();
                        return [4 /*yield*/, schema_1.verifyEndpointSuccess(listeningAddress.url + "/graphql", false)];
                    case 2:
                        _a.sent();
                        // Add request logging to the config file. Write it out (atomically!) and
                        // wait twice the -config-reload-file amount of time.
                        config.logging.request = {
                            destination: tmpLog.name,
                        };
                        fs_1.writeFileSync(tmpConfig.name + '.atomic', JSON.stringify(config));
                        fs_1.renameSync(tmpConfig.name + '.atomic', tmpConfig.name);
                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];
                    case 3:
                        _a.sent();
                        // Make a request, which should be logged.
                        return [4 /*yield*/, schema_1.verifyEndpointSuccess(listeningAddress.url + "/graphql", false)];
                    case 4:
                        // Make a request, which should be logged.
                        _a.sent();
                        // Wait a moment and verify the request log exists.
                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];
                    case 5:
                        // Wait a moment and verify the request log exists.
                        _a.sent();
                        fs_1.readFileSync(tmpLog.name);
                        return [2 /*return*/];
                }
            });
        }); });
        test('allows reading config from argument', function () { return __awaiter(_this, void 0, void 0, function () {
            var listeningAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        launcher = new launcher_1.ApolloEngineLauncher(config);
                        return [4 /*yield*/, launcher.start()];
                    case 1:
                        listeningAddress = _a.sent();
                        return [4 /*yield*/, schema_1.verifyEndpointSuccess(listeningAddress.url + "/graphql", false)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('stdio redirection', function () {
        test('custom stdout', function () { return __awaiter(_this, void 0, void 0, function () {
            var written, proxyStdoutStream;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        config.logging.level = 'INFO';
                        config.logging.destination = 'STDOUT';
                        launcher = new launcher_1.ApolloEngineLauncher(config);
                        written = false;
                        proxyStdoutStream = new stream_1.Writable({
                            write: function (chunk, encoding, callback) {
                                written = true;
                                callback();
                            },
                        });
                        return [4 /*yield*/, launcher.start({ proxyStdoutStream: proxyStdoutStream })];
                    case 1:
                        _a.sent();
                        expect(written).toBe(true);
                        return [2 /*return*/];
                }
            });
        }); });
        test('custom stderr', function () { return __awaiter(_this, void 0, void 0, function () {
            var written, proxyStderrStream;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        config.logging.level = 'INFO';
                        launcher = new launcher_1.ApolloEngineLauncher(config);
                        written = false;
                        proxyStderrStream = new stream_1.Writable({
                            write: function (chunk, encoding, callback) {
                                written = true;
                            },
                        });
                        return [4 /*yield*/, launcher.start({ proxyStderrStream: proxyStderrStream })];
                    case 1:
                        _a.sent();
                        expect(written).toBe(true);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('process management', function () {
        test('restarts binary', function () { return __awaiter(_this, void 0, void 0, function () {
            var listenAddress, child, childPid, restartingPromise, restartPromise, child2, restartedPid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        launcher = new launcher_1.ApolloEngineLauncher(config);
                        return [4 /*yield*/, launcher.start()];
                    case 1:
                        listenAddress = _a.sent();
                        return [4 /*yield*/, schema_1.verifyEndpointSuccess(listenAddress.url + "/graphql", false)];
                    case 2:
                        _a.sent();
                        child = launcher['child'];
                        expect(child).toBeDefined();
                        childPid = child.pid;
                        expect(util_1.processIsRunning(childPid)).toBe(true);
                        restartingPromise = new Promise(function (resolve) {
                            launcher.once('restarting', resolve);
                        });
                        restartPromise = new Promise(function (resolve) {
                            launcher.once('start', resolve);
                        });
                        child.kill('SIGKILL');
                        return [4 /*yield*/, restartingPromise];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, restartPromise];
                    case 4:
                        _a.sent();
                        child2 = launcher['child'];
                        expect(child2).toBeDefined();
                        restartedPid = child2.pid;
                        expect(restartedPid).not.toBe(child);
                        expect(util_1.processIsRunning(childPid)).toBe(false);
                        expect(util_1.processIsRunning(restartedPid)).toBe(true);
                        return [2 /*return*/];
                }
            });
        }); });
        test('exits faster than timeout on invalid config', function () { return __awaiter(_this, void 0, void 0, function () {
            var start, end;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        config.logging.level = 'invalid-level';
                        launcher = new launcher_1.ApolloEngineLauncher(config);
                        start = +new Date();
                        return [4 /*yield*/, expect(launcher.start({ proxyStderrStream: util_1.devNull() })).rejects.toThrow(/Engine crashed due to invalid configuration/)];
                    case 1:
                        _a.sent();
                        end = +new Date();
                        expect(end - start).toBeLessThan(5000);
                        return [2 /*return*/];
                }
            });
        }); });
        test('hits timeout on problems other than invalid config', function () { return __awaiter(_this, void 0, void 0, function () {
            var start, restarted, p, end;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        launcher = new launcher_1.ApolloEngineLauncher(config);
                        start = +new Date();
                        restarted = 0;
                        launcher.on('restarting', function () {
                            restarted++;
                        });
                        p = launcher.start({
                            proxyStdoutStream: util_1.devNull(),
                            startupTimeout: 300,
                            // This is a kind of silly way to get it to "fail" with a non-bad-config
                            // reason, but hey, it works.
                            extraArgs: ['-version'],
                        });
                        return [4 /*yield*/, expect(p).rejects.toThrow(/engineproxy timed out/)];
                    case 1:
                        _a.sent();
                        end = +new Date();
                        expect(end - start).toBeGreaterThanOrEqual(300);
                        expect(restarted).toBeGreaterThan(0);
                        return [2 /*return*/];
                }
            });
        }); });
        engine_common_1.runCleanupTests(true);
    });
});
//# sourceMappingURL=launcher.test.js.map