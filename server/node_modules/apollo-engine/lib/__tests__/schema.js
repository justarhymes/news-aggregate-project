"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var request = require("request");
exports.schema = graphql_1.buildSchema("\n  type Query {\n    hello: String @cacheControl(maxAge: 30)\n    errorTrigger: String\n  }\n");
exports.rootValue = {
    hello: function () {
        return 'Hello World';
    },
    errorTrigger: function () {
        throw new Error('Kaboom');
    },
};
function verifyEndpointSuccess(url, hasTracing) {
    return new Promise(function (resolve) {
        request.post({
            url: url,
            json: true,
            body: { query: '{ hello }' },
        }, function (err, response, body) {
            expect(err).toBe(null);
            expect(body['data']['hello']).toBe('Hello World');
            if (hasTracing) {
                expect(body['extensions'] && body['extensions']['tracing']).toBeDefined();
            }
            else {
                expect(body['extensions'] && body['extensions']['tracing']).toBeUndefined();
            }
            resolve(body);
        });
    });
}
exports.verifyEndpointSuccess = verifyEndpointSuccess;
function verifyEndpointBatch(url, hasTracing) {
    return new Promise(function (resolve) {
        request.post({
            url: url,
            json: true,
            body: [{ query: '{ hello }' }, { query: '{ hello }' }],
        }, function (err, response, bodies) {
            expect(err).toBe(null);
            expect(bodies.length).toBe(2);
            bodies.forEach(function (body) {
                expect(body['data']['hello']).toBe('Hello World');
                if (hasTracing) {
                    expect(body['extensions'] && body['extensions']['tracing']).toBeDefined();
                }
                else {
                    expect(body['extensions'] && body['extensions']['tracing']).toBeUndefined();
                }
            });
            resolve();
        });
    });
}
exports.verifyEndpointBatch = verifyEndpointBatch;
function verifyEndpointFailure(url) {
    return new Promise(function (resolve) {
        request.post({
            url: url,
            json: true,
            body: { query: '{ validButDoesNotComplyToSchema }' },
        }, function (err, response, body) {
            if (response.statusCode === 200) {
                // Proxy responds with an error-ed 200:
                expect(response.body['errors'][0]['message']).toBe('Cannot query field "validButDoesNotComplyToSchema" on type "Query".');
            }
            else {
                // Express responds with a 400
                expect(response.statusCode).toBe(400);
            }
            resolve();
        });
    });
}
exports.verifyEndpointFailure = verifyEndpointFailure;
function verifyEndpointError(url) {
    return new Promise(function (resolve) {
        request.post({
            url: url,
            json: true,
            body: { query: '{ errorTrigger }' },
        }, function (err, response, body) {
            expect(err).toBe(null);
            expect(response.statusCode).toBe(200);
            expect(body['errors'][0]['message']).toBe('Kaboom');
            resolve();
        });
    });
}
exports.verifyEndpointError = verifyEndpointError;
function verifyEndpointGet(url, hasTracing) {
    return new Promise(function (resolve) {
        var query = '{ hello }';
        request.get({
            url: url + "?query=" + encodeURIComponent(query),
            json: true,
        }, function (err, response, body) {
            expect(err).toBe(null);
            expect(response.statusCode).toBe(200);
            expect(body['data']['hello']).toBe('Hello World');
            if (hasTracing) {
                expect(body['extensions'] && body['extensions']['tracing']).toBeDefined();
            }
            else {
                expect(body['extensions'] && body['extensions']['tracing']).toBeUndefined();
            }
            resolve();
        });
    });
}
exports.verifyEndpointGet = verifyEndpointGet;
//# sourceMappingURL=schema.js.map