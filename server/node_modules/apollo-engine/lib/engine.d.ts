/// <reference types="@types/node" />
/// <reference types="express" />
/// <reference types="connect" />
/// <reference types="koa" />
/// <reference types="koa-bodyparser" />
/// <reference types="koa-router" />
import { ListenOptions as NetListenOptions } from 'net';
import { EventEmitter } from 'events';
import { Server as HttpServer } from 'http';
import { Application as ExpressApp } from 'express';
import { Server as ConnectApp } from 'connect';
import * as KoaApp from 'koa';
import { Server as RestifyServer } from 'restify';
import { EngineConfig, LauncherOptions, ListeningAddress } from './types';
export interface MeteorListenOptions {
    graphqlPaths?: string[];
    innerHost?: string;
    launcherOptions?: LauncherOptions;
}
export interface CoreListenOptions extends MeteorListenOptions {
    port?: number | string;
    host?: string;
    pipePath?: string;
}
export interface ListenOptions extends CoreListenOptions {
    httpServer?: HttpServer;
    expressApp?: ExpressApp;
    connectApp?: ConnectApp;
    koaApp?: KoaApp;
    restifyServer?: RestifyServer;
}
export interface EngineNetListenOptions extends NetListenOptions {
    pipePath?: string;
}
export interface HapiListenOptions extends CoreListenOptions {
}
export declare class ApolloEngine extends EventEmitter {
    engineListeningAddress: ListeningAddress;
    private config;
    private launcher;
    private httpServer;
    constructor(config?: EngineConfig);
    listen(options: ListenOptions, listenCallback?: () => void): void;
    stop(): Promise<void>;
    meteorListen(webApp: any, options?: MeteorListenOptions): void;
    hapiListener(options: HapiListenOptions): Promise<HttpServer>;
    private startEngine(innerAddress, options);
}
