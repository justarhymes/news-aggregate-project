"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.preparePaginationInfoTC = preparePaginationInfoTC;
exports.preparePaginationTC = preparePaginationTC;

var _graphqlCompose = require("graphql-compose");

/* eslint-disable arrow-body-style */
// PaginationInfo should be global
const PaginationInfoTC = _graphqlCompose.ObjectTypeComposer.createTemp(`
# Information about pagination.
type PaginationInfo {
  # Current page number
  currentPage: Int!
  
  # Number of items per page
  perPage: Int!
  
  # Total number of pages
  pageCount: Int
  
  # Total number of items
  itemCount: Int
  
  # When paginating forwards, are there more items?
  hasNextPage: Boolean
  
  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean
}
`);

function preparePaginationInfoTC(sc) {
  // Pagination Info can be overrided via SchemaComposer registry
  if (sc.hasInstance('PaginationInfo', _graphqlCompose.ObjectTypeComposer)) {
    return sc.get('PaginationInfo');
  }

  sc.set('PaginationInfo', PaginationInfoTC);
  return PaginationInfoTC;
}

function preparePaginationTC(tc, resolverName) {
  const schemaComposer = tc.schemaComposer;
  const name = `${tc.getTypeName()}${(0, _graphqlCompose.upperFirst)(resolverName || 'pagination')}`;

  if (schemaComposer.has(name)) {
    return schemaComposer.getOTC(name);
  }

  const paginationTC = schemaComposer.createObjectTC({
    name,
    description: 'List of items with pagination.',
    fields: {
      count: {
        type: 'Int',
        description: 'Total object count.'
      },
      items: {
        type: () => tc.getTypeNonNull().getTypePlural(),
        description: 'Array of objects.'
      },
      pageInfo: {
        type: preparePaginationInfoTC(schemaComposer).getTypeNonNull(),
        description: 'Information to aid in pagination.'
      }
    }
  });
  return paginationTC;
}