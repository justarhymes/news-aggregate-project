"use strict";

var _graphqlCompose = require("graphql-compose");

var _graphql = require("graphql-compose/lib/graphql");

var _User = require("../__mocks__/User");

var _preparePaginationType = require("../preparePaginationType");

describe('preparePaginationTC()', () => {
  it('should return ObjectTypeComposer', () => {
    expect((0, _preparePaginationType.preparePaginationTC)(_User.UserTC)).toBeInstanceOf(_graphqlCompose.ObjectTypeComposer);
  });
  it('should return the same Type object when called again', () => {
    const firstPaginationType = (0, _preparePaginationType.preparePaginationTC)(_User.UserTC);
    const secondPaginationType = (0, _preparePaginationType.preparePaginationTC)(_User.UserTC);
    expect(firstPaginationType).toBe(secondPaginationType);
  });
  it('should return a separate GraphQLObjectType with a different name', () => {
    const paginationType = (0, _preparePaginationType.preparePaginationTC)(_User.UserTC);
    const otherPaginationType = (0, _preparePaginationType.preparePaginationTC)(_User.UserTC, 'otherPagination');
    expect(paginationType).not.toBe(otherPaginationType);
  });
  it('should have name ending with `Pagination`', () => {
    expect((0, _preparePaginationType.preparePaginationTC)(_User.UserTC).getTypeName()).toBe('UserPagination');
  });
  it('should have name ending with `OtherPagination` when passed lowercase otherPagination', () => {
    expect((0, _preparePaginationType.preparePaginationTC)(_User.UserTC, 'otherConnection').getTypeName()).toBe('UserOtherConnection');
  });
  it('should have field `count` with provided Type', () => {
    const tc = (0, _preparePaginationType.preparePaginationTC)(_User.UserTC);
    expect(tc.getFieldType('count')).toBe(_graphql.GraphQLInt);
  });
  it('should have field `pageInfo` with GraphQLNonNull(PaginationInfoType)', () => {
    const PaginationInfoTC = (0, _preparePaginationType.preparePaginationInfoTC)(_User.UserTC.schemaComposer);
    const tc = (0, _preparePaginationType.preparePaginationTC)(_User.UserTC);
    expect(tc.getFieldType('pageInfo')).toBeInstanceOf(_graphql.GraphQLNonNull);
    const pageInfo = (0, _graphql.getNamedType)(tc.getFieldType('pageInfo'));
    expect(pageInfo).toBe(PaginationInfoTC.getType());
  });
  it('should have field `items` with GraphQLList(EdgeType)', () => {
    const tc = (0, _preparePaginationType.preparePaginationTC)(_User.UserTC);
    expect(tc.getFieldType('items')).toBeInstanceOf(_graphql.GraphQLList);
    const items = (0, _graphql.getNamedType)(tc.getFieldType('items'));
    expect(items.name).toEqual('User');
  });
  it('should return same type for same Type in ObjectTypeComposer', () => {
    const t1 = (0, _preparePaginationType.preparePaginationTC)(_User.UserTC);
    const t2 = (0, _preparePaginationType.preparePaginationTC)(_User.UserTC);
    expect(t1).toEqual(t2);
  });
});