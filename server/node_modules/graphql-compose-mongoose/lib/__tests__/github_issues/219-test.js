"use strict";

var _graphqlCompose = require("graphql-compose");

var _index = require("../../index");

var _userModel = require("../../__mocks__/userModel");

/* eslint-disable no-param-reassign */
beforeAll(async () => {
  await _userModel.UserModel.base.connect();
  await _userModel.UserModel.create({
    name: 'AAAAA',
    age: 10
  });
  await _userModel.UserModel.create({
    name: 'BBBBB',
    age: 20
  });
});
afterAll(() => _userModel.UserModel.base.disconnect());
const UserTC = (0, _index.composeWithMongoose)(_userModel.UserModel);
describe('issue #219 - Authorization using wrapResolve', () => {
  it('correct request', async () => {
    UserTC.wrapResolverResolve('findOne', next => rp => {
      rp.beforeQuery = async query => {
        var _rp$args, _rp$args$filter, _rp$args2, _rp$args2$filter;

        // Choose any case or mix of them
        // 1) check rp.context
        // 2) make another query await Permission.find();
        // 3) modify query = query.where({ perm: 'ALLOWED', userId: context?.req?.user?.id })
        query = query.where({
          age: {
            $gt: 19
          }
        }); // 4) return cached data return UserCachedData[rp.args.id];

        if ((rp === null || rp === void 0 ? void 0 : (_rp$args = rp.args) === null || _rp$args === void 0 ? void 0 : (_rp$args$filter = _rp$args.filter) === null || _rp$args$filter === void 0 ? void 0 : _rp$args$filter.name) === 'CACHED') {
          return {
            name: 'CACHED',
            age: 99
          };
        } // 5) just check arg value


        if ((rp === null || rp === void 0 ? void 0 : (_rp$args2 = rp.args) === null || _rp$args2 === void 0 ? void 0 : (_rp$args2$filter = _rp$args2.filter) === null || _rp$args2$filter === void 0 ? void 0 : _rp$args2$filter.name) === 'ERROR') {
          throw new Error('Wrong arg!');
        }

        return query.exec();
      };

      return next(rp);
    });

    _graphqlCompose.schemaComposer.Query.addFields({
      findUser: UserTC.getResolver('findOne')
    });

    const schema = _graphqlCompose.schemaComposer.buildSchema();

    expect(await _graphqlCompose.graphql.graphql(schema, `query {
          findUser(filter: { name: "AAAAA" }) {
            name
            age
          }
        }`)).toEqual({
      data: {
        findUser: null
      }
    });
    expect(await _graphqlCompose.graphql.graphql(schema, `query {
          findUser(filter: { name: "BBBBB" }) {
            name
            age
          }
        }`)).toEqual({
      data: {
        findUser: {
          age: 20,
          name: 'BBBBB'
        }
      }
    });
    expect(await _graphqlCompose.graphql.graphql(schema, `query {
          findUser(filter: { name: "CACHED" }) {
            name
            age
          }
        }`)).toEqual({
      data: {
        findUser: {
          age: 99,
          name: 'CACHED'
        }
      }
    });
    expect(await _graphqlCompose.graphql.graphql(schema, `query {
          findUser(filter: { name: "ERROR" }) {
            name
            age
          }
        }`)).toEqual({
      data: {
        findUser: null
      },
      errors: [new Error('Wrong arg!')]
    });
  });
});